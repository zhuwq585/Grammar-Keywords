# Generated from parsers/CPP14/CPP14Parser.g4 by ANTLR 4.8
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0093")
        buf.write("\u081d\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa")
        buf.write("\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae")
        buf.write("\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1")
        buf.write("\4\u00b2\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5")
        buf.write("\t\u00b5\4\u00b6\t\u00b6\4\u00b7\t\u00b7\4\u00b8\t\u00b8")
        buf.write("\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb\t\u00bb\4\u00bc")
        buf.write("\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\3\2\5\2\u017e")
        buf.write("\n\2\3\2\3\2\3\3\6\3\u0183\n\3\r\3\16\3\u0184\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\5\3\u018e\n\3\3\4\3\4\5\4\u0192\n")
        buf.write("\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u019b\n\5\3\5\5\5\u019e")
        buf.write("\n\5\3\6\3\6\5\6\u01a2\n\6\3\6\3\6\3\7\3\7\3\7\3\7\5\7")
        buf.write("\u01aa\n\7\3\7\3\7\3\7\3\7\3\7\5\7\u01b1\n\7\3\7\5\7\u01b4")
        buf.write("\n\7\3\7\7\7\u01b7\n\7\f\7\16\7\u01ba\13\7\3\b\3\b\5\b")
        buf.write("\u01be\n\b\3\b\3\b\3\t\3\t\5\t\u01c4\n\t\3\t\3\t\3\n\3")
        buf.write("\n\3\n\3\n\5\n\u01cc\n\n\5\n\u01ce\n\n\3\13\3\13\3\f\3")
        buf.write("\f\3\f\7\f\u01d5\n\f\f\f\16\f\u01d8\13\f\3\f\5\f\u01db")
        buf.write("\n\f\3\r\3\r\5\r\u01df\n\r\3\16\5\16\u01e2\n\16\3\16\3")
        buf.write("\16\5\16\u01e6\n\16\3\17\5\17\u01e9\n\17\3\17\3\17\3\17")
        buf.write("\3\20\3\20\5\20\u01f0\n\20\3\20\3\20\5\20\u01f4\n\20\3")
        buf.write("\20\5\20\u01f7\n\20\3\20\5\20\u01fa\n\20\3\20\5\20\u01fd")
        buf.write("\n\20\3\21\3\21\3\21\3\21\5\21\u0203\n\21\3\21\3\21\5")
        buf.write("\21\u0207\n\21\3\21\3\21\5\21\u020b\n\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u0219")
        buf.write("\n\21\3\21\3\21\5\21\u021d\n\21\3\21\3\21\3\21\3\21\5")
        buf.write("\21\u0223\n\21\3\21\3\21\3\21\3\21\3\21\5\21\u022a\n\21")
        buf.write("\3\21\3\21\3\21\3\21\5\21\u0230\n\21\3\21\3\21\5\21\u0234")
        buf.write("\n\21\3\21\3\21\7\21\u0238\n\21\f\21\16\21\u023b\13\21")
        buf.write("\3\22\3\22\3\23\3\23\3\24\5\24\u0242\n\24\3\24\3\24\3")
        buf.write("\24\5\24\u0247\n\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\3\24\3\24\3\24\5\24\u0254\n\24\3\25\3\25\3\25\3")
        buf.write("\25\3\25\5\25\u025b\n\25\3\25\3\25\3\25\3\25\3\25\3\25")
        buf.write("\3\25\3\25\3\25\3\25\5\25\u0267\n\25\3\25\3\25\3\25\3")
        buf.write("\25\3\25\3\25\3\25\3\25\5\25\u0271\n\25\3\26\3\26\3\27")
        buf.write("\5\27\u0276\n\27\3\27\3\27\5\27\u027a\n\27\3\27\3\27\3")
        buf.write("\27\3\27\3\27\5\27\u0281\n\27\3\27\5\27\u0284\n\27\3\30")
        buf.write("\3\30\3\30\3\30\3\31\3\31\5\31\u028c\n\31\3\32\3\32\5")
        buf.write("\32\u0290\n\32\3\32\5\32\u0293\n\32\3\33\3\33\3\33\3\33")
        buf.write("\3\33\5\33\u029a\n\33\3\33\3\33\3\33\3\33\3\33\5\33\u02a1")
        buf.write("\n\33\7\33\u02a3\n\33\f\33\16\33\u02a6\13\33\3\34\3\34")
        buf.write("\5\34\u02aa\n\34\3\34\3\34\5\34\u02ae\n\34\3\35\5\35\u02b1")
        buf.write("\n\35\3\35\3\35\3\35\5\35\u02b6\n\35\3\35\3\35\3\36\3")
        buf.write("\36\3\36\3\36\3\36\3\37\3\37\3\37\3\37\3\37\3\37\5\37")
        buf.write("\u02c5\n\37\3 \3 \3 \7 \u02ca\n \f \16 \u02cd\13 \3!\3")
        buf.write("!\3!\7!\u02d2\n!\f!\16!\u02d5\13!\3\"\3\"\3\"\7\"\u02da")
        buf.write("\n\"\f\"\16\"\u02dd\13\"\3#\3#\3#\3#\7#\u02e3\n#\f#\16")
        buf.write("#\u02e6\13#\3$\3$\3$\3$\5$\u02ec\n$\3%\3%\3%\7%\u02f1")
        buf.write("\n%\f%\16%\u02f4\13%\3&\3&\3&\7&\u02f9\n&\f&\16&\u02fc")
        buf.write("\13&\3\'\3\'\3\'\7\'\u0301\n\'\f\'\16\'\u0304\13\'\3(")
        buf.write("\3(\3(\7(\u0309\n(\f(\16(\u030c\13(\3)\3)\3)\7)\u0311")
        buf.write("\n)\f)\16)\u0314\13)\3*\3*\3*\7*\u0319\n*\f*\16*\u031c")
        buf.write("\13*\3+\3+\3+\7+\u0321\n+\f+\16+\u0324\13+\3,\3,\3,\3")
        buf.write(",\3,\3,\5,\u032c\n,\3-\3-\3-\3-\3-\3-\5-\u0334\n-\3.\3")
        buf.write(".\3/\3/\3/\7/\u033b\n/\f/\16/\u033e\13/\3\60\3\60\3\61")
        buf.write("\3\61\5\61\u0344\n\61\3\61\3\61\3\61\3\61\3\61\3\61\5")
        buf.write("\61\u034c\n\61\3\61\5\61\u034f\n\61\3\62\5\62\u0352\n")
        buf.write("\62\3\62\3\62\3\62\3\62\5\62\u0358\n\62\3\62\3\62\3\62")
        buf.write("\3\63\5\63\u035e\n\63\3\63\3\63\3\64\3\64\5\64\u0364\n")
        buf.write("\64\3\64\3\64\3\65\6\65\u0369\n\65\r\65\16\65\u036a\3")
        buf.write("\66\3\66\3\66\3\66\3\66\3\66\3\66\5\66\u0374\n\66\3\66")
        buf.write("\3\66\3\66\3\66\3\66\3\66\5\66\u037c\n\66\3\67\3\67\5")
        buf.write("\67\u0380\n\67\3\67\3\67\3\67\3\67\3\67\5\67\u0387\n\67")
        buf.write("\5\67\u0389\n\67\38\38\38\38\38\38\38\38\38\38\38\38\3")
        buf.write("8\38\38\38\38\38\58\u039d\n8\38\38\58\u03a1\n8\38\38\3")
        buf.write("8\38\58\u03a7\n8\38\38\38\58\u03ac\n8\39\39\59\u03b0\n")
        buf.write("9\3:\5:\u03b3\n:\3:\3:\3:\3;\3;\5;\u03ba\n;\3<\3<\3<\3")
        buf.write("<\3<\5<\u03c1\n<\3<\3<\5<\u03c5\n<\3<\3<\3=\3=\3>\6>\u03cc")
        buf.write("\n>\r>\16>\u03cd\3?\3?\3?\3?\3?\3?\3?\3?\3?\5?\u03d9\n")
        buf.write("?\3@\3@\3@\3@\3@\3@\3@\3@\5@\u03e3\n@\3A\3A\3A\5A\u03e8")
        buf.write("\nA\3A\3A\3A\3A\3B\5B\u03ef\nB\3B\5B\u03f2\nB\3B\3B\3")
        buf.write("B\5B\u03f7\nB\3B\3B\3B\5B\u03fc\nB\3C\3C\3C\3C\3C\3C\3")
        buf.write("C\3C\3D\3D\3E\3E\3E\3F\3F\3F\3F\3F\3F\5F\u0411\nF\3G\6")
        buf.write("G\u0414\nG\rG\16G\u0415\3G\5G\u0419\nG\3H\3H\3I\3I\3J")
        buf.write("\3J\3K\3K\3K\5K\u0424\nK\3L\3L\3L\3L\5L\u042a\nL\3M\6")
        buf.write("M\u042d\nM\rM\16M\u042e\3M\5M\u0432\nM\3N\6N\u0435\nN")
        buf.write("\rN\16N\u0436\3N\5N\u043a\nN\3O\5O\u043d\nO\3O\3O\3O\3")
        buf.write("O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\5O\u0453")
        buf.write("\nO\3P\3P\3P\3P\5P\u0459\nP\3Q\3Q\3Q\3Q\5Q\u045f\nQ\3")
        buf.write("Q\3Q\3R\3R\5R\u0465\nR\3R\5R\u0468\nR\3R\3R\3R\3R\5R\u046e")
        buf.write("\nR\3R\3R\5R\u0472\nR\3R\3R\5R\u0476\nR\3R\5R\u0479\n")
        buf.write("R\3S\3S\3T\3T\3T\3T\5T\u0481\nT\5T\u0483\nT\3T\3T\3U\3")
        buf.write("U\5U\u0489\nU\3U\5U\u048c\nU\3U\5U\u048f\nU\3U\5U\u0492")
        buf.write("\nU\3V\3V\5V\u0496\nV\3V\3V\5V\u049a\nV\3V\3V\3W\3W\5")
        buf.write("W\u04a0\nW\3X\3X\3X\3Y\3Y\3Y\7Y\u04a8\nY\fY\16Y\u04ab")
        buf.write("\13Y\3Z\3Z\3Z\5Z\u04b0\nZ\3[\3[\3\\\3\\\5\\\u04b6\n\\")
        buf.write("\3]\3]\3^\5^\u04bb\n^\3^\3^\3^\5^\u04c0\n^\3^\3^\5^\u04c4")
        buf.write("\n^\3^\3^\3_\3_\3`\3`\3`\3`\3`\3`\3a\5a\u04d1\na\3a\3")
        buf.write("a\3b\3b\5b\u04d7\nb\3b\3b\5b\u04db\nb\3b\3b\3b\3c\5c\u04e1")
        buf.write("\nc\3c\3c\3c\5c\u04e6\nc\3c\3c\3c\3d\3d\3d\3d\3d\3d\3")
        buf.write("e\3e\3e\3e\5e\u04f5\ne\3e\3e\5e\u04f9\ne\3f\6f\u04fc\n")
        buf.write("f\rf\16f\u04fd\3g\3g\3g\5g\u0503\ng\3g\3g\3g\5g\u0508")
        buf.write("\ng\3h\3h\3h\3h\5h\u050e\nh\3h\5h\u0511\nh\3h\3h\3i\3")
        buf.write("i\3i\7i\u0518\ni\fi\16i\u051b\13i\3i\5i\u051e\ni\3j\3")
        buf.write("j\3j\5j\u0523\nj\3j\3j\5j\u0527\nj\3k\3k\3l\3l\5l\u052d")
        buf.write("\nl\3l\3l\3m\6m\u0532\nm\rm\16m\u0533\3n\3n\3n\3n\3n\3")
        buf.write("n\3n\3n\3n\3n\3n\3n\3n\6n\u0543\nn\rn\16n\u0544\5n\u0547")
        buf.write("\nn\3o\3o\3o\7o\u054c\no\fo\16o\u054f\13o\3p\3p\5p\u0553")
        buf.write("\np\3q\3q\3q\3q\3q\5q\u055a\nq\3r\3r\5r\u055e\nr\7r\u0560")
        buf.write("\nr\fr\16r\u0563\13r\3r\3r\3s\3s\3s\5s\u056a\ns\3s\3s")
        buf.write("\3s\3s\5s\u0570\ns\3s\3s\3s\3s\5s\u0576\ns\3s\3s\5s\u057a")
        buf.write("\ns\5s\u057c\ns\7s\u057e\ns\fs\16s\u0581\13s\3t\3t\5t")
        buf.write("\u0585\nt\3t\3t\5t\u0589\nt\3t\5t\u058c\nt\3t\5t\u058f")
        buf.write("\nt\3t\5t\u0592\nt\3u\3u\3u\5u\u0597\nu\3v\3v\5v\u059b")
        buf.write("\nv\3v\5v\u059e\nv\3v\3v\5v\u05a2\nv\3v\5v\u05a5\nv\5")
        buf.write("v\u05a7\nv\3w\6w\u05aa\nw\rw\16w\u05ab\3x\3x\3y\3y\3z")
        buf.write("\5z\u05b3\nz\3z\3z\3{\3{\5{\u05b9\n{\3|\3|\5|\u05bd\n")
        buf.write("|\3|\3|\3|\3|\5|\u05c3\n|\3}\3}\6}\u05c7\n}\r}\16}\u05c8")
        buf.write("\3}\5}\u05cc\n}\5}\u05ce\n}\3~\3~\3~\3~\5~\u05d4\n~\3")
        buf.write("~\3~\5~\u05d8\n~\3~\3~\3~\3~\5~\u05de\n~\3~\3~\3~\3~\3")
        buf.write("~\5~\u05e5\n~\3~\3~\5~\u05e9\n~\5~\u05eb\n~\7~\u05ed\n")
        buf.write("~\f~\16~\u05f0\13~\3\177\7\177\u05f3\n\177\f\177\16\177")
        buf.write("\u05f6\13\177\3\177\3\177\3\u0080\3\u0080\3\u0080\3\u0080")
        buf.write("\3\u0080\3\u0080\3\u0080\5\u0080\u0601\n\u0080\3\u0080")
        buf.write("\3\u0080\5\u0080\u0605\n\u0080\5\u0080\u0607\n\u0080\7")
        buf.write("\u0080\u0609\n\u0080\f\u0080\16\u0080\u060c\13\u0080\3")
        buf.write("\u0081\3\u0081\5\u0081\u0610\n\u0081\3\u0081\5\u0081\u0613")
        buf.write("\n\u0081\3\u0082\3\u0082\3\u0082\7\u0082\u0618\n\u0082")
        buf.write("\f\u0082\16\u0082\u061b\13\u0082\3\u0083\5\u0083\u061e")
        buf.write("\n\u0083\3\u0083\3\u0083\3\u0083\5\u0083\u0623\n\u0083")
        buf.write("\5\u0083\u0625\n\u0083\3\u0083\3\u0083\5\u0083\u0629\n")
        buf.write("\u0083\3\u0084\5\u0084\u062c\n\u0084\3\u0084\5\u0084\u062f")
        buf.write("\n\u0084\3\u0084\3\u0084\5\u0084\u0633\n\u0084\3\u0084")
        buf.write("\3\u0084\3\u0085\5\u0085\u0638\n\u0085\3\u0085\3\u0085")
        buf.write("\3\u0085\3\u0085\3\u0085\5\u0085\u063f\n\u0085\3\u0086")
        buf.write("\3\u0086\3\u0086\3\u0086\3\u0086\5\u0086\u0646\n\u0086")
        buf.write("\3\u0087\3\u0087\3\u0087\5\u0087\u064b\n\u0087\3\u0088")
        buf.write("\3\u0088\5\u0088\u064f\n\u0088\3\u0089\3\u0089\5\u0089")
        buf.write("\u0653\n\u0089\3\u0089\3\u0089\3\u0089\5\u0089\u0658\n")
        buf.write("\u0089\7\u0089\u065a\n\u0089\f\u0089\16\u0089\u065d\13")
        buf.write("\u0089\3\u008a\3\u008a\3\u008a\5\u008a\u0662\n\u008a\5")
        buf.write("\u008a\u0664\n\u008a\3\u008a\3\u008a\3\u008b\3\u008b\5")
        buf.write("\u008b\u066a\n\u008b\3\u008c\3\u008c\3\u008c\5\u008c\u066f")
        buf.write("\n\u008c\3\u008c\3\u008c\3\u008d\3\u008d\5\u008d\u0675")
        buf.write("\n\u008d\3\u008d\3\u008d\5\u008d\u0679\n\u008d\5\u008d")
        buf.write("\u067b\n\u008d\3\u008d\5\u008d\u067e\n\u008d\3\u008d\3")
        buf.write("\u008d\5\u008d\u0682\n\u008d\3\u008d\3\u008d\5\u008d\u0686")
        buf.write("\n\u008d\5\u008d\u0688\n\u008d\5\u008d\u068a\n\u008d\3")
        buf.write("\u008e\5\u008e\u068d\n\u008e\3\u008e\3\u008e\3\u008f\3")
        buf.write("\u008f\3\u0090\3\u0090\3\u0091\3\u0091\3\u0091\3\u0091")
        buf.write("\6\u0091\u0699\n\u0091\r\u0091\16\u0091\u069a\3\u0092")
        buf.write("\5\u0092\u069e\n\u0092\3\u0092\5\u0092\u06a1\n\u0092\3")
        buf.write("\u0092\5\u0092\u06a4\n\u0092\3\u0092\3\u0092\3\u0092\3")
        buf.write("\u0092\3\u0092\3\u0092\3\u0092\5\u0092\u06ad\n\u0092\3")
        buf.write("\u0093\3\u0093\3\u0093\7\u0093\u06b2\n\u0093\f\u0093\16")
        buf.write("\u0093\u06b5\13\u0093\3\u0094\3\u0094\5\u0094\u06b9\n")
        buf.write("\u0094\3\u0094\5\u0094\u06bc\n\u0094\3\u0094\5\u0094\u06bf")
        buf.write("\n\u0094\5\u0094\u06c1\n\u0094\3\u0094\5\u0094\u06c4\n")
        buf.write("\u0094\3\u0094\5\u0094\u06c7\n\u0094\3\u0094\3\u0094\5")
        buf.write("\u0094\u06cb\n\u0094\3\u0095\6\u0095\u06ce\n\u0095\r\u0095")
        buf.write("\16\u0095\u06cf\3\u0096\3\u0096\3\u0097\3\u0097\3\u0097")
        buf.write("\3\u0097\3\u0098\3\u0098\3\u0098\3\u0099\3\u0099\5\u0099")
        buf.write("\u06dd\n\u0099\3\u0099\3\u0099\3\u0099\5\u0099\u06e2\n")
        buf.write("\u0099\7\u0099\u06e4\n\u0099\f\u0099\16\u0099\u06e7\13")
        buf.write("\u0099\3\u009a\5\u009a\u06ea\n\u009a\3\u009a\3\u009a\3")
        buf.write("\u009a\5\u009a\u06ef\n\u009a\3\u009a\3\u009a\3\u009a\5")
        buf.write("\u009a\u06f4\n\u009a\3\u009a\3\u009a\5\u009a\u06f8\n\u009a")
        buf.write("\3\u009b\5\u009b\u06fb\n\u009b\3\u009b\3\u009b\5\u009b")
        buf.write("\u06ff\n\u009b\3\u009c\3\u009c\3\u009d\3\u009d\3\u009e")
        buf.write("\3\u009e\3\u009e\3\u009f\3\u009f\5\u009f\u070a\n\u009f")
        buf.write("\3\u00a0\3\u00a0\5\u00a0\u070e\n\u00a0\3\u00a1\3\u00a1")
        buf.write("\3\u00a1\3\u00a2\3\u00a2\5\u00a2\u0715\n\u00a2\3\u00a2")
        buf.write("\3\u00a2\3\u00a2\5\u00a2\u071a\n\u00a2\7\u00a2\u071c\n")
        buf.write("\u00a2\f\u00a2\16\u00a2\u071f\13\u00a2\3\u00a3\3\u00a3")
        buf.write("\3\u00a3\5\u00a3\u0724\n\u00a3\3\u00a3\3\u00a3\5\u00a3")
        buf.write("\u0728\n\u00a3\3\u00a4\3\u00a4\5\u00a4\u072c\n\u00a4\3")
        buf.write("\u00a5\3\u00a5\3\u00a5\3\u00a6\3\u00a6\3\u00a6\3\u00a6")
        buf.write("\5\u00a6\u0735\n\u00a6\3\u00a7\3\u00a7\3\u00a7\3\u00a7")
        buf.write("\3\u00a7\3\u00a7\3\u00a8\3\u00a8\3\u00a8\7\u00a8\u0740")
        buf.write("\n\u00a8\f\u00a8\16\u00a8\u0743\13\u00a8\3\u00a9\3\u00a9")
        buf.write("\5\u00a9\u0747\n\u00a9\3\u00aa\3\u00aa\3\u00aa\3\u00aa")
        buf.write("\3\u00aa\5\u00aa\u074e\n\u00aa\3\u00aa\3\u00aa\5\u00aa")
        buf.write("\u0752\n\u00aa\3\u00aa\5\u00aa\u0755\n\u00aa\3\u00aa\5")
        buf.write("\u00aa\u0758\n\u00aa\3\u00aa\5\u00aa\u075b\n\u00aa\3\u00aa")
        buf.write("\3\u00aa\5\u00aa\u075f\n\u00aa\3\u00ab\3\u00ab\3\u00ab")
        buf.write("\5\u00ab\u0764\n\u00ab\3\u00ab\3\u00ab\3\u00ac\3\u00ac")
        buf.write("\3\u00ac\5\u00ac\u076b\n\u00ac\3\u00ac\3\u00ac\5\u00ac")
        buf.write("\u076f\n\u00ac\3\u00ac\3\u00ac\5\u00ac\u0773\n\u00ac\3")
        buf.write("\u00ad\3\u00ad\3\u00ae\3\u00ae\5\u00ae\u0779\n\u00ae\3")
        buf.write("\u00ae\3\u00ae\3\u00ae\5\u00ae\u077e\n\u00ae\7\u00ae\u0780")
        buf.write("\n\u00ae\f\u00ae\16\u00ae\u0783\13\u00ae\3\u00af\3\u00af")
        buf.write("\3\u00af\5\u00af\u0788\n\u00af\3\u00b0\3\u00b0\3\u00b0")
        buf.write("\3\u00b0\5\u00b0\u078e\n\u00b0\3\u00b0\5\u00b0\u0791\n")
        buf.write("\u00b0\3\u00b1\5\u00b1\u0794\n\u00b1\3\u00b1\3\u00b1\3")
        buf.write("\u00b1\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b3")
        buf.write("\3\u00b3\3\u00b3\3\u00b3\3\u00b4\3\u00b4\5\u00b4\u07a4")
        buf.write("\n\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b5\6\u00b5\u07aa")
        buf.write("\n\u00b5\r\u00b5\16\u00b5\u07ab\3\u00b6\3\u00b6\3\u00b6")
        buf.write("\3\u00b6\3\u00b6\3\u00b6\3\u00b7\5\u00b7\u07b5\n\u00b7")
        buf.write("\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u07ba\n\u00b7\3\u00b7")
        buf.write("\5\u00b7\u07bd\n\u00b7\3\u00b8\3\u00b8\5\u00b8\u07c1\n")
        buf.write("\u00b8\3\u00b9\3\u00b9\5\u00b9\u07c5\n\u00b9\3\u00ba\3")
        buf.write("\u00ba\3\u00ba\5\u00ba\u07ca\n\u00ba\3\u00ba\3\u00ba\3")
        buf.write("\u00bb\3\u00bb\5\u00bb\u07d0\n\u00bb\3\u00bb\3\u00bb\3")
        buf.write("\u00bb\5\u00bb\u07d5\n\u00bb\7\u00bb\u07d7\n\u00bb\f\u00bb")
        buf.write("\16\u00bb\u07da\13\u00bb\3\u00bc\3\u00bc\3\u00bc\3\u00bc")
        buf.write("\3\u00bc\3\u00bc\5\u00bc\u07e2\n\u00bc\3\u00bd\3\u00bd")
        buf.write("\3\u00bd\5\u00bd\u07e7\n\u00bd\3\u00bd\3\u00bd\3\u00bd")
        buf.write("\5\u00bd\u07ec\n\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd")
        buf.write("\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd")
        buf.write("\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd")
        buf.write("\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd")
        buf.write("\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd")
        buf.write("\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd")
        buf.write("\3\u00bd\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u0819\n\u00bd")
        buf.write("\3\u00be\3\u00be\3\u00be\2\b\f \64\u00e4\u00fa\u00fe\u00bf")
        buf.write("\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62")
        buf.write("\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082")
        buf.write("\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094")
        buf.write("\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6")
        buf.write("\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8")
        buf.write("\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca")
        buf.write("\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc")
        buf.write("\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee")
        buf.write("\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100")
        buf.write("\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112")
        buf.write("\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124")
        buf.write("\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136")
        buf.write("\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148")
        buf.write("\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a")
        buf.write("\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c")
        buf.write("\u016e\u0170\u0172\u0174\u0176\u0178\u017a\2\27\4\2cc")
        buf.write("gg\6\2\32\32!!<<CC\4\2~~\u0083\u0083\3\2z{\4\2]_cf\4\2")
        buf.write("}}\u0084\u0084\3\2_a\3\2]^\4\2hivw\3\2tu\4\2ggjs\7\2&")
        buf.write("&\61\61;;AAHH\5\2$$..RR\4\2\27\27DD\3\2W\\\4\2ccxx\4\2")
        buf.write("\30\30TT\3\2\35\36\4\2((\67\67\3\28:\3\2\3\t\2\u0903\2")
        buf.write("\u017d\3\2\2\2\4\u018d\3\2\2\2\6\u0191\3\2\2\2\b\u019d")
        buf.write("\3\2\2\2\n\u019f\3\2\2\2\f\u01a5\3\2\2\2\16\u01bb\3\2")
        buf.write("\2\2\20\u01c1\3\2\2\2\22\u01cd\3\2\2\2\24\u01cf\3\2\2")
        buf.write("\2\26\u01d1\3\2\2\2\30\u01de\3\2\2\2\32\u01e5\3\2\2\2")
        buf.write("\34\u01e8\3\2\2\2\36\u01ed\3\2\2\2 \u021c\3\2\2\2\"\u023c")
        buf.write("\3\2\2\2$\u023e\3\2\2\2&\u0253\3\2\2\2(\u0270\3\2\2\2")
        buf.write("*\u0272\3\2\2\2,\u0275\3\2\2\2.\u0285\3\2\2\2\60\u0289")
        buf.write("\3\2\2\2\62\u0292\3\2\2\2\64\u0294\3\2\2\2\66\u02ad\3")
        buf.write("\2\2\28\u02b0\3\2\2\2:\u02b9\3\2\2\2<\u02c4\3\2\2\2>\u02c6")
        buf.write("\3\2\2\2@\u02ce\3\2\2\2B\u02d6\3\2\2\2D\u02de\3\2\2\2")
        buf.write("F\u02eb\3\2\2\2H\u02ed\3\2\2\2J\u02f5\3\2\2\2L\u02fd\3")
        buf.write("\2\2\2N\u0305\3\2\2\2P\u030d\3\2\2\2R\u0315\3\2\2\2T\u031d")
        buf.write("\3\2\2\2V\u0325\3\2\2\2X\u0333\3\2\2\2Z\u0335\3\2\2\2")
        buf.write("\\\u0337\3\2\2\2^\u033f\3\2\2\2`\u034e\3\2\2\2b\u0351")
        buf.write("\3\2\2\2d\u035d\3\2\2\2f\u0361\3\2\2\2h\u0368\3\2\2\2")
        buf.write("j\u037b\3\2\2\2l\u0388\3\2\2\2n\u03ab\3\2\2\2p\u03af\3")
        buf.write("\2\2\2r\u03b2\3\2\2\2t\u03b9\3\2\2\2v\u03c4\3\2\2\2x\u03c8")
        buf.write("\3\2\2\2z\u03cb\3\2\2\2|\u03d8\3\2\2\2~\u03e2\3\2\2\2")
        buf.write("\u0080\u03e4\3\2\2\2\u0082\u03fb\3\2\2\2\u0084\u03fd\3")
        buf.write("\2\2\2\u0086\u0405\3\2\2\2\u0088\u0407\3\2\2\2\u008a\u0410")
        buf.write("\3\2\2\2\u008c\u0413\3\2\2\2\u008e\u041a\3\2\2\2\u0090")
        buf.write("\u041c\3\2\2\2\u0092\u041e\3\2\2\2\u0094\u0423\3\2\2\2")
        buf.write("\u0096\u0429\3\2\2\2\u0098\u042c\3\2\2\2\u009a\u0434\3")
        buf.write("\2\2\2\u009c\u0452\3\2\2\2\u009e\u0458\3\2\2\2\u00a0\u045a")
        buf.write("\3\2\2\2\u00a2\u0478\3\2\2\2\u00a4\u047a\3\2\2\2\u00a6")
        buf.write("\u047c\3\2\2\2\u00a8\u0486\3\2\2\2\u00aa\u0493\3\2\2\2")
        buf.write("\u00ac\u049d\3\2\2\2\u00ae\u04a1\3\2\2\2\u00b0\u04a4\3")
        buf.write("\2\2\2\u00b2\u04ac\3\2\2\2\u00b4\u04b1\3\2\2\2\u00b6\u04b5")
        buf.write("\3\2\2\2\u00b8\u04b7\3\2\2\2\u00ba\u04ba\3\2\2\2\u00bc")
        buf.write("\u04c7\3\2\2\2\u00be\u04c9\3\2\2\2\u00c0\u04d0\3\2\2\2")
        buf.write("\u00c2\u04d4\3\2\2\2\u00c4\u04e0\3\2\2\2\u00c6\u04ea\3")
        buf.write("\2\2\2\u00c8\u04f0\3\2\2\2\u00ca\u04fb\3\2\2\2\u00cc\u0507")
        buf.write("\3\2\2\2\u00ce\u0509\3\2\2\2\u00d0\u0514\3\2\2\2\u00d2")
        buf.write("\u0522\3\2\2\2\u00d4\u0528\3\2\2\2\u00d6\u052a\3\2\2\2")
        buf.write("\u00d8\u0531\3\2\2\2\u00da\u0546\3\2\2\2\u00dc\u0548\3")
        buf.write("\2\2\2\u00de\u0550\3\2\2\2\u00e0\u0559\3\2\2\2\u00e2\u0561")
        buf.write("\3\2\2\2\u00e4\u056f\3\2\2\2\u00e6\u0582\3\2\2\2\u00e8")
        buf.write("\u0593\3\2\2\2\u00ea\u05a6\3\2\2\2\u00ec\u05a9\3\2\2\2")
        buf.write("\u00ee\u05ad\3\2\2\2\u00f0\u05af\3\2\2\2\u00f2\u05b2\3")
        buf.write("\2\2\2\u00f4\u05b6\3\2\2\2\u00f6\u05c2\3\2\2\2\u00f8\u05cd")
        buf.write("\3\2\2\2\u00fa\u05dd\3\2\2\2\u00fc\u05f4\3\2\2\2\u00fe")
        buf.write("\u05f9\3\2\2\2\u0100\u060d\3\2\2\2\u0102\u0614\3\2\2\2")
        buf.write("\u0104\u061d\3\2\2\2\u0106\u062b\3\2\2\2\u0108\u063e\3")
        buf.write("\2\2\2\u010a\u0645\3\2\2\2\u010c\u064a\3\2\2\2\u010e\u064e")
        buf.write("\3\2\2\2\u0110\u0650\3\2\2\2\u0112\u065e\3\2\2\2\u0114")
        buf.write("\u0669\3\2\2\2\u0116\u066b\3\2\2\2\u0118\u0689\3\2\2\2")
        buf.write("\u011a\u068c\3\2\2\2\u011c\u0690\3\2\2\2\u011e\u0692\3")
        buf.write("\2\2\2\u0120\u0698\3\2\2\2\u0122\u06ac\3\2\2\2\u0124\u06ae")
        buf.write("\3\2\2\2\u0126\u06ca\3\2\2\2\u0128\u06cd\3\2\2\2\u012a")
        buf.write("\u06d1\3\2\2\2\u012c\u06d3\3\2\2\2\u012e\u06d7\3\2\2\2")
        buf.write("\u0130\u06da\3\2\2\2\u0132\u06e9\3\2\2\2\u0134\u06fe\3")
        buf.write("\2\2\2\u0136\u0700\3\2\2\2\u0138\u0702\3\2\2\2\u013a\u0704")
        buf.write("\3\2\2\2\u013c\u0707\3\2\2\2\u013e\u070b\3\2\2\2\u0140")
        buf.write("\u070f\3\2\2\2\u0142\u0712\3\2\2\2\u0144\u0720\3\2\2\2")
        buf.write("\u0146\u072b\3\2\2\2\u0148\u072d\3\2\2\2\u014a\u0730\3")
        buf.write("\2\2\2\u014c\u0736\3\2\2\2\u014e\u073c\3\2\2\2\u0150\u0746")
        buf.write("\3\2\2\2\u0152\u0751\3\2\2\2\u0154\u0760\3\2\2\2\u0156")
        buf.write("\u0772\3\2\2\2\u0158\u0774\3\2\2\2\u015a\u0776\3\2\2\2")
        buf.write("\u015c\u0787\3\2\2\2\u015e\u0789\3\2\2\2\u0160\u0793\3")
        buf.write("\2\2\2\u0162\u0798\3\2\2\2\u0164\u079d\3\2\2\2\u0166\u07a1")
        buf.write("\3\2\2\2\u0168\u07a9\3\2\2\2\u016a\u07ad\3\2\2\2\u016c")
        buf.write("\u07bc\3\2\2\2\u016e\u07be\3\2\2\2\u0170\u07c4\3\2\2\2")
        buf.write("\u0172\u07c6\3\2\2\2\u0174\u07cd\3\2\2\2\u0176\u07e1\3")
        buf.write("\2\2\2\u0178\u0818\3\2\2\2\u017a\u081a\3\2\2\2\u017c\u017e")
        buf.write("\5z>\2\u017d\u017c\3\2\2\2\u017d\u017e\3\2\2\2\u017e\u017f")
        buf.write("\3\2\2\2\u017f\u0180\7\2\2\3\u0180\3\3\2\2\2\u0181\u0183")
        buf.write("\5\u017a\u00be\2\u0182\u0181\3\2\2\2\u0183\u0184\3\2\2")
        buf.write("\2\u0184\u0182\3\2\2\2\u0184\u0185\3\2\2\2\u0185\u018e")
        buf.write("\3\2\2\2\u0186\u018e\7G\2\2\u0187\u0188\7W\2\2\u0188\u0189")
        buf.write("\5\\/\2\u0189\u018a\7X\2\2\u018a\u018e\3\2\2\2\u018b\u018e")
        buf.write("\5\6\4\2\u018c\u018e\5\16\b\2\u018d\u0182\3\2\2\2\u018d")
        buf.write("\u0186\3\2\2\2\u018d\u0187\3\2\2\2\u018d\u018b\3\2\2\2")
        buf.write("\u018d\u018c\3\2\2\2\u018e\5\3\2\2\2\u018f\u0192\5\b\5")
        buf.write("\2\u0190\u0192\5\n\6\2\u0191\u018f\3\2\2\2\u0191\u0190")
        buf.write("\3\2\2\2\u0192\7\3\2\2\2\u0193\u019e\7\u0086\2\2\u0194")
        buf.write("\u019e\5\u0148\u00a5\2\u0195\u019e\5\u013a\u009e\2\u0196")
        buf.write("\u019e\5\u014a\u00a6\2\u0197\u019a\7e\2\2\u0198\u019b")
        buf.write("\5\u0114\u008b\2\u0199\u019b\5\u00a0Q\2\u019a\u0198\3")
        buf.write("\2\2\2\u019a\u0199\3\2\2\2\u019b\u019e\3\2\2\2\u019c\u019e")
        buf.write("\5\u0156\u00ac\2\u019d\u0193\3\2\2\2\u019d\u0194\3\2\2")
        buf.write("\2\u019d\u0195\3\2\2\2\u019d\u0196\3\2\2\2\u019d\u0197")
        buf.write("\3\2\2\2\u019d\u019c\3\2\2\2\u019e\t\3\2\2\2\u019f\u01a1")
        buf.write("\5\f\7\2\u01a0\u01a2\7F\2\2\u01a1\u01a0\3\2\2\2\u01a1")
        buf.write("\u01a2\3\2\2\2\u01a2\u01a3\3\2\2\2\u01a3\u01a4\5\b\5\2")
        buf.write("\u01a4\13\3\2\2\2\u01a5\u01a9\b\7\1\2\u01a6\u01aa\5\u009e")
        buf.write("P\2\u01a7\u01aa\5\u00b6\\\2\u01a8\u01aa\5\u00a0Q\2\u01a9")
        buf.write("\u01a6\3\2\2\2\u01a9\u01a7\3\2\2\2\u01a9\u01a8\3\2\2\2")
        buf.write("\u01a9\u01aa\3\2\2\2\u01aa\u01ab\3\2\2\2\u01ab\u01ac\7")
        buf.write("\u0081\2\2\u01ac\u01b8\3\2\2\2\u01ad\u01b3\f\3\2\2\u01ae")
        buf.write("\u01b4\7\u0086\2\2\u01af\u01b1\7F\2\2\u01b0\u01af\3\2")
        buf.write("\2\2\u01b0\u01b1\3\2\2\2\u01b1\u01b2\3\2\2\2\u01b2\u01b4")
        buf.write("\5\u0154\u00ab\2\u01b3\u01ae\3\2\2\2\u01b3\u01b0\3\2\2")
        buf.write("\2\u01b4\u01b5\3\2\2\2\u01b5\u01b7\7\u0081\2\2\u01b6\u01ad")
        buf.write("\3\2\2\2\u01b7\u01ba\3\2\2\2\u01b8\u01b6\3\2\2\2\u01b8")
        buf.write("\u01b9\3\2\2\2\u01b9\r\3\2\2\2\u01ba\u01b8\3\2\2\2\u01bb")
        buf.write("\u01bd\5\20\t\2\u01bc\u01be\5\36\20\2\u01bd\u01bc\3\2")
        buf.write("\2\2\u01bd\u01be\3\2\2\2\u01be\u01bf\3\2\2\2\u01bf\u01c0")
        buf.write("\5f\64\2\u01c0\17\3\2\2\2\u01c1\u01c3\7Y\2\2\u01c2\u01c4")
        buf.write("\5\22\n\2\u01c3\u01c2\3\2\2\2\u01c3\u01c4\3\2\2\2\u01c4")
        buf.write("\u01c5\3\2\2\2\u01c5\u01c6\7Z\2\2\u01c6\21\3\2\2\2\u01c7")
        buf.write("\u01ce\5\26\f\2\u01c8\u01cb\5\24\13\2\u01c9\u01ca\7|\2")
        buf.write("\2\u01ca\u01cc\5\26\f\2\u01cb\u01c9\3\2\2\2\u01cb\u01cc")
        buf.write("\3\2\2\2\u01cc\u01ce\3\2\2\2\u01cd\u01c7\3\2\2\2\u01cd")
        buf.write("\u01c8\3\2\2\2\u01ce\23\3\2\2\2\u01cf\u01d0\t\2\2\2\u01d0")
        buf.write("\25\3\2\2\2\u01d1\u01d6\5\30\r\2\u01d2\u01d3\7|\2\2\u01d3")
        buf.write("\u01d5\5\30\r\2\u01d4\u01d2\3\2\2\2\u01d5\u01d8\3\2\2")
        buf.write("\2\u01d6\u01d4\3\2\2\2\u01d6\u01d7\3\2\2\2\u01d7\u01da")
        buf.write("\3\2\2\2\u01d8\u01d6\3\2\2\2\u01d9\u01db\7\u0085\2\2\u01da")
        buf.write("\u01d9\3\2\2\2\u01da\u01db\3\2\2\2\u01db\27\3\2\2\2\u01dc")
        buf.write("\u01df\5\32\16\2\u01dd\u01df\5\34\17\2\u01de\u01dc\3\2")
        buf.write("\2\2\u01de\u01dd\3\2\2\2\u01df\31\3\2\2\2\u01e0\u01e2")
        buf.write("\7c\2\2\u01e1\u01e0\3\2\2\2\u01e1\u01e2\3\2\2\2\u01e2")
        buf.write("\u01e3\3\2\2\2\u01e3\u01e6\7\u0086\2\2\u01e4\u01e6\7G")
        buf.write("\2\2\u01e5\u01e1\3\2\2\2\u01e5\u01e4\3\2\2\2\u01e6\33")
        buf.write("\3\2\2\2\u01e7\u01e9\7c\2\2\u01e8\u01e7\3\2\2\2\u01e8")
        buf.write("\u01e9\3\2\2\2\u01e9\u01ea\3\2\2\2\u01ea\u01eb\7\u0086")
        buf.write("\2\2\u01eb\u01ec\5\u010a\u0086\2\u01ec\35\3\2\2\2\u01ed")
        buf.write("\u01ef\7W\2\2\u01ee\u01f0\5\u0100\u0081\2\u01ef\u01ee")
        buf.write("\3\2\2\2\u01ef\u01f0\3\2\2\2\u01f0\u01f1\3\2\2\2\u01f1")
        buf.write("\u01f3\7X\2\2\u01f2\u01f4\7\61\2\2\u01f3\u01f2\3\2\2\2")
        buf.write("\u01f3\u01f4\3\2\2\2\u01f4\u01f6\3\2\2\2\u01f5\u01f7\5")
        buf.write("\u0170\u00b9\2\u01f6\u01f5\3\2\2\2\u01f6\u01f7\3\2\2\2")
        buf.write("\u01f7\u01f9\3\2\2\2\u01f8\u01fa\5\u00caf\2\u01f9\u01f8")
        buf.write("\3\2\2\2\u01f9\u01fa\3\2\2\2\u01fa\u01fc\3\2\2\2\u01fb")
        buf.write("\u01fd\5\u00e8u\2\u01fc\u01fb\3\2\2\2\u01fc\u01fd\3\2")
        buf.write("\2\2\u01fd\37\3\2\2\2\u01fe\u01ff\b\21\1\2\u01ff\u021d")
        buf.write("\5\4\3\2\u0200\u0203\5\u009cO\2\u0201\u0203\5\u015e\u00b0")
        buf.write("\2\u0202\u0200\3\2\2\2\u0202\u0201\3\2\2\2\u0203\u020a")
        buf.write("\3\2\2\2\u0204\u0206\7W\2\2\u0205\u0207\5$\23\2\u0206")
        buf.write("\u0205\3\2\2\2\u0206\u0207\3\2\2\2\u0207\u0208\3\2\2\2")
        buf.write("\u0208\u020b\7X\2\2\u0209\u020b\5\u0112\u008a\2\u020a")
        buf.write("\u0204\3\2\2\2\u020a\u0209\3\2\2\2\u020b\u021d\3\2\2\2")
        buf.write("\u020c\u020d\t\3\2\2\u020d\u020e\7h\2\2\u020e\u020f\5")
        buf.write("\u00f4{\2\u020f\u0210\7i\2\2\u0210\u0211\7W\2\2\u0211")
        buf.write("\u0212\5\\/\2\u0212\u0213\7X\2\2\u0213\u021d\3\2\2\2\u0214")
        buf.write("\u0215\5\"\22\2\u0215\u0218\7W\2\2\u0216\u0219\5\\/\2")
        buf.write("\u0217\u0219\5\u00f4{\2\u0218\u0216\3\2\2\2\u0218\u0217")
        buf.write("\3\2\2\2\u0219\u021a\3\2\2\2\u021a\u021b\7X\2\2\u021b")
        buf.write("\u021d\3\2\2\2\u021c\u01fe\3\2\2\2\u021c\u0202\3\2\2\2")
        buf.write("\u021c\u020c\3\2\2\2\u021c\u0214\3\2\2\2\u021d\u0239\3")
        buf.write("\2\2\2\u021e\u021f\f\t\2\2\u021f\u0222\7Y\2\2\u0220\u0223")
        buf.write("\5\\/\2\u0221\u0223\5\u0112\u008a\2\u0222\u0220\3\2\2")
        buf.write("\2\u0222\u0221\3\2\2\2\u0223\u0224\3\2\2\2\u0224\u0225")
        buf.write("\7Z\2\2\u0225\u0238\3\2\2\2\u0226\u0227\f\b\2\2\u0227")
        buf.write("\u0229\7W\2\2\u0228\u022a\5$\23\2\u0229\u0228\3\2\2\2")
        buf.write("\u0229\u022a\3\2\2\2\u022a\u022b\3\2\2\2\u022b\u0238\7")
        buf.write("X\2\2\u022c\u022d\f\6\2\2\u022d\u0233\t\4\2\2\u022e\u0230")
        buf.write("\7F\2\2\u022f\u022e\3\2\2\2\u022f\u0230\3\2\2\2\u0230")
        buf.write("\u0231\3\2\2\2\u0231\u0234\5\6\4\2\u0232\u0234\5&\24\2")
        buf.write("\u0233\u022f\3\2\2\2\u0233\u0232\3\2\2\2\u0234\u0238\3")
        buf.write("\2\2\2\u0235\u0236\f\5\2\2\u0236\u0238\t\5\2\2\u0237\u021e")
        buf.write("\3\2\2\2\u0237\u0226\3\2\2\2\u0237\u022c\3\2\2\2\u0237")
        buf.write("\u0235\3\2\2\2\u0238\u023b\3\2\2\2\u0239\u0237\3\2\2\2")
        buf.write("\u0239\u023a\3\2\2\2\u023a!\3\2\2\2\u023b\u0239\3\2\2")
        buf.write("\2\u023c\u023d\7M\2\2\u023d#\3\2\2\2\u023e\u023f\5\u0110")
        buf.write("\u0089\2\u023f%\3\2\2\2\u0240\u0242\5\f\7\2\u0241\u0240")
        buf.write("\3\2\2\2\u0241\u0242\3\2\2\2\u0242\u0246\3\2\2\2\u0243")
        buf.write("\u0244\5\u009eP\2\u0244\u0245\7\u0081\2\2\u0245\u0247")
        buf.write("\3\2\2\2\u0246\u0243\3\2\2\2\u0246\u0247\3\2\2\2\u0247")
        buf.write("\u0248\3\2\2\2\u0248\u0249\7e\2\2\u0249\u0254\5\u009e")
        buf.write("P\2\u024a\u024b\5\f\7\2\u024b\u024c\7F\2\2\u024c\u024d")
        buf.write("\5\u0154\u00ab\2\u024d\u024e\7\u0081\2\2\u024e\u024f\7")
        buf.write("e\2\2\u024f\u0250\5\u009eP\2\u0250\u0254\3\2\2\2\u0251")
        buf.write("\u0252\7e\2\2\u0252\u0254\5\u00a0Q\2\u0253\u0241\3\2\2")
        buf.write("\2\u0253\u024a\3\2\2\2\u0253\u0251\3\2\2\2\u0254\'\3\2")
        buf.write("\2\2\u0255\u0271\5 \21\2\u0256\u025b\7z\2\2\u0257\u025b")
        buf.write("\7{\2\2\u0258\u025b\5*\26\2\u0259\u025b\7@\2\2\u025a\u0256")
        buf.write("\3\2\2\2\u025a\u0257\3\2\2\2\u025a\u0258\3\2\2\2\u025a")
        buf.write("\u0259\3\2\2\2\u025b\u025c\3\2\2\2\u025c\u0271\5(\25\2")
        buf.write("\u025d\u0266\7@\2\2\u025e\u025f\7W\2\2\u025f\u0260\5\u00f4")
        buf.write("{\2\u0260\u0261\7X\2\2\u0261\u0267\3\2\2\2\u0262\u0263")
        buf.write("\7\u0085\2\2\u0263\u0264\7W\2\2\u0264\u0265\7\u0086\2")
        buf.write("\2\u0265\u0267\7X\2\2\u0266\u025e\3\2\2\2\u0266\u0262")
        buf.write("\3\2\2\2\u0267\u0271\3\2\2\2\u0268\u0269\7\r\2\2\u0269")
        buf.write("\u026a\7W\2\2\u026a\u026b\5\u00f4{\2\u026b\u026c\7X\2")
        buf.write("\2\u026c\u0271\3\2\2\2\u026d\u0271\5:\36\2\u026e\u0271")
        buf.write("\5,\27\2\u026f\u0271\58\35\2\u0270\u0255\3\2\2\2\u0270")
        buf.write("\u025a\3\2\2\2\u0270\u025d\3\2\2\2\u0270\u0268\3\2\2\2")
        buf.write("\u0270\u026d\3\2\2\2\u0270\u026e\3\2\2\2\u0270\u026f\3")
        buf.write("\2\2\2\u0271)\3\2\2\2\u0272\u0273\t\6\2\2\u0273+\3\2\2")
        buf.write("\2\u0274\u0276\7\u0081\2\2\u0275\u0274\3\2\2\2\u0275\u0276")
        buf.write("\3\2\2\2\u0276\u0277\3\2\2\2\u0277\u0279\7\63\2\2\u0278")
        buf.write("\u027a\5.\30\2\u0279\u0278\3\2\2\2\u0279\u027a\3\2\2\2")
        buf.write("\u027a\u0280\3\2\2\2\u027b\u0281\5\60\31\2\u027c\u027d")
        buf.write("\7W\2\2\u027d\u027e\5\u00f4{\2\u027e\u027f\7X\2\2\u027f")
        buf.write("\u0281\3\2\2\2\u0280\u027b\3\2\2\2\u0280\u027c\3\2\2\2")
        buf.write("\u0281\u0283\3\2\2\2\u0282\u0284\5\66\34\2\u0283\u0282")
        buf.write("\3\2\2\2\u0283\u0284\3\2\2\2\u0284-\3\2\2\2\u0285\u0286")
        buf.write("\7W\2\2\u0286\u0287\5$\23\2\u0287\u0288\7X\2\2\u0288/")
        buf.write("\3\2\2\2\u0289\u028b\5\u0098M\2\u028a\u028c\5\62\32\2")
        buf.write("\u028b\u028a\3\2\2\2\u028b\u028c\3\2\2\2\u028c\61\3\2")
        buf.write("\2\2\u028d\u028f\5\u00eav\2\u028e\u0290\5\62\32\2\u028f")
        buf.write("\u028e\3\2\2\2\u028f\u0290\3\2\2\2\u0290\u0293\3\2\2\2")
        buf.write("\u0291\u0293\5\64\33\2\u0292\u028d\3\2\2\2\u0292\u0291")
        buf.write("\3\2\2\2\u0293\63\3\2\2\2\u0294\u0295\b\33\1\2\u0295\u0296")
        buf.write("\7Y\2\2\u0296\u0297\5\\/\2\u0297\u0299\7Z\2\2\u0298\u029a")
        buf.write("\5\u00caf\2\u0299\u0298\3\2\2\2\u0299\u029a\3\2\2\2\u029a")
        buf.write("\u02a4\3\2\2\2\u029b\u029c\f\3\2\2\u029c\u029d\7Y\2\2")
        buf.write("\u029d\u029e\5^\60\2\u029e\u02a0\7Z\2\2\u029f\u02a1\5")
        buf.write("\u00caf\2\u02a0\u029f\3\2\2\2\u02a0\u02a1\3\2\2\2\u02a1")
        buf.write("\u02a3\3\2\2\2\u02a2\u029b\3\2\2\2\u02a3\u02a6\3\2\2\2")
        buf.write("\u02a4\u02a2\3\2\2\2\u02a4\u02a5\3\2\2\2\u02a5\65\3\2")
        buf.write("\2\2\u02a6\u02a4\3\2\2\2\u02a7\u02a9\7W\2\2\u02a8\u02aa")
        buf.write("\5$\23\2\u02a9\u02a8\3\2\2\2\u02a9\u02aa\3\2\2\2\u02aa")
        buf.write("\u02ab\3\2\2\2\u02ab\u02ae\7X\2\2\u02ac\u02ae\5\u0112")
        buf.write("\u008a\2\u02ad\u02a7\3\2\2\2\u02ad\u02ac\3\2\2\2\u02ae")
        buf.write("\67\3\2\2\2\u02af\u02b1\7\u0081\2\2\u02b0\u02af\3\2\2")
        buf.write("\2\u02b0\u02b1\3\2\2\2\u02b1\u02b2\3\2\2\2\u02b2\u02b5")
        buf.write("\7\36\2\2\u02b3\u02b4\7Y\2\2\u02b4\u02b6\7Z\2\2\u02b5")
        buf.write("\u02b3\3\2\2\2\u02b5\u02b6\3\2\2\2\u02b6\u02b7\3\2\2\2")
        buf.write("\u02b7\u02b8\5<\37\2\u02b89\3\2\2\2\u02b9\u02ba\7\64\2")
        buf.write("\2\u02ba\u02bb\7W\2\2\u02bb\u02bc\5\\/\2\u02bc\u02bd\7")
        buf.write("X\2\2\u02bd;\3\2\2\2\u02be\u02c5\5(\25\2\u02bf\u02c0\7")
        buf.write("W\2\2\u02c0\u02c1\5\u00f4{\2\u02c1\u02c2\7X\2\2\u02c2")
        buf.write("\u02c3\5<\37\2\u02c3\u02c5\3\2\2\2\u02c4\u02be\3\2\2\2")
        buf.write("\u02c4\u02bf\3\2\2\2\u02c5=\3\2\2\2\u02c6\u02cb\5<\37")
        buf.write("\2\u02c7\u02c8\t\7\2\2\u02c8\u02ca\5<\37\2\u02c9\u02c7")
        buf.write("\3\2\2\2\u02ca\u02cd\3\2\2\2\u02cb\u02c9\3\2\2\2\u02cb")
        buf.write("\u02cc\3\2\2\2\u02cc?\3\2\2\2\u02cd\u02cb\3\2\2\2\u02ce")
        buf.write("\u02d3\5> \2\u02cf\u02d0\t\b\2\2\u02d0\u02d2\5> \2\u02d1")
        buf.write("\u02cf\3\2\2\2\u02d2\u02d5\3\2\2\2\u02d3\u02d1\3\2\2\2")
        buf.write("\u02d3\u02d4\3\2\2\2\u02d4A\3\2\2\2\u02d5\u02d3\3\2\2")
        buf.write("\2\u02d6\u02db\5@!\2\u02d7\u02d8\t\t\2\2\u02d8\u02da\5")
        buf.write("@!\2\u02d9\u02d7\3\2\2\2\u02da\u02dd\3\2\2\2\u02db\u02d9")
        buf.write("\3\2\2\2\u02db\u02dc\3\2\2\2\u02dcC\3\2\2\2\u02dd\u02db")
        buf.write("\3\2\2\2\u02de\u02e4\5B\"\2\u02df\u02e0\5F$\2\u02e0\u02e1")
        buf.write("\5B\"\2\u02e1\u02e3\3\2\2\2\u02e2\u02df\3\2\2\2\u02e3")
        buf.write("\u02e6\3\2\2\2\u02e4\u02e2\3\2\2\2\u02e4\u02e5\3\2\2\2")
        buf.write("\u02e5E\3\2\2\2\u02e6\u02e4\3\2\2\2\u02e7\u02e8\7i\2\2")
        buf.write("\u02e8\u02ec\7i\2\2\u02e9\u02ea\7h\2\2\u02ea\u02ec\7h")
        buf.write("\2\2\u02eb\u02e7\3\2\2\2\u02eb\u02e9\3\2\2\2\u02ecG\3")
        buf.write("\2\2\2\u02ed\u02f2\5D#\2\u02ee\u02ef\t\n\2\2\u02ef\u02f1")
        buf.write("\5D#\2\u02f0\u02ee\3\2\2\2\u02f1\u02f4\3\2\2\2\u02f2\u02f0")
        buf.write("\3\2\2\2\u02f2\u02f3\3\2\2\2\u02f3I\3\2\2\2\u02f4\u02f2")
        buf.write("\3\2\2\2\u02f5\u02fa\5H%\2\u02f6\u02f7\t\13\2\2\u02f7")
        buf.write("\u02f9\5H%\2\u02f8\u02f6\3\2\2\2\u02f9\u02fc\3\2\2\2\u02fa")
        buf.write("\u02f8\3\2\2\2\u02fa\u02fb\3\2\2\2\u02fbK\3\2\2\2\u02fc")
        buf.write("\u02fa\3\2\2\2\u02fd\u0302\5J&\2\u02fe\u02ff\7c\2\2\u02ff")
        buf.write("\u0301\5J&\2\u0300\u02fe\3\2\2\2\u0301\u0304\3\2\2\2\u0302")
        buf.write("\u0300\3\2\2\2\u0302\u0303\3\2\2\2\u0303M\3\2\2\2\u0304")
        buf.write("\u0302\3\2\2\2\u0305\u030a\5L\'\2\u0306\u0307\7b\2\2\u0307")
        buf.write("\u0309\5L\'\2\u0308\u0306\3\2\2\2\u0309\u030c\3\2\2\2")
        buf.write("\u030a\u0308\3\2\2\2\u030a\u030b\3\2\2\2\u030bO\3\2\2")
        buf.write("\2\u030c\u030a\3\2\2\2\u030d\u0312\5N(\2\u030e\u030f\7")
        buf.write("d\2\2\u030f\u0311\5N(\2\u0310\u030e\3\2\2\2\u0311\u0314")
        buf.write("\3\2\2\2\u0312\u0310\3\2\2\2\u0312\u0313\3\2\2\2\u0313")
        buf.write("Q\3\2\2\2\u0314\u0312\3\2\2\2\u0315\u031a\5P)\2\u0316")
        buf.write("\u0317\7x\2\2\u0317\u0319\5P)\2\u0318\u0316\3\2\2\2\u0319")
        buf.write("\u031c\3\2\2\2\u031a\u0318\3\2\2\2\u031a\u031b\3\2\2\2")
        buf.write("\u031bS\3\2\2\2\u031c\u031a\3\2\2\2\u031d\u0322\5R*\2")
        buf.write("\u031e\u031f\7y\2\2\u031f\u0321\5R*\2\u0320\u031e\3\2")
        buf.write("\2\2\u0321\u0324\3\2\2\2\u0322\u0320\3\2\2\2\u0322\u0323")
        buf.write("\3\2\2\2\u0323U\3\2\2\2\u0324\u0322\3\2\2\2\u0325\u032b")
        buf.write("\5T+\2\u0326\u0327\7\177\2\2\u0327\u0328\5\\/\2\u0328")
        buf.write("\u0329\7\u0080\2\2\u0329\u032a\5X-\2\u032a\u032c\3\2\2")
        buf.write("\2\u032b\u0326\3\2\2\2\u032b\u032c\3\2\2\2\u032cW\3\2")
        buf.write("\2\2\u032d\u0334\5V,\2\u032e\u032f\5T+\2\u032f\u0330\5")
        buf.write("Z.\2\u0330\u0331\5\u010e\u0088\2\u0331\u0334\3\2\2\2\u0332")
        buf.write("\u0334\5\u016e\u00b8\2\u0333\u032d\3\2\2\2\u0333\u032e")
        buf.write("\3\2\2\2\u0333\u0332\3\2\2\2\u0334Y\3\2\2\2\u0335\u0336")
        buf.write("\t\f\2\2\u0336[\3\2\2\2\u0337\u033c\5X-\2\u0338\u0339")
        buf.write("\7|\2\2\u0339\u033b\5X-\2\u033a\u0338\3\2\2\2\u033b\u033e")
        buf.write("\3\2\2\2\u033c\u033a\3\2\2\2\u033c\u033d\3\2\2\2\u033d")
        buf.write("]\3\2\2\2\u033e\u033c\3\2\2\2\u033f\u0340\5V,\2\u0340")
        buf.write("_\3\2\2\2\u0341\u034f\5b\62\2\u0342\u0344\5\u00caf\2\u0343")
        buf.write("\u0342\3\2\2\2\u0343\u0344\3\2\2\2\u0344\u034b\3\2\2\2")
        buf.write("\u0345\u034c\5d\63\2\u0346\u034c\5f\64\2\u0347\u034c\5")
        buf.write("j\66\2\u0348\u034c\5n8\2\u0349\u034c\5v<\2\u034a\u034c")
        buf.write("\5\u0164\u00b3\2\u034b\u0345\3\2\2\2\u034b\u0346\3\2\2")
        buf.write("\2\u034b\u0347\3\2\2\2\u034b\u0348\3\2\2\2\u034b\u0349")
        buf.write("\3\2\2\2\u034b\u034a\3\2\2\2\u034c\u034f\3\2\2\2\u034d")
        buf.write("\u034f\5x=\2\u034e\u0341\3\2\2\2\u034e\u0343\3\2\2\2\u034e")
        buf.write("\u034d\3\2\2\2\u034fa\3\2\2\2\u0350\u0352\5\u00caf\2\u0351")
        buf.write("\u0350\3\2\2\2\u0351\u0352\3\2\2\2\u0352\u0357\3\2\2\2")
        buf.write("\u0353\u0358\7\u0086\2\2\u0354\u0355\7\22\2\2\u0355\u0358")
        buf.write("\5^\60\2\u0356\u0358\7\35\2\2\u0357\u0353\3\2\2\2\u0357")
        buf.write("\u0354\3\2\2\2\u0357\u0356\3\2\2\2\u0358\u0359\3\2\2\2")
        buf.write("\u0359\u035a\7\u0080\2\2\u035a\u035b\5`\61\2\u035bc\3")
        buf.write("\2\2\2\u035c\u035e\5\\/\2\u035d\u035c\3\2\2\2\u035d\u035e")
        buf.write("\3\2\2\2\u035e\u035f\3\2\2\2\u035f\u0360\7\u0082\2\2\u0360")
        buf.write("e\3\2\2\2\u0361\u0363\7[\2\2\u0362\u0364\5h\65\2\u0363")
        buf.write("\u0362\3\2\2\2\u0363\u0364\3\2\2\2\u0364\u0365\3\2\2\2")
        buf.write("\u0365\u0366\7\\\2\2\u0366g\3\2\2\2\u0367\u0369\5`\61")
        buf.write("\2\u0368\u0367\3\2\2\2\u0369\u036a\3\2\2\2\u036a\u0368")
        buf.write("\3\2\2\2\u036a\u036b\3\2\2\2\u036bi\3\2\2\2\u036c\u036d")
        buf.write("\7-\2\2\u036d\u036e\7W\2\2\u036e\u036f\5l\67\2\u036f\u0370")
        buf.write("\7X\2\2\u0370\u0373\5`\61\2\u0371\u0372\7\"\2\2\u0372")
        buf.write("\u0374\5`\61\2\u0373\u0371\3\2\2\2\u0373\u0374\3\2\2\2")
        buf.write("\u0374\u037c\3\2\2\2\u0375\u0376\7E\2\2\u0376\u0377\7")
        buf.write("W\2\2\u0377\u0378\5l\67\2\u0378\u0379\7X\2\2\u0379\u037a")
        buf.write("\5`\61\2\u037a\u037c\3\2\2\2\u037b\u036c\3\2\2\2\u037b")
        buf.write("\u0375\3\2\2\2\u037ck\3\2\2\2\u037d\u0389\5\\/\2\u037e")
        buf.write("\u0380\5\u00caf\2\u037f\u037e\3\2\2\2\u037f\u0380\3\2")
        buf.write("\2\2\u0380\u0381\3\2\2\2\u0381\u0382\5\u008cG\2\u0382")
        buf.write("\u0386\5\u00e0q\2\u0383\u0384\7g\2\2\u0384\u0387\5\u010e")
        buf.write("\u0088\2\u0385\u0387\5\u0112\u008a\2\u0386\u0383\3\2\2")
        buf.write("\2\u0386\u0385\3\2\2\2\u0387\u0389\3\2\2\2\u0388\u037d")
        buf.write("\3\2\2\2\u0388\u037f\3\2\2\2\u0389m\3\2\2\2\u038a\u038b")
        buf.write("\7V\2\2\u038b\u038c\7W\2\2\u038c\u038d\5l\67\2\u038d\u038e")
        buf.write("\7X\2\2\u038e\u038f\5`\61\2\u038f\u03ac\3\2\2\2\u0390")
        buf.write("\u0391\7\37\2\2\u0391\u0392\5`\61\2\u0392\u0393\7V\2\2")
        buf.write("\u0393\u0394\7W\2\2\u0394\u0395\5\\/\2\u0395\u0396\7X")
        buf.write("\2\2\u0396\u0397\7\u0082\2\2\u0397\u03ac\3\2\2\2\u0398")
        buf.write("\u0399\7*\2\2\u0399\u03a6\7W\2\2\u039a\u039c\5p9\2\u039b")
        buf.write("\u039d\5l\67\2\u039c\u039b\3\2\2\2\u039c\u039d\3\2\2\2")
        buf.write("\u039d\u039e\3\2\2\2\u039e\u03a0\7\u0082\2\2\u039f\u03a1")
        buf.write("\5\\/\2\u03a0\u039f\3\2\2\2\u03a0\u03a1\3\2\2\2\u03a1")
        buf.write("\u03a7\3\2\2\2\u03a2\u03a3\5r:\2\u03a3\u03a4\7\u0080\2")
        buf.write("\2\u03a4\u03a5\5t;\2\u03a5\u03a7\3\2\2\2\u03a6\u039a\3")
        buf.write("\2\2\2\u03a6\u03a2\3\2\2\2\u03a7\u03a8\3\2\2\2\u03a8\u03a9")
        buf.write("\7X\2\2\u03a9\u03aa\5`\61\2\u03aa\u03ac\3\2\2\2\u03ab")
        buf.write("\u038a\3\2\2\2\u03ab\u0390\3\2\2\2\u03ab\u0398\3\2\2\2")
        buf.write("\u03aco\3\2\2\2\u03ad\u03b0\5d\63\2\u03ae\u03b0\5\u0082")
        buf.write("B\2\u03af\u03ad\3\2\2\2\u03af\u03ae\3\2\2\2\u03b0q\3\2")
        buf.write("\2\2\u03b1\u03b3\5\u00caf\2\u03b2\u03b1\3\2\2\2\u03b2")
        buf.write("\u03b3\3\2\2\2\u03b3\u03b4\3\2\2\2\u03b4\u03b5\5\u008c")
        buf.write("G\2\u03b5\u03b6\5\u00e0q\2\u03b6s\3\2\2\2\u03b7\u03ba")
        buf.write("\5\\/\2\u03b8\u03ba\5\u0112\u008a\2\u03b9\u03b7\3\2\2")
        buf.write("\2\u03b9\u03b8\3\2\2\2\u03bau\3\2\2\2\u03bb\u03c5\7\21")
        buf.write("\2\2\u03bc\u03c5\7\33\2\2\u03bd\u03c0\7=\2\2\u03be\u03c1")
        buf.write("\5\\/\2\u03bf\u03c1\5\u0112\u008a\2\u03c0\u03be\3\2\2")
        buf.write("\2\u03c0\u03bf\3\2\2\2\u03c0\u03c1\3\2\2\2\u03c1\u03c5")
        buf.write("\3\2\2\2\u03c2\u03c3\7,\2\2\u03c3\u03c5\7\u0086\2\2\u03c4")
        buf.write("\u03bb\3\2\2\2\u03c4\u03bc\3\2\2\2\u03c4\u03bd\3\2\2\2")
        buf.write("\u03c4\u03c2\3\2\2\2\u03c5\u03c6\3\2\2\2\u03c6\u03c7\7")
        buf.write("\u0082\2\2\u03c7w\3\2\2\2\u03c8\u03c9\5~@\2\u03c9y\3\2")
        buf.write("\2\2\u03ca\u03cc\5|?\2\u03cb\u03ca\3\2\2\2\u03cc\u03cd")
        buf.write("\3\2\2\2\u03cd\u03cb\3\2\2\2\u03cd\u03ce\3\2\2\2\u03ce")
        buf.write("{\3\2\2\2\u03cf\u03d9\5~@\2\u03d0\u03d9\5\u0106\u0084")
        buf.write("\2\u03d1\u03d9\5\u014c\u00a7\2\u03d2\u03d9\5\u0160\u00b1")
        buf.write("\2\u03d3\u03d9\5\u0162\u00b2\2\u03d4\u03d9\5\u00c8e\2")
        buf.write("\u03d5\u03d9\5\u00ba^\2\u03d6\u03d9\5\u0086D\2\u03d7\u03d9")
        buf.write("\5\u0088E\2\u03d8\u03cf\3\2\2\2\u03d8\u03d0\3\2\2\2\u03d8")
        buf.write("\u03d1\3\2\2\2\u03d8\u03d2\3\2\2\2\u03d8\u03d3\3\2\2\2")
        buf.write("\u03d8\u03d4\3\2\2\2\u03d8\u03d5\3\2\2\2\u03d8\u03d6\3")
        buf.write("\2\2\2\u03d8\u03d7\3\2\2\2\u03d9}\3\2\2\2\u03da\u03e3")
        buf.write("\5\u0082B\2\u03db\u03e3\5\u00c6d\2\u03dc\u03e3\5\u00be")
        buf.write("`\2\u03dd\u03e3\5\u00c2b\2\u03de\u03e3\5\u00c4c\2\u03df")
        buf.write("\u03e3\5\u0084C\2\u03e0\u03e3\5\u0080A\2\u03e1\u03e3\5")
        buf.write("\u00aaV\2\u03e2\u03da\3\2\2\2\u03e2\u03db\3\2\2\2\u03e2")
        buf.write("\u03dc\3\2\2\2\u03e2\u03dd\3\2\2\2\u03e2\u03de\3\2\2\2")
        buf.write("\u03e2\u03df\3\2\2\2\u03e2\u03e0\3\2\2\2\u03e2\u03e1\3")
        buf.write("\2\2\2\u03e3\177\3\2\2\2\u03e4\u03e5\7Q\2\2\u03e5\u03e7")
        buf.write("\7\u0086\2\2\u03e6\u03e8\5\u00caf\2\u03e7\u03e6\3\2\2")
        buf.write("\2\u03e7\u03e8\3\2\2\2\u03e8\u03e9\3\2\2\2\u03e9\u03ea")
        buf.write("\7g\2\2\u03ea\u03eb\5\u00f4{\2\u03eb\u03ec\7\u0082\2\2")
        buf.write("\u03ec\u0081\3\2\2\2\u03ed\u03ef\5\u008cG\2\u03ee\u03ed")
        buf.write("\3\2\2\2\u03ee\u03ef\3\2\2\2\u03ef\u03f1\3\2\2\2\u03f0")
        buf.write("\u03f2\5\u00dco\2\u03f1\u03f0\3\2\2\2\u03f1\u03f2\3\2")
        buf.write("\2\2\u03f2\u03f3\3\2\2\2\u03f3\u03fc\7\u0082\2\2\u03f4")
        buf.write("\u03f6\5\u00caf\2\u03f5\u03f7\5\u008cG\2\u03f6\u03f5\3")
        buf.write("\2\2\2\u03f6\u03f7\3\2\2\2\u03f7\u03f8\3\2\2\2\u03f8\u03f9")
        buf.write("\5\u00dco\2\u03f9\u03fa\7\u0082\2\2\u03fa\u03fc\3\2\2")
        buf.write("\2\u03fb\u03ee\3\2\2\2\u03fb\u03f4\3\2\2\2\u03fc\u0083")
        buf.write("\3\2\2\2\u03fd\u03fe\7B\2\2\u03fe\u03ff\7W\2\2\u03ff\u0400")
        buf.write("\5^\60\2\u0400\u0401\7|\2\2\u0401\u0402\7\6\2\2\u0402")
        buf.write("\u0403\7X\2\2\u0403\u0404\7\u0082\2\2\u0404\u0085\3\2")
        buf.write("\2\2\u0405\u0406\7\u0082\2\2\u0406\u0087\3\2\2\2\u0407")
        buf.write("\u0408\5\u00caf\2\u0408\u0409\7\u0082\2\2\u0409\u0089")
        buf.write("\3\2\2\2\u040a\u0411\5\u008eH\2\u040b\u0411\5\u0094K\2")
        buf.write("\u040c\u0411\5\u0090I\2\u040d\u0411\7+\2\2\u040e\u0411")
        buf.write("\7L\2\2\u040f\u0411\7\31\2\2\u0410\u040a\3\2\2\2\u0410")
        buf.write("\u040b\3\2\2\2\u0410\u040c\3\2\2\2\u0410\u040d\3\2\2\2")
        buf.write("\u0410\u040e\3\2\2\2\u0410\u040f\3\2\2\2\u0411\u008b\3")
        buf.write("\2\2\2\u0412\u0414\5\u008aF\2\u0413\u0412\3\2\2\2\u0414")
        buf.write("\u0415\3\2\2\2\u0415\u0413\3\2\2\2\u0415\u0416\3\2\2\2")
        buf.write("\u0416\u0418\3\2\2\2\u0417\u0419\5\u00caf\2\u0418\u0417")
        buf.write("\3\2\2\2\u0418\u0419\3\2\2\2\u0419\u008d\3\2\2\2\u041a")
        buf.write("\u041b\t\r\2\2\u041b\u008f\3\2\2\2\u041c\u041d\t\16\2")
        buf.write("\2\u041d\u0091\3\2\2\2\u041e\u041f\7\u0086\2\2\u041f\u0093")
        buf.write("\3\2\2\2\u0420\u0424\5\u0096L\2\u0421\u0424\5\u0116\u008c")
        buf.write("\2\u0422\u0424\5\u00a6T\2\u0423\u0420\3\2\2\2\u0423\u0421")
        buf.write("\3\2\2\2\u0423\u0422\3\2\2\2\u0424\u0095\3\2\2\2\u0425")
        buf.write("\u042a\5\u009cO\2\u0426\u042a\5\u00a2R\2\u0427\u042a\5")
        buf.write("\u015e\u00b0\2\u0428\u042a\5\u00eex\2\u0429\u0425\3\2")
        buf.write("\2\2\u0429\u0426\3\2\2\2\u0429\u0427\3\2\2\2\u0429\u0428")
        buf.write("\3\2\2\2\u042a\u0097\3\2\2\2\u042b\u042d\5\u0094K\2\u042c")
        buf.write("\u042b\3\2\2\2\u042d\u042e\3\2\2\2\u042e\u042c\3\2\2\2")
        buf.write("\u042e\u042f\3\2\2\2\u042f\u0431\3\2\2\2\u0430\u0432\5")
        buf.write("\u00caf\2\u0431\u0430\3\2\2\2\u0431\u0432\3\2\2\2\u0432")
        buf.write("\u0099\3\2\2\2\u0433\u0435\5\u0096L\2\u0434\u0433\3\2")
        buf.write("\2\2\u0435\u0436\3\2\2\2\u0436\u0434\3\2\2\2\u0436\u0437")
        buf.write("\3\2\2\2\u0437\u0439\3\2\2\2\u0438\u043a\5\u00caf\2\u0439")
        buf.write("\u0438\3\2\2\2\u0439\u043a\3\2\2\2\u043a\u009b\3\2\2\2")
        buf.write("\u043b\u043d\5\f\7\2\u043c\u043b\3\2\2\2\u043c\u043d\3")
        buf.write("\2\2\2\u043d\u043e\3\2\2\2\u043e\u0453\5\u009eP\2\u043f")
        buf.write("\u0440\5\f\7\2\u0440\u0441\7F\2\2\u0441\u0442\5\u0154")
        buf.write("\u00ab\2\u0442\u0453\3\2\2\2\u0443\u0453\7\24\2\2\u0444")
        buf.write("\u0453\7\25\2\2\u0445\u0453\7\26\2\2\u0446\u0453\7U\2")
        buf.write("\2\u0447\u0453\7\20\2\2\u0448\u0453\7>\2\2\u0449\u0453")
        buf.write("\7/\2\2\u044a\u0453\7\60\2\2\u044b\u0453\7?\2\2\u044c")
        buf.write("\u0453\7P\2\2\u044d\u0453\7)\2\2\u044e\u0453\7 \2\2\u044f")
        buf.write("\u0453\7S\2\2\u0450\u0453\7\17\2\2\u0451\u0453\5\u00a0")
        buf.write("Q\2\u0452\u043c\3\2\2\2\u0452\u043f\3\2\2\2\u0452\u0443")
        buf.write("\3\2\2\2\u0452\u0444\3\2\2\2\u0452\u0445\3\2\2\2\u0452")
        buf.write("\u0446\3\2\2\2\u0452\u0447\3\2\2\2\u0452\u0448\3\2\2\2")
        buf.write("\u0452\u0449\3\2\2\2\u0452\u044a\3\2\2\2\u0452\u044b\3")
        buf.write("\2\2\2\u0452\u044c\3\2\2\2\u0452\u044d\3\2\2\2\u0452\u044e")
        buf.write("\3\2\2\2\u0452\u044f\3\2\2\2\u0452\u0450\3\2\2\2\u0452")
        buf.write("\u0451\3\2\2\2\u0453\u009d\3\2\2\2\u0454\u0459\5\u0114")
        buf.write("\u008b\2\u0455\u0459\5\u00a4S\2\u0456\u0459\5\u0092J\2")
        buf.write("\u0457\u0459\5\u0154\u00ab\2\u0458\u0454\3\2\2\2\u0458")
        buf.write("\u0455\3\2\2\2\u0458\u0456\3\2\2\2\u0458\u0457\3\2\2\2")
        buf.write("\u0459\u009f\3\2\2\2\u045a\u045b\7\34\2\2\u045b\u045e")
        buf.write("\7W\2\2\u045c\u045f\5\\/\2\u045d\u045f\7\17\2\2\u045e")
        buf.write("\u045c\3\2\2\2\u045e\u045d\3\2\2\2\u045f\u0460\3\2\2\2")
        buf.write("\u0460\u0461\7X\2\2\u0461\u00a1\3\2\2\2\u0462\u0471\5")
        buf.write("\u011e\u0090\2\u0463\u0465\5\u00caf\2\u0464\u0463\3\2")
        buf.write("\2\2\u0464\u0465\3\2\2\2\u0465\u0467\3\2\2\2\u0466\u0468")
        buf.write("\5\f\7\2\u0467\u0466\3\2\2\2\u0467\u0468\3\2\2\2\u0468")
        buf.write("\u0469\3\2\2\2\u0469\u0472\7\u0086\2\2\u046a\u0472\5\u0154")
        buf.write("\u00ab\2\u046b\u046d\5\f\7\2\u046c\u046e\7F\2\2\u046d")
        buf.write("\u046c\3\2\2\2\u046d\u046e\3\2\2\2\u046e\u046f\3\2\2\2")
        buf.write("\u046f\u0470\5\u0154\u00ab\2\u0470\u0472\3\2\2\2\u0471")
        buf.write("\u0464\3\2\2\2\u0471\u046a\3\2\2\2\u0471\u046b\3\2\2\2")
        buf.write("\u0472\u0479\3\2\2\2\u0473\u0475\7#\2\2\u0474\u0476\5")
        buf.write("\f\7\2\u0475\u0474\3\2\2\2\u0475\u0476\3\2\2\2\u0476\u0477")
        buf.write("\3\2\2\2\u0477\u0479\7\u0086\2\2\u0478\u0462\3\2\2\2\u0478")
        buf.write("\u0473\3\2\2\2\u0479\u00a3\3\2\2\2\u047a\u047b\7\u0086")
        buf.write("\2\2\u047b\u00a5\3\2\2\2\u047c\u047d\5\u00a8U\2\u047d")
        buf.write("\u0482\7[\2\2\u047e\u0480\5\u00b0Y\2\u047f\u0481\7|\2")
        buf.write("\2\u0480\u047f\3\2\2\2\u0480\u0481\3\2\2\2\u0481\u0483")
        buf.write("\3\2\2\2\u0482\u047e\3\2\2\2\u0482\u0483\3\2\2\2\u0483")
        buf.write("\u0484\3\2\2\2\u0484\u0485\7\\\2\2\u0485\u00a7\3\2\2\2")
        buf.write("\u0486\u0488\5\u00acW\2\u0487\u0489\5\u00caf\2\u0488\u0487")
        buf.write("\3\2\2\2\u0488\u0489\3\2\2\2\u0489\u048e\3\2\2\2\u048a")
        buf.write("\u048c\5\f\7\2\u048b\u048a\3\2\2\2\u048b\u048c\3\2\2\2")
        buf.write("\u048c\u048d\3\2\2\2\u048d\u048f\7\u0086\2\2\u048e\u048b")
        buf.write("\3\2\2\2\u048e\u048f\3\2\2\2\u048f\u0491\3\2\2\2\u0490")
        buf.write("\u0492\5\u00aeX\2\u0491\u0490\3\2\2\2\u0491\u0492\3\2")
        buf.write("\2\2\u0492\u00a9\3\2\2\2\u0493\u0495\5\u00acW\2\u0494")
        buf.write("\u0496\5\u00caf\2\u0495\u0494\3\2\2\2\u0495\u0496\3\2")
        buf.write("\2\2\u0496\u0497\3\2\2\2\u0497\u0499\7\u0086\2\2\u0498")
        buf.write("\u049a\5\u00aeX\2\u0499\u0498\3\2\2\2\u0499\u049a\3\2")
        buf.write("\2\2\u049a\u049b\3\2\2\2\u049b\u049c\7\u0082\2\2\u049c")
        buf.write("\u00ab\3\2\2\2\u049d\u049f\7#\2\2\u049e\u04a0\t\17\2\2")
        buf.write("\u049f\u049e\3\2\2\2\u049f\u04a0\3\2\2\2\u04a0\u00ad\3")
        buf.write("\2\2\2\u04a1\u04a2\7\u0080\2\2\u04a2\u04a3\5\u0098M\2")
        buf.write("\u04a3\u00af\3\2\2\2\u04a4\u04a9\5\u00b2Z\2\u04a5\u04a6")
        buf.write("\7|\2\2\u04a6\u04a8\5\u00b2Z\2\u04a7\u04a5\3\2\2\2\u04a8")
        buf.write("\u04ab\3\2\2\2\u04a9\u04a7\3\2\2\2\u04a9\u04aa\3\2\2\2")
        buf.write("\u04aa\u00b1\3\2\2\2\u04ab\u04a9\3\2\2\2\u04ac\u04af\5")
        buf.write("\u00b4[\2\u04ad\u04ae\7g\2\2\u04ae\u04b0\5^\60\2\u04af")
        buf.write("\u04ad\3\2\2\2\u04af\u04b0\3\2\2\2\u04b0\u00b3\3\2\2\2")
        buf.write("\u04b1\u04b2\7\u0086\2\2\u04b2\u00b5\3\2\2\2\u04b3\u04b6")
        buf.write("\5\u00b8]\2\u04b4\u04b6\5\u00bc_\2\u04b5\u04b3\3\2\2\2")
        buf.write("\u04b5\u04b4\3\2\2\2\u04b6\u00b7\3\2\2\2\u04b7\u04b8\7")
        buf.write("\u0086\2\2\u04b8\u00b9\3\2\2\2\u04b9\u04bb\7.\2\2\u04ba")
        buf.write("\u04b9\3\2\2\2\u04ba\u04bb\3\2\2\2\u04bb\u04bc\3\2\2\2")
        buf.write("\u04bc\u04bf\7\62\2\2\u04bd\u04c0\7\u0086\2\2\u04be\u04c0")
        buf.write("\5\u00b8]\2\u04bf\u04bd\3\2\2\2\u04bf\u04be\3\2\2\2\u04bf")
        buf.write("\u04c0\3\2\2\2\u04c0\u04c1\3\2\2\2\u04c1\u04c3\7[\2\2")
        buf.write("\u04c2\u04c4\5z>\2\u04c3\u04c2\3\2\2\2\u04c3\u04c4\3\2")
        buf.write("\2\2\u04c4\u04c5\3\2\2\2\u04c5\u04c6\7\\\2\2\u04c6\u00bb")
        buf.write("\3\2\2\2\u04c7\u04c8\7\u0086\2\2\u04c8\u00bd\3\2\2\2\u04c9")
        buf.write("\u04ca\7\62\2\2\u04ca\u04cb\7\u0086\2\2\u04cb\u04cc\7")
        buf.write("g\2\2\u04cc\u04cd\5\u00c0a\2\u04cd\u04ce\7\u0082\2\2\u04ce")
        buf.write("\u00bf\3\2\2\2\u04cf\u04d1\5\f\7\2\u04d0\u04cf\3\2\2\2")
        buf.write("\u04d0\u04d1\3\2\2\2\u04d1\u04d2\3\2\2\2\u04d2\u04d3\5")
        buf.write("\u00b6\\\2\u04d3\u00c1\3\2\2\2\u04d4\u04da\7Q\2\2\u04d5")
        buf.write("\u04d7\7N\2\2\u04d6\u04d5\3\2\2\2\u04d6\u04d7\3\2\2\2")
        buf.write("\u04d7\u04d8\3\2\2\2\u04d8\u04db\5\f\7\2\u04d9\u04db\7")
        buf.write("\u0081\2\2\u04da\u04d6\3\2\2\2\u04da\u04d9\3\2\2\2\u04db")
        buf.write("\u04dc\3\2\2\2\u04dc\u04dd\5\b\5\2\u04dd\u04de\7\u0082")
        buf.write("\2\2\u04de\u00c3\3\2\2\2\u04df\u04e1\5\u00caf\2\u04e0")
        buf.write("\u04df\3\2\2\2\u04e0\u04e1\3\2\2\2\u04e1\u04e2\3\2\2\2")
        buf.write("\u04e2\u04e3\7Q\2\2\u04e3\u04e5\7\62\2\2\u04e4\u04e6\5")
        buf.write("\f\7\2\u04e5\u04e4\3\2\2\2\u04e5\u04e6\3\2\2\2\u04e6\u04e7")
        buf.write("\3\2\2\2\u04e7\u04e8\5\u00b6\\\2\u04e8\u04e9\7\u0082\2")
        buf.write("\2\u04e9\u00c5\3\2\2\2\u04ea\u04eb\7\16\2\2\u04eb\u04ec")
        buf.write("\7W\2\2\u04ec\u04ed\7\6\2\2\u04ed\u04ee\7X\2\2\u04ee\u04ef")
        buf.write("\7\u0082\2\2\u04ef\u00c7\3\2\2\2\u04f0\u04f1\7&\2\2\u04f1")
        buf.write("\u04f8\7\6\2\2\u04f2\u04f4\7[\2\2\u04f3\u04f5\5z>\2\u04f4")
        buf.write("\u04f3\3\2\2\2\u04f4\u04f5\3\2\2\2\u04f5\u04f6\3\2\2\2")
        buf.write("\u04f6\u04f9\7\\\2\2\u04f7\u04f9\5|?\2\u04f8\u04f2\3\2")
        buf.write("\2\2\u04f8\u04f7\3\2\2\2\u04f9\u00c9\3\2\2\2\u04fa\u04fc")
        buf.write("\5\u00ccg\2\u04fb\u04fa\3\2\2\2\u04fc\u04fd\3\2\2\2\u04fd")
        buf.write("\u04fb\3\2\2\2\u04fd\u04fe\3\2\2\2\u04fe\u00cb\3\2\2\2")
        buf.write("\u04ff\u0500\7Y\2\2\u0500\u0502\7Y\2\2\u0501\u0503\5\u00d0")
        buf.write("i\2\u0502\u0501\3\2\2\2\u0502\u0503\3\2\2\2\u0503\u0504")
        buf.write("\3\2\2\2\u0504\u0505\7Z\2\2\u0505\u0508\7Z\2\2\u0506\u0508")
        buf.write("\5\u00ceh\2\u0507\u04ff\3\2\2\2\u0507\u0506\3\2\2\2\u0508")
        buf.write("\u00cd\3\2\2\2\u0509\u050a\7\f\2\2\u050a\u050d\7W\2\2")
        buf.write("\u050b\u050e\5\u00f4{\2\u050c\u050e\5^\60\2\u050d\u050b")
        buf.write("\3\2\2\2\u050d\u050c\3\2\2\2\u050e\u0510\3\2\2\2\u050f")
        buf.write("\u0511\7\u0085\2\2\u0510\u050f\3\2\2\2\u0510\u0511\3\2")
        buf.write("\2\2\u0511\u0512\3\2\2\2\u0512\u0513\7X\2\2\u0513\u00cf")
        buf.write("\3\2\2\2\u0514\u0519\5\u00d2j\2\u0515\u0516\7|\2\2\u0516")
        buf.write("\u0518\5\u00d2j\2\u0517\u0515\3\2\2\2\u0518\u051b\3\2")
        buf.write("\2\2\u0519\u0517\3\2\2\2\u0519\u051a\3\2\2\2\u051a\u051d")
        buf.write("\3\2\2\2\u051b\u0519\3\2\2\2\u051c\u051e\7\u0085\2\2\u051d")
        buf.write("\u051c\3\2\2\2\u051d\u051e\3\2\2\2\u051e\u00d1\3\2\2\2")
        buf.write("\u051f\u0520\5\u00d4k\2\u0520\u0521\7\u0081\2\2\u0521")
        buf.write("\u0523\3\2\2\2\u0522\u051f\3\2\2\2\u0522\u0523\3\2\2\2")
        buf.write("\u0523\u0524\3\2\2\2\u0524\u0526\7\u0086\2\2\u0525\u0527")
        buf.write("\5\u00d6l\2\u0526\u0525\3\2\2\2\u0526\u0527\3\2\2\2\u0527")
        buf.write("\u00d3\3\2\2\2\u0528\u0529\7\u0086\2\2\u0529\u00d5\3\2")
        buf.write("\2\2\u052a\u052c\7W\2\2\u052b\u052d\5\u00d8m\2\u052c\u052b")
        buf.write("\3\2\2\2\u052c\u052d\3\2\2\2\u052d\u052e\3\2\2\2\u052e")
        buf.write("\u052f\7X\2\2\u052f\u00d7\3\2\2\2\u0530\u0532\5\u00da")
        buf.write("n\2\u0531\u0530\3\2\2\2\u0532\u0533\3\2\2\2\u0533\u0531")
        buf.write("\3\2\2\2\u0533\u0534\3\2\2\2\u0534\u00d9\3\2\2\2\u0535")
        buf.write("\u0536\7W\2\2\u0536\u0537\5\u00d8m\2\u0537\u0538\7X\2")
        buf.write("\2\u0538\u0547\3\2\2\2\u0539\u053a\7Y\2\2\u053a\u053b")
        buf.write("\5\u00d8m\2\u053b\u053c\7Z\2\2\u053c\u0547\3\2\2\2\u053d")
        buf.write("\u053e\7[\2\2\u053e\u053f\5\u00d8m\2\u053f\u0540\7\\\2")
        buf.write("\2\u0540\u0547\3\2\2\2\u0541\u0543\n\20\2\2\u0542\u0541")
        buf.write("\3\2\2\2\u0543\u0544\3\2\2\2\u0544\u0542\3\2\2\2\u0544")
        buf.write("\u0545\3\2\2\2\u0545\u0547\3\2\2\2\u0546\u0535\3\2\2\2")
        buf.write("\u0546\u0539\3\2\2\2\u0546\u053d\3\2\2\2\u0546\u0542\3")
        buf.write("\2\2\2\u0547\u00db\3\2\2\2\u0548\u054d\5\u00dep\2\u0549")
        buf.write("\u054a\7|\2\2\u054a\u054c\5\u00dep\2\u054b\u0549\3\2\2")
        buf.write("\2\u054c\u054f\3\2\2\2\u054d\u054b\3\2\2\2\u054d\u054e")
        buf.write("\3\2\2\2\u054e\u00dd\3\2\2\2\u054f\u054d\3\2\2\2\u0550")
        buf.write("\u0552\5\u00e0q\2\u0551\u0553\5\u010a\u0086\2\u0552\u0551")
        buf.write("\3\2\2\2\u0552\u0553\3\2\2\2\u0553\u00df\3\2\2\2\u0554")
        buf.write("\u055a\5\u00e2r\2\u0555\u0556\5\u00e4s\2\u0556\u0557\5")
        buf.write("\u00e6t\2\u0557\u0558\5\u00e8u\2\u0558\u055a\3\2\2\2\u0559")
        buf.write("\u0554\3\2\2\2\u0559\u0555\3\2\2\2\u055a\u00e1\3\2\2\2")
        buf.write("\u055b\u055d\5\u00eav\2\u055c\u055e\7\30\2\2\u055d\u055c")
        buf.write("\3\2\2\2\u055d\u055e\3\2\2\2\u055e\u0560\3\2\2\2\u055f")
        buf.write("\u055b\3\2\2\2\u0560\u0563\3\2\2\2\u0561\u055f\3\2\2\2")
        buf.write("\u0561\u0562\3\2\2\2\u0562\u0564\3\2\2\2\u0563\u0561\3")
        buf.write("\2\2\2\u0564\u0565\5\u00e4s\2\u0565\u00e3\3\2\2\2\u0566")
        buf.write("\u0567\bs\1\2\u0567\u0569\5\u00f2z\2\u0568\u056a\5\u00ca")
        buf.write("f\2\u0569\u0568\3\2\2\2\u0569\u056a\3\2\2\2\u056a\u0570")
        buf.write("\3\2\2\2\u056b\u056c\7W\2\2\u056c\u056d\5\u00e2r\2\u056d")
        buf.write("\u056e\7X\2\2\u056e\u0570\3\2\2\2\u056f\u0566\3\2\2\2")
        buf.write("\u056f\u056b\3\2\2\2\u0570\u057f\3\2\2\2\u0571\u057b\f")
        buf.write("\4\2\2\u0572\u057c\5\u00e6t\2\u0573\u0575\7Y\2\2\u0574")
        buf.write("\u0576\5^\60\2\u0575\u0574\3\2\2\2\u0575\u0576\3\2\2\2")
        buf.write("\u0576\u0577\3\2\2\2\u0577\u0579\7Z\2\2\u0578\u057a\5")
        buf.write("\u00caf\2\u0579\u0578\3\2\2\2\u0579\u057a\3\2\2\2\u057a")
        buf.write("\u057c\3\2\2\2\u057b\u0572\3\2\2\2\u057b\u0573\3\2\2\2")
        buf.write("\u057c\u057e\3\2\2\2\u057d\u0571\3\2\2\2\u057e\u0581\3")
        buf.write("\2\2\2\u057f\u057d\3\2\2\2\u057f\u0580\3\2\2\2\u0580\u00e5")
        buf.write("\3\2\2\2\u0581\u057f\3\2\2\2\u0582\u0584\7W\2\2\u0583")
        buf.write("\u0585\5\u0100\u0081\2\u0584\u0583\3\2\2\2\u0584\u0585")
        buf.write("\3\2\2\2\u0585\u0586\3\2\2\2\u0586\u0588\7X\2\2\u0587")
        buf.write("\u0589\5\u00ecw\2\u0588\u0587\3\2\2\2\u0588\u0589\3\2")
        buf.write("\2\2\u0589\u058b\3\2\2\2\u058a\u058c\5\u00f0y\2\u058b")
        buf.write("\u058a\3\2\2\2\u058b\u058c\3\2\2\2\u058c\u058e\3\2\2\2")
        buf.write("\u058d\u058f\5\u0170\u00b9\2\u058e\u058d\3\2\2\2\u058e")
        buf.write("\u058f\3\2\2\2\u058f\u0591\3\2\2\2\u0590\u0592\5\u00ca")
        buf.write("f\2\u0591\u0590\3\2\2\2\u0591\u0592\3\2\2\2\u0592\u00e7")
        buf.write("\3\2\2\2\u0593\u0594\7~\2\2\u0594\u0596\5\u009aN\2\u0595")
        buf.write("\u0597\5\u00f6|\2\u0596\u0595\3\2\2\2\u0596\u0597\3\2")
        buf.write("\2\2\u0597\u00e9\3\2\2\2\u0598\u059a\t\21\2\2\u0599\u059b")
        buf.write("\5\u00caf\2\u059a\u0599\3\2\2\2\u059a\u059b\3\2\2\2\u059b")
        buf.write("\u05a7\3\2\2\2\u059c\u059e\5\f\7\2\u059d\u059c\3\2\2\2")
        buf.write("\u059d\u059e\3\2\2\2\u059e\u059f\3\2\2\2\u059f\u05a1\7")
        buf.write("_\2\2\u05a0\u05a2\5\u00caf\2\u05a1\u05a0\3\2\2\2\u05a1")
        buf.write("\u05a2\3\2\2\2\u05a2\u05a4\3\2\2\2\u05a3\u05a5\5\u00ec")
        buf.write("w\2\u05a4\u05a3\3\2\2\2\u05a4\u05a5\3\2\2\2\u05a5\u05a7")
        buf.write("\3\2\2\2\u05a6\u0598\3\2\2\2\u05a6\u059d\3\2\2\2\u05a7")
        buf.write("\u00eb\3\2\2\2\u05a8\u05aa\5\u00eex\2\u05a9\u05a8\3\2")
        buf.write("\2\2\u05aa\u05ab\3\2\2\2\u05ab\u05a9\3\2\2\2\u05ab\u05ac")
        buf.write("\3\2\2\2\u05ac\u00ed\3\2\2\2\u05ad\u05ae\t\22\2\2\u05ae")
        buf.write("\u00ef\3\2\2\2\u05af\u05b0\t\21\2\2\u05b0\u00f1\3\2\2")
        buf.write("\2\u05b1\u05b3\7\u0085\2\2\u05b2\u05b1\3\2\2\2\u05b2\u05b3")
        buf.write("\3\2\2\2\u05b3\u05b4\3\2\2\2\u05b4\u05b5\5\6\4\2\u05b5")
        buf.write("\u00f3\3\2\2\2\u05b6\u05b8\5\u0098M\2\u05b7\u05b9\5\u00f6")
        buf.write("|\2\u05b8\u05b7\3\2\2\2\u05b8\u05b9\3\2\2\2\u05b9\u00f5")
        buf.write("\3\2\2\2\u05ba\u05c3\5\u00f8}\2\u05bb\u05bd\5\u00fa~\2")
        buf.write("\u05bc\u05bb\3\2\2\2\u05bc\u05bd\3\2\2\2\u05bd\u05be\3")
        buf.write("\2\2\2\u05be\u05bf\5\u00e6t\2\u05bf\u05c0\5\u00e8u\2\u05c0")
        buf.write("\u05c3\3\2\2\2\u05c1\u05c3\5\u00fc\177\2\u05c2\u05ba\3")
        buf.write("\2\2\2\u05c2\u05bc\3\2\2\2\u05c2\u05c1\3\2\2\2\u05c3\u00f7")
        buf.write("\3\2\2\2\u05c4\u05ce\5\u00fa~\2\u05c5\u05c7\5\u00eav\2")
        buf.write("\u05c6\u05c5\3\2\2\2\u05c7\u05c8\3\2\2\2\u05c8\u05c6\3")
        buf.write("\2\2\2\u05c8\u05c9\3\2\2\2\u05c9\u05cb\3\2\2\2\u05ca\u05cc")
        buf.write("\5\u00fa~\2\u05cb\u05ca\3\2\2\2\u05cb\u05cc\3\2\2\2\u05cc")
        buf.write("\u05ce\3\2\2\2\u05cd\u05c4\3\2\2\2\u05cd\u05c6\3\2\2\2")
        buf.write("\u05ce\u00f9\3\2\2\2\u05cf\u05d0\b~\1\2\u05d0\u05de\5")
        buf.write("\u00e6t\2\u05d1\u05d3\7Y\2\2\u05d2\u05d4\5^\60\2\u05d3")
        buf.write("\u05d2\3\2\2\2\u05d3\u05d4\3\2\2\2\u05d4\u05d5\3\2\2\2")
        buf.write("\u05d5\u05d7\7Z\2\2\u05d6\u05d8\5\u00caf\2\u05d7\u05d6")
        buf.write("\3\2\2\2\u05d7\u05d8\3\2\2\2\u05d8\u05de\3\2\2\2\u05d9")
        buf.write("\u05da\7W\2\2\u05da\u05db\5\u00f8}\2\u05db\u05dc\7X\2")
        buf.write("\2\u05dc\u05de\3\2\2\2\u05dd\u05cf\3\2\2\2\u05dd\u05d1")
        buf.write("\3\2\2\2\u05dd\u05d9\3\2\2\2\u05de\u05ee\3\2\2\2\u05df")
        buf.write("\u05ea\f\6\2\2\u05e0\u05eb\5\u00e6t\2\u05e1\u05e2\5\u00fa")
        buf.write("~\2\u05e2\u05e4\7Y\2\2\u05e3\u05e5\5^\60\2\u05e4\u05e3")
        buf.write("\3\2\2\2\u05e4\u05e5\3\2\2\2\u05e5\u05e6\3\2\2\2\u05e6")
        buf.write("\u05e8\7Z\2\2\u05e7\u05e9\5\u00caf\2\u05e8\u05e7\3\2\2")
        buf.write("\2\u05e8\u05e9\3\2\2\2\u05e9\u05eb\3\2\2\2\u05ea\u05e0")
        buf.write("\3\2\2\2\u05ea\u05e1\3\2\2\2\u05eb\u05ed\3\2\2\2\u05ec")
        buf.write("\u05df\3\2\2\2\u05ed\u05f0\3\2\2\2\u05ee\u05ec\3\2\2\2")
        buf.write("\u05ee\u05ef\3\2\2\2\u05ef\u00fb\3\2\2\2\u05f0\u05ee\3")
        buf.write("\2\2\2\u05f1\u05f3\5\u00eav\2\u05f2\u05f1\3\2\2\2\u05f3")
        buf.write("\u05f6\3\2\2\2\u05f4\u05f2\3\2\2\2\u05f4\u05f5\3\2\2\2")
        buf.write("\u05f5\u05f7\3\2\2\2\u05f6\u05f4\3\2\2\2\u05f7\u05f8\5")
        buf.write("\u00fe\u0080\2\u05f8\u00fd\3\2\2\2\u05f9\u05fa\b\u0080")
        buf.write("\1\2\u05fa\u05fb\7\u0085\2\2\u05fb\u060a\3\2\2\2\u05fc")
        buf.write("\u0606\f\4\2\2\u05fd\u0607\5\u00e6t\2\u05fe\u0600\7Y\2")
        buf.write("\2\u05ff\u0601\5^\60\2\u0600\u05ff\3\2\2\2\u0600\u0601")
        buf.write("\3\2\2\2\u0601\u0602\3\2\2\2\u0602\u0604\7Z\2\2\u0603")
        buf.write("\u0605\5\u00caf\2\u0604\u0603\3\2\2\2\u0604\u0605\3\2")
        buf.write("\2\2\u0605\u0607\3\2\2\2\u0606\u05fd\3\2\2\2\u0606\u05fe")
        buf.write("\3\2\2\2\u0607\u0609\3\2\2\2\u0608\u05fc\3\2\2\2\u0609")
        buf.write("\u060c\3\2\2\2\u060a\u0608\3\2\2\2\u060a\u060b\3\2\2\2")
        buf.write("\u060b\u00ff\3\2\2\2\u060c\u060a\3\2\2\2\u060d\u0612\5")
        buf.write("\u0102\u0082\2\u060e\u0610\7|\2\2\u060f\u060e\3\2\2\2")
        buf.write("\u060f\u0610\3\2\2\2\u0610\u0611\3\2\2\2\u0611\u0613\7")
        buf.write("\u0085\2\2\u0612\u060f\3\2\2\2\u0612\u0613\3\2\2\2\u0613")
        buf.write("\u0101\3\2\2\2\u0614\u0619\5\u0104\u0083\2\u0615\u0616")
        buf.write("\7|\2\2\u0616\u0618\5\u0104\u0083\2\u0617\u0615\3\2\2")
        buf.write("\2\u0618\u061b\3\2\2\2\u0619\u0617\3\2\2\2\u0619\u061a")
        buf.write("\3\2\2\2\u061a\u0103\3\2\2\2\u061b\u0619\3\2\2\2\u061c")
        buf.write("\u061e\5\u00caf\2\u061d\u061c\3\2\2\2\u061d\u061e\3\2")
        buf.write("\2\2\u061e\u061f\3\2\2\2\u061f\u0624\5\u008cG\2\u0620")
        buf.write("\u0625\5\u00e0q\2\u0621\u0623\5\u00f6|\2\u0622\u0621\3")
        buf.write("\2\2\2\u0622\u0623\3\2\2\2\u0623\u0625\3\2\2\2\u0624\u0620")
        buf.write("\3\2\2\2\u0624\u0622\3\2\2\2\u0625\u0628\3\2\2\2\u0626")
        buf.write("\u0627\7g\2\2\u0627\u0629\5\u010e\u0088\2\u0628\u0626")
        buf.write("\3\2\2\2\u0628\u0629\3\2\2\2\u0629\u0105\3\2\2\2\u062a")
        buf.write("\u062c\5\u00caf\2\u062b\u062a\3\2\2\2\u062b\u062c\3\2")
        buf.write("\2\2\u062c\u062e\3\2\2\2\u062d\u062f\5\u008cG\2\u062e")
        buf.write("\u062d\3\2\2\2\u062e\u062f\3\2\2\2\u062f\u0630\3\2\2\2")
        buf.write("\u0630\u0632\5\u00e0q\2\u0631\u0633\5\u0128\u0095\2\u0632")
        buf.write("\u0631\3\2\2\2\u0632\u0633\3\2\2\2\u0633\u0634\3\2\2\2")
        buf.write("\u0634\u0635\5\u0108\u0085\2\u0635\u0107\3\2\2\2\u0636")
        buf.write("\u0638\5\u0140\u00a1\2\u0637\u0636\3\2\2\2\u0637\u0638")
        buf.write("\3\2\2\2\u0638\u0639\3\2\2\2\u0639\u063f\5f\64\2\u063a")
        buf.write("\u063f\5\u0166\u00b4\2\u063b\u063c\7g\2\2\u063c\u063d")
        buf.write("\t\23\2\2\u063d\u063f\7\u0082\2\2\u063e\u0637\3\2\2\2")
        buf.write("\u063e\u063a\3\2\2\2\u063e\u063b\3\2\2\2\u063f\u0109\3")
        buf.write("\2\2\2\u0640\u0646\5\u010c\u0087\2\u0641\u0642\7W\2\2")
        buf.write("\u0642\u0643\5$\23\2\u0643\u0644\7X\2\2\u0644\u0646\3")
        buf.write("\2\2\2\u0645\u0640\3\2\2\2\u0645\u0641\3\2\2\2\u0646\u010b")
        buf.write("\3\2\2\2\u0647\u0648\7g\2\2\u0648\u064b\5\u010e\u0088")
        buf.write("\2\u0649\u064b\5\u0112\u008a\2\u064a\u0647\3\2\2\2\u064a")
        buf.write("\u0649\3\2\2\2\u064b\u010d\3\2\2\2\u064c\u064f\5X-\2\u064d")
        buf.write("\u064f\5\u0112\u008a\2\u064e\u064c\3\2\2\2\u064e\u064d")
        buf.write("\3\2\2\2\u064f\u010f\3\2\2\2\u0650\u0652\5\u010e\u0088")
        buf.write("\2\u0651\u0653\7\u0085\2\2\u0652\u0651\3\2\2\2\u0652\u0653")
        buf.write("\3\2\2\2\u0653\u065b\3\2\2\2\u0654\u0655\7|\2\2\u0655")
        buf.write("\u0657\5\u010e\u0088\2\u0656\u0658\7\u0085\2\2\u0657\u0656")
        buf.write("\3\2\2\2\u0657\u0658\3\2\2\2\u0658\u065a\3\2\2\2\u0659")
        buf.write("\u0654\3\2\2\2\u065a\u065d\3\2\2\2\u065b\u0659\3\2\2\2")
        buf.write("\u065b\u065c\3\2\2\2\u065c\u0111\3\2\2\2\u065d\u065b\3")
        buf.write("\2\2\2\u065e\u0663\7[\2\2\u065f\u0661\5\u0110\u0089\2")
        buf.write("\u0660\u0662\7|\2\2\u0661\u0660\3\2\2\2\u0661\u0662\3")
        buf.write("\2\2\2\u0662\u0664\3\2\2\2\u0663\u065f\3\2\2\2\u0663\u0664")
        buf.write("\3\2\2\2\u0664\u0665\3\2\2\2\u0665\u0666\7\\\2\2\u0666")
        buf.write("\u0113\3\2\2\2\u0667\u066a\7\u0086\2\2\u0668\u066a\5\u0154")
        buf.write("\u00ab\2\u0669\u0667\3\2\2\2\u0669\u0668\3\2\2\2\u066a")
        buf.write("\u0115\3\2\2\2\u066b\u066c\5\u0118\u008d\2\u066c\u066e")
        buf.write("\7[\2\2\u066d\u066f\5\u0120\u0091\2\u066e\u066d\3\2\2")
        buf.write("\2\u066e\u066f\3\2\2\2\u066f\u0670\3\2\2\2\u0670\u0671")
        buf.write("\7\\\2\2\u0671\u0117\3\2\2\2\u0672\u0674\5\u011e\u0090")
        buf.write("\2\u0673\u0675\5\u00caf\2\u0674\u0673\3\2\2\2\u0674\u0675")
        buf.write("\3\2\2\2\u0675\u067a\3\2\2\2\u0676\u0678\5\u011a\u008e")
        buf.write("\2\u0677\u0679\5\u011c\u008f\2\u0678\u0677\3\2\2\2\u0678")
        buf.write("\u0679\3\2\2\2\u0679\u067b\3\2\2\2\u067a\u0676\3\2\2\2")
        buf.write("\u067a\u067b\3\2\2\2\u067b\u067d\3\2\2\2\u067c\u067e\5")
        buf.write("\u012e\u0098\2\u067d\u067c\3\2\2\2\u067d\u067e\3\2\2\2")
        buf.write("\u067e\u068a\3\2\2\2\u067f\u0681\7O\2\2\u0680\u0682\5")
        buf.write("\u00caf\2\u0681\u0680\3\2\2\2\u0681\u0682\3\2\2\2\u0682")
        buf.write("\u0687\3\2\2\2\u0683\u0685\5\u011a\u008e\2\u0684\u0686")
        buf.write("\5\u011c\u008f\2\u0685\u0684\3\2\2\2\u0685\u0686\3\2\2")
        buf.write("\2\u0686\u0688\3\2\2\2\u0687\u0683\3\2\2\2\u0687\u0688")
        buf.write("\3\2\2\2\u0688\u068a\3\2\2\2\u0689\u0672\3\2\2\2\u0689")
        buf.write("\u067f\3\2\2\2\u068a\u0119\3\2\2\2\u068b\u068d\5\f\7\2")
        buf.write("\u068c\u068b\3\2\2\2\u068c\u068d\3\2\2\2\u068d\u068e\3")
        buf.write("\2\2\2\u068e\u068f\5\u0114\u008b\2\u068f\u011b\3\2\2\2")
        buf.write("\u0690\u0691\7(\2\2\u0691\u011d\3\2\2\2\u0692\u0693\t")
        buf.write("\17\2\2\u0693\u011f\3\2\2\2\u0694\u0699\5\u0122\u0092")
        buf.write("\2\u0695\u0696\5\u0138\u009d\2\u0696\u0697\7\u0080\2\2")
        buf.write("\u0697\u0699\3\2\2\2\u0698\u0694\3\2\2\2\u0698\u0695\3")
        buf.write("\2\2\2\u0699\u069a\3\2\2\2\u069a\u0698\3\2\2\2\u069a\u069b")
        buf.write("\3\2\2\2\u069b\u0121\3\2\2\2\u069c\u069e\5\u00caf\2\u069d")
        buf.write("\u069c\3\2\2\2\u069d\u069e\3\2\2\2\u069e\u06a0\3\2\2\2")
        buf.write("\u069f\u06a1\5\u008cG\2\u06a0\u069f\3\2\2\2\u06a0\u06a1")
        buf.write("\3\2\2\2\u06a1\u06a3\3\2\2\2\u06a2\u06a4\5\u0124\u0093")
        buf.write("\2\u06a3\u06a2\3\2\2\2\u06a3\u06a4\3\2\2\2\u06a4\u06a5")
        buf.write("\3\2\2\2\u06a5\u06ad\7\u0082\2\2\u06a6\u06ad\5\u0106\u0084")
        buf.write("\2\u06a7\u06ad\5\u00c2b\2\u06a8\u06ad\5\u0084C\2\u06a9")
        buf.write("\u06ad\5\u014c\u00a7\2\u06aa\u06ad\5\u0080A\2\u06ab\u06ad")
        buf.write("\5\u0086D\2\u06ac\u069d\3\2\2\2\u06ac\u06a6\3\2\2\2\u06ac")
        buf.write("\u06a7\3\2\2\2\u06ac\u06a8\3\2\2\2\u06ac\u06a9\3\2\2\2")
        buf.write("\u06ac\u06aa\3\2\2\2\u06ac\u06ab\3\2\2\2\u06ad\u0123\3")
        buf.write("\2\2\2\u06ae\u06b3\5\u0126\u0094\2\u06af\u06b0\7|\2\2")
        buf.write("\u06b0\u06b2\5\u0126\u0094\2\u06b1\u06af\3\2\2\2\u06b2")
        buf.write("\u06b5\3\2\2\2\u06b3\u06b1\3\2\2\2\u06b3\u06b4\3\2\2\2")
        buf.write("\u06b4\u0125\3\2\2\2\u06b5\u06b3\3\2\2\2\u06b6\u06c0\5")
        buf.write("\u00e0q\2\u06b7\u06b9\5\u0128\u0095\2\u06b8\u06b7\3\2")
        buf.write("\2\2\u06b8\u06b9\3\2\2\2\u06b9\u06bb\3\2\2\2\u06ba\u06bc")
        buf.write("\5\u012c\u0097\2\u06bb\u06ba\3\2\2\2\u06bb\u06bc\3\2\2")
        buf.write("\2\u06bc\u06c1\3\2\2\2\u06bd\u06bf\5\u010c\u0087\2\u06be")
        buf.write("\u06bd\3\2\2\2\u06be\u06bf\3\2\2\2\u06bf\u06c1\3\2\2\2")
        buf.write("\u06c0\u06b8\3\2\2\2\u06c0\u06be\3\2\2\2\u06c1\u06cb\3")
        buf.write("\2\2\2\u06c2\u06c4\7\u0086\2\2\u06c3\u06c2\3\2\2\2\u06c3")
        buf.write("\u06c4\3\2\2\2\u06c4\u06c6\3\2\2\2\u06c5\u06c7\5\u00ca")
        buf.write("f\2\u06c6\u06c5\3\2\2\2\u06c6\u06c7\3\2\2\2\u06c7\u06c8")
        buf.write("\3\2\2\2\u06c8\u06c9\7\u0080\2\2\u06c9\u06cb\5^\60\2\u06ca")
        buf.write("\u06b6\3\2\2\2\u06ca\u06c3\3\2\2\2\u06cb\u0127\3\2\2\2")
        buf.write("\u06cc\u06ce\5\u012a\u0096\2\u06cd\u06cc\3\2\2\2\u06ce")
        buf.write("\u06cf\3\2\2\2\u06cf\u06cd\3\2\2\2\u06cf\u06d0\3\2\2\2")
        buf.write("\u06d0\u0129\3\2\2\2\u06d1\u06d2\t\24\2\2\u06d2\u012b")
        buf.write("\3\2\2\2\u06d3\u06d4\7g\2\2\u06d4\u06d5\7\u0088\2\2\u06d5")
        buf.write("\u06d6\b\u0097\1\2\u06d6\u012d\3\2\2\2\u06d7\u06d8\7\u0080")
        buf.write("\2\2\u06d8\u06d9\5\u0130\u0099\2\u06d9\u012f\3\2\2\2\u06da")
        buf.write("\u06dc\5\u0132\u009a\2\u06db\u06dd\7\u0085\2\2\u06dc\u06db")
        buf.write("\3\2\2\2\u06dc\u06dd\3\2\2\2\u06dd\u06e5\3\2\2\2\u06de")
        buf.write("\u06df\7|\2\2\u06df\u06e1\5\u0132\u009a\2\u06e0\u06e2")
        buf.write("\7\u0085\2\2\u06e1\u06e0\3\2\2\2\u06e1\u06e2\3\2\2\2\u06e2")
        buf.write("\u06e4\3\2\2\2\u06e3\u06de\3\2\2\2\u06e4\u06e7\3\2\2\2")
        buf.write("\u06e5\u06e3\3\2\2\2\u06e5\u06e6\3\2\2\2\u06e6\u0131\3")
        buf.write("\2\2\2\u06e7\u06e5\3\2\2\2\u06e8\u06ea\5\u00caf\2\u06e9")
        buf.write("\u06e8\3\2\2\2\u06e9\u06ea\3\2\2\2\u06ea\u06f7\3\2\2\2")
        buf.write("\u06eb\u06f8\5\u0136\u009c\2\u06ec\u06ee\7R\2\2\u06ed")
        buf.write("\u06ef\5\u0138\u009d\2\u06ee\u06ed\3\2\2\2\u06ee\u06ef")
        buf.write("\3\2\2\2\u06ef\u06f0\3\2\2\2\u06f0\u06f8\5\u0136\u009c")
        buf.write("\2\u06f1\u06f3\5\u0138\u009d\2\u06f2\u06f4\7R\2\2\u06f3")
        buf.write("\u06f2\3\2\2\2\u06f3\u06f4\3\2\2\2\u06f4\u06f5\3\2\2\2")
        buf.write("\u06f5\u06f6\5\u0136\u009c\2\u06f6\u06f8\3\2\2\2\u06f7")
        buf.write("\u06eb\3\2\2\2\u06f7\u06ec\3\2\2\2\u06f7\u06f1\3\2\2\2")
        buf.write("\u06f8\u0133\3\2\2\2\u06f9\u06fb\5\f\7\2\u06fa\u06f9\3")
        buf.write("\2\2\2\u06fa\u06fb\3\2\2\2\u06fb\u06fc\3\2\2\2\u06fc\u06ff")
        buf.write("\5\u0114\u008b\2\u06fd\u06ff\5\u00a0Q\2\u06fe\u06fa\3")
        buf.write("\2\2\2\u06fe\u06fd\3\2\2\2\u06ff\u0135\3\2\2\2\u0700\u0701")
        buf.write("\5\u0134\u009b\2\u0701\u0137\3\2\2\2\u0702\u0703\t\25")
        buf.write("\2\2\u0703\u0139\3\2\2\2\u0704\u0705\7\66\2\2\u0705\u0706")
        buf.write("\5\u013c\u009f\2\u0706\u013b\3\2\2\2\u0707\u0709\5\u0098")
        buf.write("M\2\u0708\u070a\5\u013e\u00a0\2\u0709\u0708\3\2\2\2\u0709")
        buf.write("\u070a\3\2\2\2\u070a\u013d\3\2\2\2\u070b\u070d\5\u00ea")
        buf.write("v\2\u070c\u070e\5\u013e\u00a0\2\u070d\u070c\3\2\2\2\u070d")
        buf.write("\u070e\3\2\2\2\u070e\u013f\3\2\2\2\u070f\u0710\7\u0080")
        buf.write("\2\2\u0710\u0711\5\u0142\u00a2\2\u0711\u0141\3\2\2\2\u0712")
        buf.write("\u0714\5\u0144\u00a3\2\u0713\u0715\7\u0085\2\2\u0714\u0713")
        buf.write("\3\2\2\2\u0714\u0715\3\2\2\2\u0715\u071d\3\2\2\2\u0716")
        buf.write("\u0717\7|\2\2\u0717\u0719\5\u0144\u00a3\2\u0718\u071a")
        buf.write("\7\u0085\2\2\u0719\u0718\3\2\2\2\u0719\u071a\3\2\2\2\u071a")
        buf.write("\u071c\3\2\2\2\u071b\u0716\3\2\2\2\u071c\u071f\3\2\2\2")
        buf.write("\u071d\u071b\3\2\2\2\u071d\u071e\3\2\2\2\u071e\u0143\3")
        buf.write("\2\2\2\u071f\u071d\3\2\2\2\u0720\u0727\5\u0146\u00a4\2")
        buf.write("\u0721\u0723\7W\2\2\u0722\u0724\5$\23\2\u0723\u0722\3")
        buf.write("\2\2\2\u0723\u0724\3\2\2\2\u0724\u0725\3\2\2\2\u0725\u0728")
        buf.write("\7X\2\2\u0726\u0728\5\u0112\u008a\2\u0727\u0721\3\2\2")
        buf.write("\2\u0727\u0726\3\2\2\2\u0728\u0145\3\2\2\2\u0729\u072c")
        buf.write("\5\u0134\u009b\2\u072a\u072c\7\u0086\2\2\u072b\u0729\3")
        buf.write("\2\2\2\u072b\u072a\3\2\2\2\u072c\u0147\3\2\2\2\u072d\u072e")
        buf.write("\7\66\2\2\u072e\u072f\5\u0178\u00bd\2\u072f\u0149\3\2")
        buf.write("\2\2\u0730\u0734\7\66\2\2\u0731\u0732\7\6\2\2\u0732\u0735")
        buf.write("\7\u0086\2\2\u0733\u0735\7\u008e\2\2\u0734\u0731\3\2\2")
        buf.write("\2\u0734\u0733\3\2\2\2\u0735\u014b\3\2\2\2\u0736\u0737")
        buf.write("\7F\2\2\u0737\u0738\7h\2\2\u0738\u0739\5\u014e\u00a8\2")
        buf.write("\u0739\u073a\7i\2\2\u073a\u073b\5|?\2\u073b\u014d\3\2")
        buf.write("\2\2\u073c\u0741\5\u0150\u00a9\2\u073d\u073e\7|\2\2\u073e")
        buf.write("\u0740\5\u0150\u00a9\2\u073f\u073d\3\2\2\2\u0740\u0743")
        buf.write("\3\2\2\2\u0741\u073f\3\2\2\2\u0741\u0742\3\2\2\2\u0742")
        buf.write("\u014f\3\2\2\2\u0743\u0741\3\2\2\2\u0744\u0747\5\u0152")
        buf.write("\u00aa\2\u0745\u0747\5\u0104\u0083\2\u0746\u0744\3\2\2")
        buf.write("\2\u0746\u0745\3\2\2\2\u0747\u0151\3\2\2\2\u0748\u0749")
        buf.write("\7F\2\2\u0749\u074a\7h\2\2\u074a\u074b\5\u014e\u00a8\2")
        buf.write("\u074b\u074c\7i\2\2\u074c\u074e\3\2\2\2\u074d\u0748\3")
        buf.write("\2\2\2\u074d\u074e\3\2\2\2\u074e\u074f\3\2\2\2\u074f\u0752")
        buf.write("\7\27\2\2\u0750\u0752\7N\2\2\u0751\u074d\3\2\2\2\u0751")
        buf.write("\u0750\3\2\2\2\u0752\u075e\3\2\2\2\u0753\u0755\7\u0085")
        buf.write("\2\2\u0754\u0753\3\2\2\2\u0754\u0755\3\2\2\2\u0755\u0757")
        buf.write("\3\2\2\2\u0756\u0758\7\u0086\2\2\u0757\u0756\3\2\2\2\u0757")
        buf.write("\u0758\3\2\2\2\u0758\u075f\3\2\2\2\u0759\u075b\7\u0086")
        buf.write("\2\2\u075a\u0759\3\2\2\2\u075a\u075b\3\2\2\2\u075b\u075c")
        buf.write("\3\2\2\2\u075c\u075d\7g\2\2\u075d\u075f\5\u00f4{\2\u075e")
        buf.write("\u0754\3\2\2\2\u075e\u075a\3\2\2\2\u075f\u0153\3\2\2\2")
        buf.write("\u0760\u0761\5\u0158\u00ad\2\u0761\u0763\7h\2\2\u0762")
        buf.write("\u0764\5\u015a\u00ae\2\u0763\u0762\3\2\2\2\u0763\u0764")
        buf.write("\3\2\2\2\u0764\u0765\3\2\2\2\u0765\u0766\7i\2\2\u0766")
        buf.write("\u0155\3\2\2\2\u0767\u0773\5\u0154\u00ab\2\u0768\u076b")
        buf.write("\5\u0148\u00a5\2\u0769\u076b\5\u014a\u00a6\2\u076a\u0768")
        buf.write("\3\2\2\2\u076a\u0769\3\2\2\2\u076b\u076c\3\2\2\2\u076c")
        buf.write("\u076e\7h\2\2\u076d\u076f\5\u015a\u00ae\2\u076e\u076d")
        buf.write("\3\2\2\2\u076e\u076f\3\2\2\2\u076f\u0770\3\2\2\2\u0770")
        buf.write("\u0771\7i\2\2\u0771\u0773\3\2\2\2\u0772\u0767\3\2\2\2")
        buf.write("\u0772\u076a\3\2\2\2\u0773\u0157\3\2\2\2\u0774\u0775\7")
        buf.write("\u0086\2\2\u0775\u0159\3\2\2\2\u0776\u0778\5\u015c\u00af")
        buf.write("\2\u0777\u0779\7\u0085\2\2\u0778\u0777\3\2\2\2\u0778\u0779")
        buf.write("\3\2\2\2\u0779\u0781\3\2\2\2\u077a\u077b\7|\2\2\u077b")
        buf.write("\u077d\5\u015c\u00af\2\u077c\u077e\7\u0085\2\2\u077d\u077c")
        buf.write("\3\2\2\2\u077d\u077e\3\2\2\2\u077e\u0780\3\2\2\2\u077f")
        buf.write("\u077a\3\2\2\2\u0780\u0783\3\2\2\2\u0781\u077f\3\2\2\2")
        buf.write("\u0781\u0782\3\2\2\2\u0782\u015b\3\2\2\2\u0783\u0781\3")
        buf.write("\2\2\2\u0784\u0788\5\u00f4{\2\u0785\u0788\5^\60\2\u0786")
        buf.write("\u0788\5\6\4\2\u0787\u0784\3\2\2\2\u0787\u0785\3\2\2\2")
        buf.write("\u0787\u0786\3\2\2\2\u0788\u015d\3\2\2\2\u0789\u078a\7")
        buf.write("N\2\2\u078a\u0790\5\f\7\2\u078b\u0791\7\u0086\2\2\u078c")
        buf.write("\u078e\7F\2\2\u078d\u078c\3\2\2\2\u078d\u078e\3\2\2\2")
        buf.write("\u078e\u078f\3\2\2\2\u078f\u0791\5\u0154\u00ab\2\u0790")
        buf.write("\u078b\3\2\2\2\u0790\u078d\3\2\2\2\u0791\u015f\3\2\2\2")
        buf.write("\u0792\u0794\7&\2\2\u0793\u0792\3\2\2\2\u0793\u0794\3")
        buf.write("\2\2\2\u0794\u0795\3\2\2\2\u0795\u0796\7F\2\2\u0796\u0797")
        buf.write("\5|?\2\u0797\u0161\3\2\2\2\u0798\u0799\7F\2\2\u0799\u079a")
        buf.write("\7h\2\2\u079a\u079b\7i\2\2\u079b\u079c\5|?\2\u079c\u0163")
        buf.write("\3\2\2\2\u079d\u079e\7K\2\2\u079e\u079f\5f\64\2\u079f")
        buf.write("\u07a0\5\u0168\u00b5\2\u07a0\u0165\3\2\2\2\u07a1\u07a3")
        buf.write("\7K\2\2\u07a2\u07a4\5\u0140\u00a1\2\u07a3\u07a2\3\2\2")
        buf.write("\2\u07a3\u07a4\3\2\2\2\u07a4\u07a5\3\2\2\2\u07a5\u07a6")
        buf.write("\5f\64\2\u07a6\u07a7\5\u0168\u00b5\2\u07a7\u0167\3\2\2")
        buf.write("\2\u07a8\u07aa\5\u016a\u00b6\2\u07a9\u07a8\3\2\2\2\u07aa")
        buf.write("\u07ab\3\2\2\2\u07ab\u07a9\3\2\2\2\u07ab\u07ac\3\2\2\2")
        buf.write("\u07ac\u0169\3\2\2\2\u07ad\u07ae\7\23\2\2\u07ae\u07af")
        buf.write("\7W\2\2\u07af\u07b0\5\u016c\u00b7\2\u07b0\u07b1\7X\2\2")
        buf.write("\u07b1\u07b2\5f\64\2\u07b2\u016b\3\2\2\2\u07b3\u07b5\5")
        buf.write("\u00caf\2\u07b4\u07b3\3\2\2\2\u07b4\u07b5\3\2\2\2\u07b5")
        buf.write("\u07b6\3\2\2\2\u07b6\u07b9\5\u0098M\2\u07b7\u07ba\5\u00e0")
        buf.write("q\2\u07b8\u07ba\5\u00f6|\2\u07b9\u07b7\3\2\2\2\u07b9\u07b8")
        buf.write("\3\2\2\2\u07b9\u07ba\3\2\2\2\u07ba\u07bd\3\2\2\2\u07bb")
        buf.write("\u07bd\7\u0085\2\2\u07bc\u07b4\3\2\2\2\u07bc\u07bb\3\2")
        buf.write("\2\2\u07bd\u016d\3\2\2\2\u07be\u07c0\7I\2\2\u07bf\u07c1")
        buf.write("\5X-\2\u07c0\u07bf\3\2\2\2\u07c0\u07c1\3\2\2\2\u07c1\u016f")
        buf.write("\3\2\2\2\u07c2\u07c5\5\u0172\u00ba\2\u07c3\u07c5\5\u0176")
        buf.write("\u00bc\2\u07c4\u07c2\3\2\2\2\u07c4\u07c3\3\2\2\2\u07c5")
        buf.write("\u0171\3\2\2\2\u07c6\u07c7\7I\2\2\u07c7\u07c9\7W\2\2\u07c8")
        buf.write("\u07ca\5\u0174\u00bb\2\u07c9\u07c8\3\2\2\2\u07c9\u07ca")
        buf.write("\3\2\2\2\u07ca\u07cb\3\2\2\2\u07cb\u07cc\7X\2\2\u07cc")
        buf.write("\u0173\3\2\2\2\u07cd\u07cf\5\u00f4{\2\u07ce\u07d0\7\u0085")
        buf.write("\2\2\u07cf\u07ce\3\2\2\2\u07cf\u07d0\3\2\2\2\u07d0\u07d8")
        buf.write("\3\2\2\2\u07d1\u07d2\7|\2\2\u07d2\u07d4\5\u00f4{\2\u07d3")
        buf.write("\u07d5\7\u0085\2\2\u07d4\u07d3\3\2\2\2\u07d4\u07d5\3\2")
        buf.write("\2\2\u07d5\u07d7\3\2\2\2\u07d6\u07d1\3\2\2\2\u07d7\u07da")
        buf.write("\3\2\2\2\u07d8\u07d6\3\2\2\2\u07d8\u07d9\3\2\2\2\u07d9")
        buf.write("\u0175\3\2\2\2\u07da\u07d8\3\2\2\2\u07db\u07dc\7\64\2")
        buf.write("\2\u07dc\u07dd\7W\2\2\u07dd\u07de\5^\60\2\u07de\u07df")
        buf.write("\7X\2\2\u07df\u07e2\3\2\2\2\u07e0\u07e2\7\64\2\2\u07e1")
        buf.write("\u07db\3\2\2\2\u07e1\u07e0\3\2\2\2\u07e2\u0177\3\2\2\2")
        buf.write("\u07e3\u07e6\7\63\2\2\u07e4\u07e5\7Y\2\2\u07e5\u07e7\7")
        buf.write("Z\2\2\u07e6\u07e4\3\2\2\2\u07e6\u07e7\3\2\2\2\u07e7\u0819")
        buf.write("\3\2\2\2\u07e8\u07eb\7\36\2\2\u07e9\u07ea\7Y\2\2\u07ea")
        buf.write("\u07ec\7Z\2\2\u07eb\u07e9\3\2\2\2\u07eb\u07ec\3\2\2\2")
        buf.write("\u07ec\u0819\3\2\2\2\u07ed\u0819\7]\2\2\u07ee\u0819\7")
        buf.write("^\2\2\u07ef\u0819\7_\2\2\u07f0\u0819\7`\2\2\u07f1\u0819")
        buf.write("\7a\2\2\u07f2\u0819\7b\2\2\u07f3\u0819\7c\2\2\u07f4\u0819")
        buf.write("\7d\2\2\u07f5\u0819\7e\2\2\u07f6\u0819\7f\2\2\u07f7\u0819")
        buf.write("\7g\2\2\u07f8\u0819\7i\2\2\u07f9\u0819\7h\2\2\u07fa\u0819")
        buf.write("\7w\2\2\u07fb\u0819\7j\2\2\u07fc\u0819\7k\2\2\u07fd\u0819")
        buf.write("\7l\2\2\u07fe\u0819\7g\2\2\u07ff\u0819\7n\2\2\u0800\u0819")
        buf.write("\7o\2\2\u0801\u0819\7p\2\2\u0802\u0819\7q\2\2\u0803\u0804")
        buf.write("\7h\2\2\u0804\u0819\7h\2\2\u0805\u0806\7i\2\2\u0806\u0819")
        buf.write("\7i\2\2\u0807\u0819\7s\2\2\u0808\u0819\7r\2\2\u0809\u0819")
        buf.write("\7t\2\2\u080a\u0819\7u\2\2\u080b\u0819\7v\2\2\u080c\u0819")
        buf.write("\7w\2\2\u080d\u0819\7x\2\2\u080e\u0819\7y\2\2\u080f\u0819")
        buf.write("\7z\2\2\u0810\u0819\7{\2\2\u0811\u0819\7|\2\2\u0812\u0819")
        buf.write("\7}\2\2\u0813\u0819\7~\2\2\u0814\u0815\7W\2\2\u0815\u0819")
        buf.write("\7X\2\2\u0816\u0817\7Y\2\2\u0817\u0819\7Z\2\2\u0818\u07e3")
        buf.write("\3\2\2\2\u0818\u07e8\3\2\2\2\u0818\u07ed\3\2\2\2\u0818")
        buf.write("\u07ee\3\2\2\2\u0818\u07ef\3\2\2\2\u0818\u07f0\3\2\2\2")
        buf.write("\u0818\u07f1\3\2\2\2\u0818\u07f2\3\2\2\2\u0818\u07f3\3")
        buf.write("\2\2\2\u0818\u07f4\3\2\2\2\u0818\u07f5\3\2\2\2\u0818\u07f6")
        buf.write("\3\2\2\2\u0818\u07f7\3\2\2\2\u0818\u07f8\3\2\2\2\u0818")
        buf.write("\u07f9\3\2\2\2\u0818\u07fa\3\2\2\2\u0818\u07fb\3\2\2\2")
        buf.write("\u0818\u07fc\3\2\2\2\u0818\u07fd\3\2\2\2\u0818\u07fe\3")
        buf.write("\2\2\2\u0818\u07ff\3\2\2\2\u0818\u0800\3\2\2\2\u0818\u0801")
        buf.write("\3\2\2\2\u0818\u0802\3\2\2\2\u0818\u0803\3\2\2\2\u0818")
        buf.write("\u0805\3\2\2\2\u0818\u0807\3\2\2\2\u0818\u0808\3\2\2\2")
        buf.write("\u0818\u0809\3\2\2\2\u0818\u080a\3\2\2\2\u0818\u080b\3")
        buf.write("\2\2\2\u0818\u080c\3\2\2\2\u0818\u080d\3\2\2\2\u0818\u080e")
        buf.write("\3\2\2\2\u0818\u080f\3\2\2\2\u0818\u0810\3\2\2\2\u0818")
        buf.write("\u0811\3\2\2\2\u0818\u0812\3\2\2\2\u0818\u0813\3\2\2\2")
        buf.write("\u0818\u0814\3\2\2\2\u0818\u0816\3\2\2\2\u0819\u0179\3")
        buf.write("\2\2\2\u081a\u081b\t\26\2\2\u081b\u017b\3\2\2\2\u012b")
        buf.write("\u017d\u0184\u018d\u0191\u019a\u019d\u01a1\u01a9\u01b0")
        buf.write("\u01b3\u01b8\u01bd\u01c3\u01cb\u01cd\u01d6\u01da\u01de")
        buf.write("\u01e1\u01e5\u01e8\u01ef\u01f3\u01f6\u01f9\u01fc\u0202")
        buf.write("\u0206\u020a\u0218\u021c\u0222\u0229\u022f\u0233\u0237")
        buf.write("\u0239\u0241\u0246\u0253\u025a\u0266\u0270\u0275\u0279")
        buf.write("\u0280\u0283\u028b\u028f\u0292\u0299\u02a0\u02a4\u02a9")
        buf.write("\u02ad\u02b0\u02b5\u02c4\u02cb\u02d3\u02db\u02e4\u02eb")
        buf.write("\u02f2\u02fa\u0302\u030a\u0312\u031a\u0322\u032b\u0333")
        buf.write("\u033c\u0343\u034b\u034e\u0351\u0357\u035d\u0363\u036a")
        buf.write("\u0373\u037b\u037f\u0386\u0388\u039c\u03a0\u03a6\u03ab")
        buf.write("\u03af\u03b2\u03b9\u03c0\u03c4\u03cd\u03d8\u03e2\u03e7")
        buf.write("\u03ee\u03f1\u03f6\u03fb\u0410\u0415\u0418\u0423\u0429")
        buf.write("\u042e\u0431\u0436\u0439\u043c\u0452\u0458\u045e\u0464")
        buf.write("\u0467\u046d\u0471\u0475\u0478\u0480\u0482\u0488\u048b")
        buf.write("\u048e\u0491\u0495\u0499\u049f\u04a9\u04af\u04b5\u04ba")
        buf.write("\u04bf\u04c3\u04d0\u04d6\u04da\u04e0\u04e5\u04f4\u04f8")
        buf.write("\u04fd\u0502\u0507\u050d\u0510\u0519\u051d\u0522\u0526")
        buf.write("\u052c\u0533\u0544\u0546\u054d\u0552\u0559\u055d\u0561")
        buf.write("\u0569\u056f\u0575\u0579\u057b\u057f\u0584\u0588\u058b")
        buf.write("\u058e\u0591\u0596\u059a\u059d\u05a1\u05a4\u05a6\u05ab")
        buf.write("\u05b2\u05b8\u05bc\u05c2\u05c8\u05cb\u05cd\u05d3\u05d7")
        buf.write("\u05dd\u05e4\u05e8\u05ea\u05ee\u05f4\u0600\u0604\u0606")
        buf.write("\u060a\u060f\u0612\u0619\u061d\u0622\u0624\u0628\u062b")
        buf.write("\u062e\u0632\u0637\u063e\u0645\u064a\u064e\u0652\u0657")
        buf.write("\u065b\u0661\u0663\u0669\u066e\u0674\u0678\u067a\u067d")
        buf.write("\u0681\u0685\u0687\u0689\u068c\u0698\u069a\u069d\u06a0")
        buf.write("\u06a3\u06ac\u06b3\u06b8\u06bb\u06be\u06c0\u06c3\u06c6")
        buf.write("\u06ca\u06cf\u06dc\u06e1\u06e5\u06e9\u06ee\u06f3\u06f7")
        buf.write("\u06fa\u06fe\u0709\u070d\u0714\u0719\u071d\u0723\u0727")
        buf.write("\u072b\u0734\u0741\u0746\u074d\u0751\u0754\u0757\u075a")
        buf.write("\u075e\u0763\u076a\u076e\u0772\u0778\u077d\u0781\u0787")
        buf.write("\u078d\u0790\u0793\u07a3\u07ab\u07b4\u07b9\u07bc\u07c0")
        buf.write("\u07c4\u07c9\u07cf\u07d4\u07d8\u07e1\u07e6\u07eb\u0818")
        return buf.getvalue()


class CPP14Parser ( Parser ):

    grammarFileName = "CPP14Parser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'alignas'", "'alignof'", 
                     "'asm'", "'auto'", "'bool'", "'break'", "'case'", "'catch'", 
                     "'char'", "'char16_t'", "'char32_t'", "'class'", "'const'", 
                     "'constexpr'", "'const_cast'", "'continue'", "'decltype'", 
                     "'default'", "'delete'", "'do'", "'double'", "'dynamic_cast'", 
                     "'else'", "'enum'", "'explicit'", "'export'", "'extern'", 
                     "'false'", "'final'", "'float'", "'for'", "'friend'", 
                     "'goto'", "'if'", "'inline'", "'int'", "'long'", "'mutable'", 
                     "'namespace'", "'new'", "'noexcept'", "'nullptr'", 
                     "'operator'", "'override'", "'private'", "'protected'", 
                     "'public'", "'register'", "'reinterpret_cast'", "'return'", 
                     "'short'", "'signed'", "'sizeof'", "'static'", "'static_assert'", 
                     "'static_cast'", "'struct'", "'switch'", "'template'", 
                     "'this'", "'thread_local'", "'throw'", "'true'", "'try'", 
                     "'typedef'", "'typeid'", "'typename'", "'union'", "'unsigned'", 
                     "'using'", "'virtual'", "'void'", "'volatile'", "'wchar_t'", 
                     "'while'", "'('", "')'", "'['", "']'", "'{'", "'}'", 
                     "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'&'", "'|'", 
                     "'~'", "<INVALID>", "'='", "'<'", "'>'", "'+='", "'-='", 
                     "'*='", "'/='", "'%='", "'^='", "'&='", "'|='", "'<<='", 
                     "'>>='", "'=='", "'!='", "'<='", "'>='", "<INVALID>", 
                     "<INVALID>", "'++'", "'--'", "','", "'->*'", "'->'", 
                     "'?'", "':'", "'::'", "';'", "'.'", "'.*'", "'...'" ]

    symbolicNames = [ "<INVALID>", "IntegerLiteral", "CharacterLiteral", 
                      "FloatingLiteral", "StringLiteral", "BooleanLiteral", 
                      "PointerLiteral", "UserDefinedLiteral", "MultiLineMacro", 
                      "Directive", "Alignas", "Alignof", "Asm", "Auto", 
                      "Bool", "Break", "Case", "Catch", "Char", "Char16", 
                      "Char32", "Class", "Const", "Constexpr", "Const_cast", 
                      "Continue", "Decltype", "Default", "Delete", "Do", 
                      "Double", "Dynamic_cast", "Else", "Enum", "Explicit", 
                      "Export", "Extern", "False_", "Final", "Float", "For", 
                      "Friend", "Goto", "If", "Inline", "Int", "Long", "Mutable", 
                      "Namespace", "New", "Noexcept", "Nullptr", "Operator", 
                      "Override", "Private", "Protected", "Public", "Register", 
                      "Reinterpret_cast", "Return", "Short", "Signed", "Sizeof", 
                      "Static", "Static_assert", "Static_cast", "Struct", 
                      "Switch", "Template", "This", "Thread_local", "Throw", 
                      "True_", "Try", "Typedef", "Typeid_", "Typename_", 
                      "Union", "Unsigned", "Using", "Virtual", "Void", "Volatile", 
                      "Wchar", "While", "LeftParen", "RightParen", "LeftBracket", 
                      "RightBracket", "LeftBrace", "RightBrace", "Plus", 
                      "Minus", "Star", "Div", "Mod", "Caret", "And", "Or", 
                      "Tilde", "Not", "Assign", "Less", "Greater", "PlusAssign", 
                      "MinusAssign", "StarAssign", "DivAssign", "ModAssign", 
                      "XorAssign", "AndAssign", "OrAssign", "LeftShiftAssign", 
                      "RightShiftAssign", "Equal", "NotEqual", "LessEqual", 
                      "GreaterEqual", "AndAnd", "OrOr", "PlusPlus", "MinusMinus", 
                      "Comma", "ArrowStar", "Arrow", "Question", "Colon", 
                      "Doublecolon", "Semi", "Dot", "DotStar", "Ellipsis", 
                      "Identifier", "DecimalLiteral", "OctalLiteral", "HexadecimalLiteral", 
                      "BinaryLiteral", "Integersuffix", "UserDefinedIntegerLiteral", 
                      "UserDefinedFloatingLiteral", "UserDefinedStringLiteral", 
                      "UserDefinedCharacterLiteral", "Whitespace", "Newline", 
                      "BlockComment", "LineComment" ]

    RULE_translationUnit = 0
    RULE_primaryExpression = 1
    RULE_idExpression = 2
    RULE_unqualifiedId = 3
    RULE_qualifiedId = 4
    RULE_nestedNameSpecifier = 5
    RULE_lambdaExpression = 6
    RULE_lambdaIntroducer = 7
    RULE_lambdaCapture = 8
    RULE_captureDefault = 9
    RULE_captureList = 10
    RULE_capture = 11
    RULE_simpleCapture = 12
    RULE_initcapture = 13
    RULE_lambdaDeclarator = 14
    RULE_postfixExpression = 15
    RULE_typeIdOfTheTypeId = 16
    RULE_expressionList = 17
    RULE_pseudoDestructorName = 18
    RULE_unaryExpression = 19
    RULE_unaryOperator = 20
    RULE_newExpression = 21
    RULE_newPlacement = 22
    RULE_newTypeId = 23
    RULE_newDeclarator = 24
    RULE_noPointerNewDeclarator = 25
    RULE_newInitializer = 26
    RULE_deleteExpression = 27
    RULE_noExceptExpression = 28
    RULE_castExpression = 29
    RULE_pointerMemberExpression = 30
    RULE_multiplicativeExpression = 31
    RULE_additiveExpression = 32
    RULE_shiftExpression = 33
    RULE_shiftOperator = 34
    RULE_relationalExpression = 35
    RULE_equalityExpression = 36
    RULE_andExpression = 37
    RULE_exclusiveOrExpression = 38
    RULE_inclusiveOrExpression = 39
    RULE_logicalAndExpression = 40
    RULE_logicalOrExpression = 41
    RULE_conditionalExpression = 42
    RULE_assignmentExpression = 43
    RULE_assignmentOperator = 44
    RULE_expression = 45
    RULE_constantExpression = 46
    RULE_statement = 47
    RULE_labeledStatement = 48
    RULE_expressionStatement = 49
    RULE_compoundStatement = 50
    RULE_statementSeq = 51
    RULE_selectionStatement = 52
    RULE_condition = 53
    RULE_iterationStatement = 54
    RULE_forInitStatement = 55
    RULE_forRangeDeclaration = 56
    RULE_forRangeInitializer = 57
    RULE_jumpStatement = 58
    RULE_declarationStatement = 59
    RULE_declarationseq = 60
    RULE_declaration = 61
    RULE_blockDeclaration = 62
    RULE_aliasDeclaration = 63
    RULE_simpleDeclaration = 64
    RULE_staticAssertDeclaration = 65
    RULE_emptyDeclaration = 66
    RULE_attributeDeclaration = 67
    RULE_declSpecifier = 68
    RULE_declSpecifierSeq = 69
    RULE_storageClassSpecifier = 70
    RULE_functionSpecifier = 71
    RULE_typedefName = 72
    RULE_typeSpecifier = 73
    RULE_trailingTypeSpecifier = 74
    RULE_typeSpecifierSeq = 75
    RULE_trailingTypeSpecifierSeq = 76
    RULE_simpleTypeSpecifier = 77
    RULE_theTypeName = 78
    RULE_decltypeSpecifier = 79
    RULE_elaboratedTypeSpecifier = 80
    RULE_enumName = 81
    RULE_enumSpecifier = 82
    RULE_enumHead = 83
    RULE_opaqueEnumDeclaration = 84
    RULE_enumkey = 85
    RULE_enumbase = 86
    RULE_enumeratorList = 87
    RULE_enumeratorDefinition = 88
    RULE_enumerator = 89
    RULE_namespaceName = 90
    RULE_originalNamespaceName = 91
    RULE_namespaceDefinition = 92
    RULE_namespaceAlias = 93
    RULE_namespaceAliasDefinition = 94
    RULE_qualifiednamespacespecifier = 95
    RULE_usingDeclaration = 96
    RULE_usingDirective = 97
    RULE_asmDefinition = 98
    RULE_linkageSpecification = 99
    RULE_attributeSpecifierSeq = 100
    RULE_attributeSpecifier = 101
    RULE_alignmentspecifier = 102
    RULE_attributeList = 103
    RULE_attribute = 104
    RULE_attributeNamespace = 105
    RULE_attributeArgumentClause = 106
    RULE_balancedTokenSeq = 107
    RULE_balancedtoken = 108
    RULE_initDeclaratorList = 109
    RULE_initDeclarator = 110
    RULE_declarator = 111
    RULE_pointerDeclarator = 112
    RULE_noPointerDeclarator = 113
    RULE_parametersAndQualifiers = 114
    RULE_trailingReturnType = 115
    RULE_pointerOperator = 116
    RULE_cvqualifierseq = 117
    RULE_cvQualifier = 118
    RULE_refqualifier = 119
    RULE_declaratorid = 120
    RULE_theTypeId = 121
    RULE_abstractDeclarator = 122
    RULE_pointerAbstractDeclarator = 123
    RULE_noPointerAbstractDeclarator = 124
    RULE_abstractPackDeclarator = 125
    RULE_noPointerAbstractPackDeclarator = 126
    RULE_parameterDeclarationClause = 127
    RULE_parameterDeclarationList = 128
    RULE_parameterDeclaration = 129
    RULE_functionDefinition = 130
    RULE_functionBody = 131
    RULE_initializer = 132
    RULE_braceOrEqualInitializer = 133
    RULE_initializerClause = 134
    RULE_initializerList = 135
    RULE_bracedInitList = 136
    RULE_className = 137
    RULE_classSpecifier = 138
    RULE_classHead = 139
    RULE_classHeadName = 140
    RULE_classVirtSpecifier = 141
    RULE_classKey = 142
    RULE_memberSpecification = 143
    RULE_memberdeclaration = 144
    RULE_memberDeclaratorList = 145
    RULE_memberDeclarator = 146
    RULE_virtualSpecifierSeq = 147
    RULE_virtualSpecifier = 148
    RULE_pureSpecifier = 149
    RULE_baseClause = 150
    RULE_baseSpecifierList = 151
    RULE_baseSpecifier = 152
    RULE_classOrDeclType = 153
    RULE_baseTypeSpecifier = 154
    RULE_accessSpecifier = 155
    RULE_conversionFunctionId = 156
    RULE_conversionTypeId = 157
    RULE_conversionDeclarator = 158
    RULE_constructorInitializer = 159
    RULE_memInitializerList = 160
    RULE_memInitializer = 161
    RULE_meminitializerid = 162
    RULE_operatorFunctionId = 163
    RULE_literalOperatorId = 164
    RULE_templateDeclaration = 165
    RULE_templateparameterList = 166
    RULE_templateParameter = 167
    RULE_typeParameter = 168
    RULE_simpleTemplateId = 169
    RULE_templateId = 170
    RULE_templateName = 171
    RULE_templateArgumentList = 172
    RULE_templateArgument = 173
    RULE_typeNameSpecifier = 174
    RULE_explicitInstantiation = 175
    RULE_explicitSpecialization = 176
    RULE_tryBlock = 177
    RULE_functionTryBlock = 178
    RULE_handlerSeq = 179
    RULE_handler = 180
    RULE_exceptionDeclaration = 181
    RULE_throwExpression = 182
    RULE_exceptionSpecification = 183
    RULE_dynamicExceptionSpecification = 184
    RULE_typeIdList = 185
    RULE_noeExceptSpecification = 186
    RULE_theOperator = 187
    RULE_literal = 188

    ruleNames =  [ "translationUnit", "primaryExpression", "idExpression", 
                   "unqualifiedId", "qualifiedId", "nestedNameSpecifier", 
                   "lambdaExpression", "lambdaIntroducer", "lambdaCapture", 
                   "captureDefault", "captureList", "capture", "simpleCapture", 
                   "initcapture", "lambdaDeclarator", "postfixExpression", 
                   "typeIdOfTheTypeId", "expressionList", "pseudoDestructorName", 
                   "unaryExpression", "unaryOperator", "newExpression", 
                   "newPlacement", "newTypeId", "newDeclarator", "noPointerNewDeclarator", 
                   "newInitializer", "deleteExpression", "noExceptExpression", 
                   "castExpression", "pointerMemberExpression", "multiplicativeExpression", 
                   "additiveExpression", "shiftExpression", "shiftOperator", 
                   "relationalExpression", "equalityExpression", "andExpression", 
                   "exclusiveOrExpression", "inclusiveOrExpression", "logicalAndExpression", 
                   "logicalOrExpression", "conditionalExpression", "assignmentExpression", 
                   "assignmentOperator", "expression", "constantExpression", 
                   "statement", "labeledStatement", "expressionStatement", 
                   "compoundStatement", "statementSeq", "selectionStatement", 
                   "condition", "iterationStatement", "forInitStatement", 
                   "forRangeDeclaration", "forRangeInitializer", "jumpStatement", 
                   "declarationStatement", "declarationseq", "declaration", 
                   "blockDeclaration", "aliasDeclaration", "simpleDeclaration", 
                   "staticAssertDeclaration", "emptyDeclaration", "attributeDeclaration", 
                   "declSpecifier", "declSpecifierSeq", "storageClassSpecifier", 
                   "functionSpecifier", "typedefName", "typeSpecifier", 
                   "trailingTypeSpecifier", "typeSpecifierSeq", "trailingTypeSpecifierSeq", 
                   "simpleTypeSpecifier", "theTypeName", "decltypeSpecifier", 
                   "elaboratedTypeSpecifier", "enumName", "enumSpecifier", 
                   "enumHead", "opaqueEnumDeclaration", "enumkey", "enumbase", 
                   "enumeratorList", "enumeratorDefinition", "enumerator", 
                   "namespaceName", "originalNamespaceName", "namespaceDefinition", 
                   "namespaceAlias", "namespaceAliasDefinition", "qualifiednamespacespecifier", 
                   "usingDeclaration", "usingDirective", "asmDefinition", 
                   "linkageSpecification", "attributeSpecifierSeq", "attributeSpecifier", 
                   "alignmentspecifier", "attributeList", "attribute", "attributeNamespace", 
                   "attributeArgumentClause", "balancedTokenSeq", "balancedtoken", 
                   "initDeclaratorList", "initDeclarator", "declarator", 
                   "pointerDeclarator", "noPointerDeclarator", "parametersAndQualifiers", 
                   "trailingReturnType", "pointerOperator", "cvqualifierseq", 
                   "cvQualifier", "refqualifier", "declaratorid", "theTypeId", 
                   "abstractDeclarator", "pointerAbstractDeclarator", "noPointerAbstractDeclarator", 
                   "abstractPackDeclarator", "noPointerAbstractPackDeclarator", 
                   "parameterDeclarationClause", "parameterDeclarationList", 
                   "parameterDeclaration", "functionDefinition", "functionBody", 
                   "initializer", "braceOrEqualInitializer", "initializerClause", 
                   "initializerList", "bracedInitList", "className", "classSpecifier", 
                   "classHead", "classHeadName", "classVirtSpecifier", "classKey", 
                   "memberSpecification", "memberdeclaration", "memberDeclaratorList", 
                   "memberDeclarator", "virtualSpecifierSeq", "virtualSpecifier", 
                   "pureSpecifier", "baseClause", "baseSpecifierList", "baseSpecifier", 
                   "classOrDeclType", "baseTypeSpecifier", "accessSpecifier", 
                   "conversionFunctionId", "conversionTypeId", "conversionDeclarator", 
                   "constructorInitializer", "memInitializerList", "memInitializer", 
                   "meminitializerid", "operatorFunctionId", "literalOperatorId", 
                   "templateDeclaration", "templateparameterList", "templateParameter", 
                   "typeParameter", "simpleTemplateId", "templateId", "templateName", 
                   "templateArgumentList", "templateArgument", "typeNameSpecifier", 
                   "explicitInstantiation", "explicitSpecialization", "tryBlock", 
                   "functionTryBlock", "handlerSeq", "handler", "exceptionDeclaration", 
                   "throwExpression", "exceptionSpecification", "dynamicExceptionSpecification", 
                   "typeIdList", "noeExceptSpecification", "theOperator", 
                   "literal" ]

    EOF = Token.EOF
    IntegerLiteral=1
    CharacterLiteral=2
    FloatingLiteral=3
    StringLiteral=4
    BooleanLiteral=5
    PointerLiteral=6
    UserDefinedLiteral=7
    MultiLineMacro=8
    Directive=9
    Alignas=10
    Alignof=11
    Asm=12
    Auto=13
    Bool=14
    Break=15
    Case=16
    Catch=17
    Char=18
    Char16=19
    Char32=20
    Class=21
    Const=22
    Constexpr=23
    Const_cast=24
    Continue=25
    Decltype=26
    Default=27
    Delete=28
    Do=29
    Double=30
    Dynamic_cast=31
    Else=32
    Enum=33
    Explicit=34
    Export=35
    Extern=36
    False_=37
    Final=38
    Float=39
    For=40
    Friend=41
    Goto=42
    If=43
    Inline=44
    Int=45
    Long=46
    Mutable=47
    Namespace=48
    New=49
    Noexcept=50
    Nullptr=51
    Operator=52
    Override=53
    Private=54
    Protected=55
    Public=56
    Register=57
    Reinterpret_cast=58
    Return=59
    Short=60
    Signed=61
    Sizeof=62
    Static=63
    Static_assert=64
    Static_cast=65
    Struct=66
    Switch=67
    Template=68
    This=69
    Thread_local=70
    Throw=71
    True_=72
    Try=73
    Typedef=74
    Typeid_=75
    Typename_=76
    Union=77
    Unsigned=78
    Using=79
    Virtual=80
    Void=81
    Volatile=82
    Wchar=83
    While=84
    LeftParen=85
    RightParen=86
    LeftBracket=87
    RightBracket=88
    LeftBrace=89
    RightBrace=90
    Plus=91
    Minus=92
    Star=93
    Div=94
    Mod=95
    Caret=96
    And=97
    Or=98
    Tilde=99
    Not=100
    Assign=101
    Less=102
    Greater=103
    PlusAssign=104
    MinusAssign=105
    StarAssign=106
    DivAssign=107
    ModAssign=108
    XorAssign=109
    AndAssign=110
    OrAssign=111
    LeftShiftAssign=112
    RightShiftAssign=113
    Equal=114
    NotEqual=115
    LessEqual=116
    GreaterEqual=117
    AndAnd=118
    OrOr=119
    PlusPlus=120
    MinusMinus=121
    Comma=122
    ArrowStar=123
    Arrow=124
    Question=125
    Colon=126
    Doublecolon=127
    Semi=128
    Dot=129
    DotStar=130
    Ellipsis=131
    Identifier=132
    DecimalLiteral=133
    OctalLiteral=134
    HexadecimalLiteral=135
    BinaryLiteral=136
    Integersuffix=137
    UserDefinedIntegerLiteral=138
    UserDefinedFloatingLiteral=139
    UserDefinedStringLiteral=140
    UserDefinedCharacterLiteral=141
    Whitespace=142
    Newline=143
    BlockComment=144
    LineComment=145

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.8")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class TranslationUnitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CPP14Parser.EOF, 0)

        def declarationseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_translationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTranslationUnit" ):
                listener.enterTranslationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTranslationUnit" ):
                listener.exitTranslationUnit(self)




    def translationUnit(self):

        localctx = CPP14Parser.TranslationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_translationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & ((1 << (CPP14Parser.Alignas - 10)) | (1 << (CPP14Parser.Asm - 10)) | (1 << (CPP14Parser.Auto - 10)) | (1 << (CPP14Parser.Bool - 10)) | (1 << (CPP14Parser.Char - 10)) | (1 << (CPP14Parser.Char16 - 10)) | (1 << (CPP14Parser.Char32 - 10)) | (1 << (CPP14Parser.Class - 10)) | (1 << (CPP14Parser.Const - 10)) | (1 << (CPP14Parser.Constexpr - 10)) | (1 << (CPP14Parser.Decltype - 10)) | (1 << (CPP14Parser.Double - 10)) | (1 << (CPP14Parser.Enum - 10)) | (1 << (CPP14Parser.Explicit - 10)) | (1 << (CPP14Parser.Extern - 10)) | (1 << (CPP14Parser.Float - 10)) | (1 << (CPP14Parser.Friend - 10)) | (1 << (CPP14Parser.Inline - 10)) | (1 << (CPP14Parser.Int - 10)) | (1 << (CPP14Parser.Long - 10)) | (1 << (CPP14Parser.Mutable - 10)) | (1 << (CPP14Parser.Namespace - 10)) | (1 << (CPP14Parser.Operator - 10)) | (1 << (CPP14Parser.Register - 10)) | (1 << (CPP14Parser.Short - 10)) | (1 << (CPP14Parser.Signed - 10)) | (1 << (CPP14Parser.Static - 10)) | (1 << (CPP14Parser.Static_assert - 10)) | (1 << (CPP14Parser.Struct - 10)) | (1 << (CPP14Parser.Template - 10)) | (1 << (CPP14Parser.Thread_local - 10)))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (CPP14Parser.Typedef - 74)) | (1 << (CPP14Parser.Typename_ - 74)) | (1 << (CPP14Parser.Union - 74)) | (1 << (CPP14Parser.Unsigned - 74)) | (1 << (CPP14Parser.Using - 74)) | (1 << (CPP14Parser.Virtual - 74)) | (1 << (CPP14Parser.Void - 74)) | (1 << (CPP14Parser.Volatile - 74)) | (1 << (CPP14Parser.Wchar - 74)) | (1 << (CPP14Parser.LeftParen - 74)) | (1 << (CPP14Parser.LeftBracket - 74)) | (1 << (CPP14Parser.Star - 74)) | (1 << (CPP14Parser.And - 74)) | (1 << (CPP14Parser.Tilde - 74)) | (1 << (CPP14Parser.AndAnd - 74)) | (1 << (CPP14Parser.Doublecolon - 74)) | (1 << (CPP14Parser.Semi - 74)) | (1 << (CPP14Parser.Ellipsis - 74)) | (1 << (CPP14Parser.Identifier - 74)))) != 0):
                self.state = 378
                self.declarationseq()


            self.state = 381
            self.match(CPP14Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.LiteralContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.LiteralContext,i)


        def This(self):
            return self.getToken(CPP14Parser.This, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def idExpression(self):
            return self.getTypedRuleContext(CPP14Parser.IdExpressionContext,0)


        def lambdaExpression(self):
            return self.getTypedRuleContext(CPP14Parser.LambdaExpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)




    def primaryExpression(self):

        localctx = CPP14Parser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_primaryExpression)
        try:
            self.state = 395
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.IntegerLiteral, CPP14Parser.CharacterLiteral, CPP14Parser.FloatingLiteral, CPP14Parser.StringLiteral, CPP14Parser.BooleanLiteral, CPP14Parser.PointerLiteral, CPP14Parser.UserDefinedLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 384 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 383
                        self.literal()

                    else:
                        raise NoViableAltException(self)
                    self.state = 386 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1,self._ctx)

                pass
            elif token in [CPP14Parser.This]:
                self.enterOuterAlt(localctx, 2)
                self.state = 388
                self.match(CPP14Parser.This)
                pass
            elif token in [CPP14Parser.LeftParen]:
                self.enterOuterAlt(localctx, 3)
                self.state = 389
                self.match(CPP14Parser.LeftParen)
                self.state = 390
                self.expression()
                self.state = 391
                self.match(CPP14Parser.RightParen)
                pass
            elif token in [CPP14Parser.Decltype, CPP14Parser.Operator, CPP14Parser.Tilde, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 4)
                self.state = 393
                self.idExpression()
                pass
            elif token in [CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 5)
                self.state = 394
                self.lambdaExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unqualifiedId(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedIdContext,0)


        def qualifiedId(self):
            return self.getTypedRuleContext(CPP14Parser.QualifiedIdContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_idExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdExpression" ):
                listener.enterIdExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdExpression" ):
                listener.exitIdExpression(self)




    def idExpression(self):

        localctx = CPP14Parser.IdExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_idExpression)
        try:
            self.state = 399
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 397
                self.unqualifiedId()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 398
                self.qualifiedId()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnqualifiedIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def operatorFunctionId(self):
            return self.getTypedRuleContext(CPP14Parser.OperatorFunctionIdContext,0)


        def conversionFunctionId(self):
            return self.getTypedRuleContext(CPP14Parser.ConversionFunctionIdContext,0)


        def literalOperatorId(self):
            return self.getTypedRuleContext(CPP14Parser.LiteralOperatorIdContext,0)


        def Tilde(self):
            return self.getToken(CPP14Parser.Tilde, 0)

        def className(self):
            return self.getTypedRuleContext(CPP14Parser.ClassNameContext,0)


        def decltypeSpecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DecltypeSpecifierContext,0)


        def templateId(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateIdContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_unqualifiedId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualifiedId" ):
                listener.enterUnqualifiedId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualifiedId" ):
                listener.exitUnqualifiedId(self)




    def unqualifiedId(self):

        localctx = CPP14Parser.UnqualifiedIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_unqualifiedId)
        try:
            self.state = 411
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 401
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 402
                self.operatorFunctionId()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 403
                self.conversionFunctionId()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 404
                self.literalOperatorId()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 405
                self.match(CPP14Parser.Tilde)
                self.state = 408
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Identifier]:
                    self.state = 406
                    self.className()
                    pass
                elif token in [CPP14Parser.Decltype]:
                    self.state = 407
                    self.decltypeSpecifier()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 410
                self.templateId()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestedNameSpecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestedNameSpecifierContext,0)


        def unqualifiedId(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedIdContext,0)


        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_qualifiedId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedId" ):
                listener.enterQualifiedId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedId" ):
                listener.exitQualifiedId(self)




    def qualifiedId(self):

        localctx = CPP14Parser.QualifiedIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_qualifiedId)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 413
            self.nestedNameSpecifier(0)
            self.state = 415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Template:
                self.state = 414
                self.match(CPP14Parser.Template)


            self.state = 417
            self.unqualifiedId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedNameSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Doublecolon(self):
            return self.getToken(CPP14Parser.Doublecolon, 0)

        def theTypeName(self):
            return self.getTypedRuleContext(CPP14Parser.TheTypeNameContext,0)


        def namespaceName(self):
            return self.getTypedRuleContext(CPP14Parser.NamespaceNameContext,0)


        def decltypeSpecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DecltypeSpecifierContext,0)


        def nestedNameSpecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestedNameSpecifierContext,0)


        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def simpleTemplateId(self):
            return self.getTypedRuleContext(CPP14Parser.SimpleTemplateIdContext,0)


        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_nestedNameSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedNameSpecifier" ):
                listener.enterNestedNameSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedNameSpecifier" ):
                listener.exitNestedNameSpecifier(self)



    def nestedNameSpecifier(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NestedNameSpecifierContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 10
        self.enterRecursionRule(localctx, 10, self.RULE_nestedNameSpecifier, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 423
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 420
                self.theTypeName()

            elif la_ == 2:
                self.state = 421
                self.namespaceName()

            elif la_ == 3:
                self.state = 422
                self.decltypeSpecifier()


            self.state = 425
            self.match(CPP14Parser.Doublecolon)
            self._ctx.stop = self._input.LT(-1)
            self.state = 438
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.NestedNameSpecifierContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_nestedNameSpecifier)
                    self.state = 427
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 433
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                    if la_ == 1:
                        self.state = 428
                        self.match(CPP14Parser.Identifier)
                        pass

                    elif la_ == 2:
                        self.state = 430
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CPP14Parser.Template:
                            self.state = 429
                            self.match(CPP14Parser.Template)


                        self.state = 432
                        self.simpleTemplateId()
                        pass


                    self.state = 435
                    self.match(CPP14Parser.Doublecolon) 
                self.state = 440
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LambdaExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaIntroducer(self):
            return self.getTypedRuleContext(CPP14Parser.LambdaIntroducerContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(CPP14Parser.CompoundStatementContext,0)


        def lambdaDeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.LambdaDeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_lambdaExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaExpression" ):
                listener.enterLambdaExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaExpression" ):
                listener.exitLambdaExpression(self)




    def lambdaExpression(self):

        localctx = CPP14Parser.LambdaExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_lambdaExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 441
            self.lambdaIntroducer()
            self.state = 443
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.LeftParen:
                self.state = 442
                self.lambdaDeclarator()


            self.state = 445
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaIntroducerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBracket(self):
            return self.getToken(CPP14Parser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(CPP14Parser.RightBracket, 0)

        def lambdaCapture(self):
            return self.getTypedRuleContext(CPP14Parser.LambdaCaptureContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_lambdaIntroducer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaIntroducer" ):
                listener.enterLambdaIntroducer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaIntroducer" ):
                listener.exitLambdaIntroducer(self)




    def lambdaIntroducer(self):

        localctx = CPP14Parser.LambdaIntroducerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_lambdaIntroducer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 447
            self.match(CPP14Parser.LeftBracket)
            self.state = 449
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (CPP14Parser.This - 69)) | (1 << (CPP14Parser.And - 69)) | (1 << (CPP14Parser.Assign - 69)) | (1 << (CPP14Parser.Identifier - 69)))) != 0):
                self.state = 448
                self.lambdaCapture()


            self.state = 451
            self.match(CPP14Parser.RightBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaCaptureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def captureList(self):
            return self.getTypedRuleContext(CPP14Parser.CaptureListContext,0)


        def captureDefault(self):
            return self.getTypedRuleContext(CPP14Parser.CaptureDefaultContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_lambdaCapture

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaCapture" ):
                listener.enterLambdaCapture(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaCapture" ):
                listener.exitLambdaCapture(self)




    def lambdaCapture(self):

        localctx = CPP14Parser.LambdaCaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_lambdaCapture)
        self._la = 0 # Token type
        try:
            self.state = 459
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 453
                self.captureList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 454
                self.captureDefault()
                self.state = 457
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Comma:
                    self.state = 455
                    self.match(CPP14Parser.Comma)
                    self.state = 456
                    self.captureList()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaptureDefaultContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def And(self):
            return self.getToken(CPP14Parser.And, 0)

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_captureDefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaptureDefault" ):
                listener.enterCaptureDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaptureDefault" ):
                listener.exitCaptureDefault(self)




    def captureDefault(self):

        localctx = CPP14Parser.CaptureDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_captureDefault)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 461
            _la = self._input.LA(1)
            if not(_la==CPP14Parser.And or _la==CPP14Parser.Assign):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaptureListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def capture(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.CaptureContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.CaptureContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.Comma)
            else:
                return self.getToken(CPP14Parser.Comma, i)

        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_captureList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaptureList" ):
                listener.enterCaptureList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaptureList" ):
                listener.exitCaptureList(self)




    def captureList(self):

        localctx = CPP14Parser.CaptureListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_captureList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 463
            self.capture()
            self.state = 468
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CPP14Parser.Comma:
                self.state = 464
                self.match(CPP14Parser.Comma)
                self.state = 465
                self.capture()
                self.state = 470
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 472
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Ellipsis:
                self.state = 471
                self.match(CPP14Parser.Ellipsis)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaptureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleCapture(self):
            return self.getTypedRuleContext(CPP14Parser.SimpleCaptureContext,0)


        def initcapture(self):
            return self.getTypedRuleContext(CPP14Parser.InitcaptureContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_capture

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapture" ):
                listener.enterCapture(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapture" ):
                listener.exitCapture(self)




    def capture(self):

        localctx = CPP14Parser.CaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_capture)
        try:
            self.state = 476
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 474
                self.simpleCapture()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 475
                self.initcapture()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleCaptureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def And(self):
            return self.getToken(CPP14Parser.And, 0)

        def This(self):
            return self.getToken(CPP14Parser.This, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_simpleCapture

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleCapture" ):
                listener.enterSimpleCapture(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleCapture" ):
                listener.exitSimpleCapture(self)




    def simpleCapture(self):

        localctx = CPP14Parser.SimpleCaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_simpleCapture)
        self._la = 0 # Token type
        try:
            self.state = 483
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.And, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 479
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.And:
                    self.state = 478
                    self.match(CPP14Parser.And)


                self.state = 481
                self.match(CPP14Parser.Identifier)
                pass
            elif token in [CPP14Parser.This]:
                self.enterOuterAlt(localctx, 2)
                self.state = 482
                self.match(CPP14Parser.This)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitcaptureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def initializer(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerContext,0)


        def And(self):
            return self.getToken(CPP14Parser.And, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_initcapture

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitcapture" ):
                listener.enterInitcapture(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitcapture" ):
                listener.exitInitcapture(self)




    def initcapture(self):

        localctx = CPP14Parser.InitcaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_initcapture)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 486
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.And:
                self.state = 485
                self.match(CPP14Parser.And)


            self.state = 488
            self.match(CPP14Parser.Identifier)
            self.state = 489
            self.initializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def parameterDeclarationClause(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterDeclarationClauseContext,0)


        def Mutable(self):
            return self.getToken(CPP14Parser.Mutable, 0)

        def exceptionSpecification(self):
            return self.getTypedRuleContext(CPP14Parser.ExceptionSpecificationContext,0)


        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeSpecifierSeqContext,0)


        def trailingReturnType(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingReturnTypeContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_lambdaDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaDeclarator" ):
                listener.enterLambdaDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaDeclarator" ):
                listener.exitLambdaDeclarator(self)




    def lambdaDeclarator(self):

        localctx = CPP14Parser.LambdaDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_lambdaDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 491
            self.match(CPP14Parser.LeftParen)
            self.state = 493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & ((1 << (CPP14Parser.Alignas - 10)) | (1 << (CPP14Parser.Auto - 10)) | (1 << (CPP14Parser.Bool - 10)) | (1 << (CPP14Parser.Char - 10)) | (1 << (CPP14Parser.Char16 - 10)) | (1 << (CPP14Parser.Char32 - 10)) | (1 << (CPP14Parser.Class - 10)) | (1 << (CPP14Parser.Const - 10)) | (1 << (CPP14Parser.Constexpr - 10)) | (1 << (CPP14Parser.Decltype - 10)) | (1 << (CPP14Parser.Double - 10)) | (1 << (CPP14Parser.Enum - 10)) | (1 << (CPP14Parser.Explicit - 10)) | (1 << (CPP14Parser.Extern - 10)) | (1 << (CPP14Parser.Float - 10)) | (1 << (CPP14Parser.Friend - 10)) | (1 << (CPP14Parser.Inline - 10)) | (1 << (CPP14Parser.Int - 10)) | (1 << (CPP14Parser.Long - 10)) | (1 << (CPP14Parser.Mutable - 10)) | (1 << (CPP14Parser.Register - 10)) | (1 << (CPP14Parser.Short - 10)) | (1 << (CPP14Parser.Signed - 10)) | (1 << (CPP14Parser.Static - 10)) | (1 << (CPP14Parser.Struct - 10)) | (1 << (CPP14Parser.Thread_local - 10)))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (CPP14Parser.Typedef - 74)) | (1 << (CPP14Parser.Typename_ - 74)) | (1 << (CPP14Parser.Union - 74)) | (1 << (CPP14Parser.Unsigned - 74)) | (1 << (CPP14Parser.Virtual - 74)) | (1 << (CPP14Parser.Void - 74)) | (1 << (CPP14Parser.Volatile - 74)) | (1 << (CPP14Parser.Wchar - 74)) | (1 << (CPP14Parser.LeftBracket - 74)) | (1 << (CPP14Parser.Doublecolon - 74)) | (1 << (CPP14Parser.Identifier - 74)))) != 0):
                self.state = 492
                self.parameterDeclarationClause()


            self.state = 495
            self.match(CPP14Parser.RightParen)
            self.state = 497
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Mutable:
                self.state = 496
                self.match(CPP14Parser.Mutable)


            self.state = 500
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Noexcept or _la==CPP14Parser.Throw:
                self.state = 499
                self.exceptionSpecification()


            self.state = 503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                self.state = 502
                self.attributeSpecifierSeq()


            self.state = 506
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Arrow:
                self.state = 505
                self.trailingReturnType()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(CPP14Parser.PrimaryExpressionContext,0)


        def simpleTypeSpecifier(self):
            return self.getTypedRuleContext(CPP14Parser.SimpleTypeSpecifierContext,0)


        def typeNameSpecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TypeNameSpecifierContext,0)


        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def bracedInitList(self):
            return self.getTypedRuleContext(CPP14Parser.BracedInitListContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionListContext,0)


        def Less(self):
            return self.getToken(CPP14Parser.Less, 0)

        def theTypeId(self):
            return self.getTypedRuleContext(CPP14Parser.TheTypeIdContext,0)


        def Greater(self):
            return self.getToken(CPP14Parser.Greater, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def Dynamic_cast(self):
            return self.getToken(CPP14Parser.Dynamic_cast, 0)

        def Static_cast(self):
            return self.getToken(CPP14Parser.Static_cast, 0)

        def Reinterpret_cast(self):
            return self.getToken(CPP14Parser.Reinterpret_cast, 0)

        def Const_cast(self):
            return self.getToken(CPP14Parser.Const_cast, 0)

        def typeIdOfTheTypeId(self):
            return self.getTypedRuleContext(CPP14Parser.TypeIdOfTheTypeIdContext,0)


        def postfixExpression(self):
            return self.getTypedRuleContext(CPP14Parser.PostfixExpressionContext,0)


        def LeftBracket(self):
            return self.getToken(CPP14Parser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(CPP14Parser.RightBracket, 0)

        def Dot(self):
            return self.getToken(CPP14Parser.Dot, 0)

        def Arrow(self):
            return self.getToken(CPP14Parser.Arrow, 0)

        def idExpression(self):
            return self.getTypedRuleContext(CPP14Parser.IdExpressionContext,0)


        def pseudoDestructorName(self):
            return self.getTypedRuleContext(CPP14Parser.PseudoDestructorNameContext,0)


        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def PlusPlus(self):
            return self.getToken(CPP14Parser.PlusPlus, 0)

        def MinusMinus(self):
            return self.getToken(CPP14Parser.MinusMinus, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_postfixExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixExpression" ):
                listener.enterPostfixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixExpression" ):
                listener.exitPostfixExpression(self)



    def postfixExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.PostfixExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 30
        self.enterRecursionRule(localctx, 30, self.RULE_postfixExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 538
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 509
                self.primaryExpression()
                pass

            elif la_ == 2:
                self.state = 512
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Decltype, CPP14Parser.Double, CPP14Parser.Float, CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Unsigned, CPP14Parser.Void, CPP14Parser.Wchar, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                    self.state = 510
                    self.simpleTypeSpecifier()
                    pass
                elif token in [CPP14Parser.Typename_]:
                    self.state = 511
                    self.typeNameSpecifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 520
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.LeftParen]:
                    self.state = 514
                    self.match(CPP14Parser.LeftParen)
                    self.state = 516
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.IntegerLiteral) | (1 << CPP14Parser.CharacterLiteral) | (1 << CPP14Parser.FloatingLiteral) | (1 << CPP14Parser.StringLiteral) | (1 << CPP14Parser.BooleanLiteral) | (1 << CPP14Parser.PointerLiteral) | (1 << CPP14Parser.UserDefinedLiteral) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.Static_cast - 65)) | (1 << (CPP14Parser.This - 65)) | (1 << (CPP14Parser.Throw - 65)) | (1 << (CPP14Parser.Typeid_ - 65)) | (1 << (CPP14Parser.Typename_ - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.LeftBrace - 65)) | (1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)))) != 0) or _la==CPP14Parser.Identifier:
                        self.state = 515
                        self.expressionList()


                    self.state = 518
                    self.match(CPP14Parser.RightParen)
                    pass
                elif token in [CPP14Parser.LeftBrace]:
                    self.state = 519
                    self.bracedInitList()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 3:
                self.state = 522
                _la = self._input.LA(1)
                if not(((((_la - 24)) & ~0x3f) == 0 and ((1 << (_la - 24)) & ((1 << (CPP14Parser.Const_cast - 24)) | (1 << (CPP14Parser.Dynamic_cast - 24)) | (1 << (CPP14Parser.Reinterpret_cast - 24)) | (1 << (CPP14Parser.Static_cast - 24)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 523
                self.match(CPP14Parser.Less)
                self.state = 524
                self.theTypeId()
                self.state = 525
                self.match(CPP14Parser.Greater)
                self.state = 526
                self.match(CPP14Parser.LeftParen)
                self.state = 527
                self.expression()
                self.state = 528
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 4:
                self.state = 530
                self.typeIdOfTheTypeId()
                self.state = 531
                self.match(CPP14Parser.LeftParen)
                self.state = 534
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                if la_ == 1:
                    self.state = 532
                    self.expression()
                    pass

                elif la_ == 2:
                    self.state = 533
                    self.theTypeId()
                    pass


                self.state = 536
                self.match(CPP14Parser.RightParen)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 567
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 565
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.PostfixExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 540
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 541
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 544
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [CPP14Parser.IntegerLiteral, CPP14Parser.CharacterLiteral, CPP14Parser.FloatingLiteral, CPP14Parser.StringLiteral, CPP14Parser.BooleanLiteral, CPP14Parser.PointerLiteral, CPP14Parser.UserDefinedLiteral, CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Const_cast, CPP14Parser.Decltype, CPP14Parser.Delete, CPP14Parser.Double, CPP14Parser.Dynamic_cast, CPP14Parser.Float, CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.New, CPP14Parser.Noexcept, CPP14Parser.Operator, CPP14Parser.Reinterpret_cast, CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Sizeof, CPP14Parser.Static_cast, CPP14Parser.This, CPP14Parser.Throw, CPP14Parser.Typeid_, CPP14Parser.Typename_, CPP14Parser.Unsigned, CPP14Parser.Void, CPP14Parser.Wchar, CPP14Parser.LeftParen, CPP14Parser.LeftBracket, CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                            self.state = 542
                            self.expression()
                            pass
                        elif token in [CPP14Parser.LeftBrace]:
                            self.state = 543
                            self.bracedInitList()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 546
                        self.match(CPP14Parser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.PostfixExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 548
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 549
                        self.match(CPP14Parser.LeftParen)
                        self.state = 551
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.IntegerLiteral) | (1 << CPP14Parser.CharacterLiteral) | (1 << CPP14Parser.FloatingLiteral) | (1 << CPP14Parser.StringLiteral) | (1 << CPP14Parser.BooleanLiteral) | (1 << CPP14Parser.PointerLiteral) | (1 << CPP14Parser.UserDefinedLiteral) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.Static_cast - 65)) | (1 << (CPP14Parser.This - 65)) | (1 << (CPP14Parser.Throw - 65)) | (1 << (CPP14Parser.Typeid_ - 65)) | (1 << (CPP14Parser.Typename_ - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.LeftBrace - 65)) | (1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)))) != 0) or _la==CPP14Parser.Identifier:
                            self.state = 550
                            self.expressionList()


                        self.state = 553
                        self.match(CPP14Parser.RightParen)
                        pass

                    elif la_ == 3:
                        localctx = CPP14Parser.PostfixExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 554
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 555
                        _la = self._input.LA(1)
                        if not(_la==CPP14Parser.Arrow or _la==CPP14Parser.Dot):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 561
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
                        if la_ == 1:
                            self.state = 557
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==CPP14Parser.Template:
                                self.state = 556
                                self.match(CPP14Parser.Template)


                            self.state = 559
                            self.idExpression()
                            pass

                        elif la_ == 2:
                            self.state = 560
                            self.pseudoDestructorName()
                            pass


                        pass

                    elif la_ == 4:
                        localctx = CPP14Parser.PostfixExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 563
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 564
                        _la = self._input.LA(1)
                        if not(_la==CPP14Parser.PlusPlus or _la==CPP14Parser.MinusMinus):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

             
                self.state = 569
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TypeIdOfTheTypeIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Typeid_(self):
            return self.getToken(CPP14Parser.Typeid_, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_typeIdOfTheTypeId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeIdOfTheTypeId" ):
                listener.enterTypeIdOfTheTypeId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeIdOfTheTypeId" ):
                listener.exitTypeIdOfTheTypeId(self)




    def typeIdOfTheTypeId(self):

        localctx = CPP14Parser.TypeIdOfTheTypeIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_typeIdOfTheTypeId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 570
            self.match(CPP14Parser.Typeid_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializerList(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerListContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)




    def expressionList(self):

        localctx = CPP14Parser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_expressionList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 572
            self.initializerList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PseudoDestructorNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Tilde(self):
            return self.getToken(CPP14Parser.Tilde, 0)

        def theTypeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TheTypeNameContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TheTypeNameContext,i)


        def nestedNameSpecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestedNameSpecifierContext,0)


        def Doublecolon(self):
            return self.getToken(CPP14Parser.Doublecolon, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def simpleTemplateId(self):
            return self.getTypedRuleContext(CPP14Parser.SimpleTemplateIdContext,0)


        def decltypeSpecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DecltypeSpecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_pseudoDestructorName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPseudoDestructorName" ):
                listener.enterPseudoDestructorName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPseudoDestructorName" ):
                listener.exitPseudoDestructorName(self)




    def pseudoDestructorName(self):

        localctx = CPP14Parser.PseudoDestructorNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_pseudoDestructorName)
        self._la = 0 # Token type
        try:
            self.state = 593
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 575
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
                if la_ == 1:
                    self.state = 574
                    self.nestedNameSpecifier(0)


                self.state = 580
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Identifier:
                    self.state = 577
                    self.theTypeName()
                    self.state = 578
                    self.match(CPP14Parser.Doublecolon)


                self.state = 582
                self.match(CPP14Parser.Tilde)
                self.state = 583
                self.theTypeName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 584
                self.nestedNameSpecifier(0)
                self.state = 585
                self.match(CPP14Parser.Template)
                self.state = 586
                self.simpleTemplateId()
                self.state = 587
                self.match(CPP14Parser.Doublecolon)
                self.state = 588
                self.match(CPP14Parser.Tilde)
                self.state = 589
                self.theTypeName()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 591
                self.match(CPP14Parser.Tilde)
                self.state = 592
                self.decltypeSpecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExpression(self):
            return self.getTypedRuleContext(CPP14Parser.PostfixExpressionContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryExpressionContext,0)


        def PlusPlus(self):
            return self.getToken(CPP14Parser.PlusPlus, 0)

        def MinusMinus(self):
            return self.getToken(CPP14Parser.MinusMinus, 0)

        def unaryOperator(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryOperatorContext,0)


        def Sizeof(self):
            return self.getToken(CPP14Parser.Sizeof, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def theTypeId(self):
            return self.getTypedRuleContext(CPP14Parser.TheTypeIdContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Alignof(self):
            return self.getToken(CPP14Parser.Alignof, 0)

        def noExceptExpression(self):
            return self.getTypedRuleContext(CPP14Parser.NoExceptExpressionContext,0)


        def newExpression(self):
            return self.getTypedRuleContext(CPP14Parser.NewExpressionContext,0)


        def deleteExpression(self):
            return self.getTypedRuleContext(CPP14Parser.DeleteExpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_unaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpression" ):
                listener.enterUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpression" ):
                listener.exitUnaryExpression(self)




    def unaryExpression(self):

        localctx = CPP14Parser.UnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_unaryExpression)
        try:
            self.state = 622
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 595
                self.postfixExpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 600
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.PlusPlus]:
                    self.state = 596
                    self.match(CPP14Parser.PlusPlus)
                    pass
                elif token in [CPP14Parser.MinusMinus]:
                    self.state = 597
                    self.match(CPP14Parser.MinusMinus)
                    pass
                elif token in [CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not]:
                    self.state = 598
                    self.unaryOperator()
                    pass
                elif token in [CPP14Parser.Sizeof]:
                    self.state = 599
                    self.match(CPP14Parser.Sizeof)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 602
                self.unaryExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 603
                self.match(CPP14Parser.Sizeof)
                self.state = 612
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.LeftParen]:
                    self.state = 604
                    self.match(CPP14Parser.LeftParen)
                    self.state = 605
                    self.theTypeId()
                    self.state = 606
                    self.match(CPP14Parser.RightParen)
                    pass
                elif token in [CPP14Parser.Ellipsis]:
                    self.state = 608
                    self.match(CPP14Parser.Ellipsis)
                    self.state = 609
                    self.match(CPP14Parser.LeftParen)
                    self.state = 610
                    self.match(CPP14Parser.Identifier)
                    self.state = 611
                    self.match(CPP14Parser.RightParen)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 614
                self.match(CPP14Parser.Alignof)
                self.state = 615
                self.match(CPP14Parser.LeftParen)
                self.state = 616
                self.theTypeId()
                self.state = 617
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 619
                self.noExceptExpression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 620
                self.newExpression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 621
                self.deleteExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Or(self):
            return self.getToken(CPP14Parser.Or, 0)

        def Star(self):
            return self.getToken(CPP14Parser.Star, 0)

        def And(self):
            return self.getToken(CPP14Parser.And, 0)

        def Plus(self):
            return self.getToken(CPP14Parser.Plus, 0)

        def Tilde(self):
            return self.getToken(CPP14Parser.Tilde, 0)

        def Minus(self):
            return self.getToken(CPP14Parser.Minus, 0)

        def Not(self):
            return self.getToken(CPP14Parser.Not, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_unaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOperator" ):
                listener.enterUnaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOperator" ):
                listener.exitUnaryOperator(self)




    def unaryOperator(self):

        localctx = CPP14Parser.UnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_unaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 624
            _la = self._input.LA(1)
            if not(((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & ((1 << (CPP14Parser.Plus - 91)) | (1 << (CPP14Parser.Minus - 91)) | (1 << (CPP14Parser.Star - 91)) | (1 << (CPP14Parser.And - 91)) | (1 << (CPP14Parser.Or - 91)) | (1 << (CPP14Parser.Tilde - 91)) | (1 << (CPP14Parser.Not - 91)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def New(self):
            return self.getToken(CPP14Parser.New, 0)

        def newTypeId(self):
            return self.getTypedRuleContext(CPP14Parser.NewTypeIdContext,0)


        def Doublecolon(self):
            return self.getToken(CPP14Parser.Doublecolon, 0)

        def newPlacement(self):
            return self.getTypedRuleContext(CPP14Parser.NewPlacementContext,0)


        def newInitializer(self):
            return self.getTypedRuleContext(CPP14Parser.NewInitializerContext,0)


        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def theTypeId(self):
            return self.getTypedRuleContext(CPP14Parser.TheTypeIdContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_newExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewExpression" ):
                listener.enterNewExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewExpression" ):
                listener.exitNewExpression(self)




    def newExpression(self):

        localctx = CPP14Parser.NewExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_newExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 627
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Doublecolon:
                self.state = 626
                self.match(CPP14Parser.Doublecolon)


            self.state = 629
            self.match(CPP14Parser.New)
            self.state = 631
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.state = 630
                self.newPlacement()


            self.state = 638
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Class, CPP14Parser.Const, CPP14Parser.Decltype, CPP14Parser.Double, CPP14Parser.Enum, CPP14Parser.Float, CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Struct, CPP14Parser.Typename_, CPP14Parser.Union, CPP14Parser.Unsigned, CPP14Parser.Void, CPP14Parser.Volatile, CPP14Parser.Wchar, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.state = 633
                self.newTypeId()
                pass
            elif token in [CPP14Parser.LeftParen]:
                self.state = 634
                self.match(CPP14Parser.LeftParen)
                self.state = 635
                self.theTypeId()
                self.state = 636
                self.match(CPP14Parser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.LeftParen or _la==CPP14Parser.LeftBrace:
                self.state = 640
                self.newInitializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewPlacementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def expressionList(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionListContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_newPlacement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewPlacement" ):
                listener.enterNewPlacement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewPlacement" ):
                listener.exitNewPlacement(self)




    def newPlacement(self):

        localctx = CPP14Parser.NewPlacementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_newPlacement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 643
            self.match(CPP14Parser.LeftParen)
            self.state = 644
            self.expressionList()
            self.state = 645
            self.match(CPP14Parser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewTypeIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSpecifierSeq(self):
            return self.getTypedRuleContext(CPP14Parser.TypeSpecifierSeqContext,0)


        def newDeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NewDeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_newTypeId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewTypeId" ):
                listener.enterNewTypeId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewTypeId" ):
                listener.exitNewTypeId(self)




    def newTypeId(self):

        localctx = CPP14Parser.NewTypeIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_newTypeId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self.typeSpecifierSeq()
            self.state = 649
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 648
                self.newDeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pointerOperator(self):
            return self.getTypedRuleContext(CPP14Parser.PointerOperatorContext,0)


        def newDeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NewDeclaratorContext,0)


        def noPointerNewDeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoPointerNewDeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_newDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewDeclarator" ):
                listener.enterNewDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewDeclarator" ):
                listener.exitNewDeclarator(self)




    def newDeclarator(self):

        localctx = CPP14Parser.NewDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_newDeclarator)
        try:
            self.state = 656
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.AndAnd, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 651
                self.pointerOperator()
                self.state = 653
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                if la_ == 1:
                    self.state = 652
                    self.newDeclarator()


                pass
            elif token in [CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 655
                self.noPointerNewDeclarator(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoPointerNewDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBracket(self):
            return self.getToken(CPP14Parser.LeftBracket, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def RightBracket(self):
            return self.getToken(CPP14Parser.RightBracket, 0)

        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeSpecifierSeqContext,0)


        def noPointerNewDeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoPointerNewDeclaratorContext,0)


        def constantExpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_noPointerNewDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoPointerNewDeclarator" ):
                listener.enterNoPointerNewDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoPointerNewDeclarator" ):
                listener.exitNoPointerNewDeclarator(self)



    def noPointerNewDeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoPointerNewDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 50
        self.enterRecursionRule(localctx, 50, self.RULE_noPointerNewDeclarator, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 659
            self.match(CPP14Parser.LeftBracket)
            self.state = 660
            self.expression()
            self.state = 661
            self.match(CPP14Parser.RightBracket)
            self.state = 663
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.state = 662
                self.attributeSpecifierSeq()


            self._ctx.stop = self._input.LT(-1)
            self.state = 674
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.NoPointerNewDeclaratorContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_noPointerNewDeclarator)
                    self.state = 665
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 666
                    self.match(CPP14Parser.LeftBracket)
                    self.state = 667
                    self.constantExpression()
                    self.state = 668
                    self.match(CPP14Parser.RightBracket)
                    self.state = 670
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                    if la_ == 1:
                        self.state = 669
                        self.attributeSpecifierSeq()

             
                self.state = 676
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NewInitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def expressionList(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionListContext,0)


        def bracedInitList(self):
            return self.getTypedRuleContext(CPP14Parser.BracedInitListContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_newInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewInitializer" ):
                listener.enterNewInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewInitializer" ):
                listener.exitNewInitializer(self)




    def newInitializer(self):

        localctx = CPP14Parser.NewInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_newInitializer)
        self._la = 0 # Token type
        try:
            self.state = 683
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftParen]:
                self.enterOuterAlt(localctx, 1)
                self.state = 677
                self.match(CPP14Parser.LeftParen)
                self.state = 679
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.IntegerLiteral) | (1 << CPP14Parser.CharacterLiteral) | (1 << CPP14Parser.FloatingLiteral) | (1 << CPP14Parser.StringLiteral) | (1 << CPP14Parser.BooleanLiteral) | (1 << CPP14Parser.PointerLiteral) | (1 << CPP14Parser.UserDefinedLiteral) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.Static_cast - 65)) | (1 << (CPP14Parser.This - 65)) | (1 << (CPP14Parser.Throw - 65)) | (1 << (CPP14Parser.Typeid_ - 65)) | (1 << (CPP14Parser.Typename_ - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.LeftBrace - 65)) | (1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)))) != 0) or _la==CPP14Parser.Identifier:
                    self.state = 678
                    self.expressionList()


                self.state = 681
                self.match(CPP14Parser.RightParen)
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 682
                self.bracedInitList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeleteExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Delete(self):
            return self.getToken(CPP14Parser.Delete, 0)

        def castExpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastExpressionContext,0)


        def Doublecolon(self):
            return self.getToken(CPP14Parser.Doublecolon, 0)

        def LeftBracket(self):
            return self.getToken(CPP14Parser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(CPP14Parser.RightBracket, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_deleteExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteExpression" ):
                listener.enterDeleteExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteExpression" ):
                listener.exitDeleteExpression(self)




    def deleteExpression(self):

        localctx = CPP14Parser.DeleteExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_deleteExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 686
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Doublecolon:
                self.state = 685
                self.match(CPP14Parser.Doublecolon)


            self.state = 688
            self.match(CPP14Parser.Delete)
            self.state = 691
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.state = 689
                self.match(CPP14Parser.LeftBracket)
                self.state = 690
                self.match(CPP14Parser.RightBracket)


            self.state = 693
            self.castExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoExceptExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noexcept(self):
            return self.getToken(CPP14Parser.Noexcept, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_noExceptExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoExceptExpression" ):
                listener.enterNoExceptExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoExceptExpression" ):
                listener.exitNoExceptExpression(self)




    def noExceptExpression(self):

        localctx = CPP14Parser.NoExceptExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_noExceptExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            self.match(CPP14Parser.Noexcept)
            self.state = 696
            self.match(CPP14Parser.LeftParen)
            self.state = 697
            self.expression()
            self.state = 698
            self.match(CPP14Parser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unaryExpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryExpressionContext,0)


        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def theTypeId(self):
            return self.getTypedRuleContext(CPP14Parser.TheTypeIdContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def castExpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastExpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_castExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpression" ):
                listener.enterCastExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpression" ):
                listener.exitCastExpression(self)




    def castExpression(self):

        localctx = CPP14Parser.CastExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_castExpression)
        try:
            self.state = 706
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 700
                self.unaryExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 701
                self.match(CPP14Parser.LeftParen)
                self.state = 702
                self.theTypeId()
                self.state = 703
                self.match(CPP14Parser.RightParen)
                self.state = 704
                self.castExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerMemberExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def castExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.CastExpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.CastExpressionContext,i)


        def DotStar(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.DotStar)
            else:
                return self.getToken(CPP14Parser.DotStar, i)

        def ArrowStar(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.ArrowStar)
            else:
                return self.getToken(CPP14Parser.ArrowStar, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_pointerMemberExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointerMemberExpression" ):
                listener.enterPointerMemberExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointerMemberExpression" ):
                listener.exitPointerMemberExpression(self)




    def pointerMemberExpression(self):

        localctx = CPP14Parser.PointerMemberExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_pointerMemberExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 708
            self.castExpression()
            self.state = 713
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CPP14Parser.ArrowStar or _la==CPP14Parser.DotStar:
                self.state = 709
                _la = self._input.LA(1)
                if not(_la==CPP14Parser.ArrowStar or _la==CPP14Parser.DotStar):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 710
                self.castExpression()
                self.state = 715
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplicativeExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pointerMemberExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.PointerMemberExpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.PointerMemberExpressionContext,i)


        def Star(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.Star)
            else:
                return self.getToken(CPP14Parser.Star, i)

        def Div(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.Div)
            else:
                return self.getToken(CPP14Parser.Div, i)

        def Mod(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.Mod)
            else:
                return self.getToken(CPP14Parser.Mod, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_multiplicativeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)




    def multiplicativeExpression(self):

        localctx = CPP14Parser.MultiplicativeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_multiplicativeExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 716
            self.pointerMemberExpression()
            self.state = 721
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (CPP14Parser.Star - 93)) | (1 << (CPP14Parser.Div - 93)) | (1 << (CPP14Parser.Mod - 93)))) != 0):
                self.state = 717
                _la = self._input.LA(1)
                if not(((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (CPP14Parser.Star - 93)) | (1 << (CPP14Parser.Div - 93)) | (1 << (CPP14Parser.Mod - 93)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 718
                self.pointerMemberExpression()
                self.state = 723
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.MultiplicativeExpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.MultiplicativeExpressionContext,i)


        def Plus(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.Plus)
            else:
                return self.getToken(CPP14Parser.Plus, i)

        def Minus(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.Minus)
            else:
                return self.getToken(CPP14Parser.Minus, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_additiveExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)




    def additiveExpression(self):

        localctx = CPP14Parser.AdditiveExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_additiveExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            self.multiplicativeExpression()
            self.state = 729
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CPP14Parser.Plus or _la==CPP14Parser.Minus:
                self.state = 725
                _la = self._input.LA(1)
                if not(_la==CPP14Parser.Plus or _la==CPP14Parser.Minus):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 726
                self.multiplicativeExpression()
                self.state = 731
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShiftExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AdditiveExpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AdditiveExpressionContext,i)


        def shiftOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.ShiftOperatorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.ShiftOperatorContext,i)


        def getRuleIndex(self):
            return CPP14Parser.RULE_shiftExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftExpression" ):
                listener.enterShiftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftExpression" ):
                listener.exitShiftExpression(self)




    def shiftExpression(self):

        localctx = CPP14Parser.ShiftExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_shiftExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 732
            self.additiveExpression()
            self.state = 738
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,61,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 733
                    self.shiftOperator()
                    self.state = 734
                    self.additiveExpression() 
                self.state = 740
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,61,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShiftOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Greater(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.Greater)
            else:
                return self.getToken(CPP14Parser.Greater, i)

        def Less(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.Less)
            else:
                return self.getToken(CPP14Parser.Less, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_shiftOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftOperator" ):
                listener.enterShiftOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftOperator" ):
                listener.exitShiftOperator(self)




    def shiftOperator(self):

        localctx = CPP14Parser.ShiftOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_shiftOperator)
        try:
            self.state = 745
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Greater]:
                self.enterOuterAlt(localctx, 1)
                self.state = 741
                self.match(CPP14Parser.Greater)
                self.state = 742
                self.match(CPP14Parser.Greater)
                pass
            elif token in [CPP14Parser.Less]:
                self.enterOuterAlt(localctx, 2)
                self.state = 743
                self.match(CPP14Parser.Less)
                self.state = 744
                self.match(CPP14Parser.Less)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationalExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shiftExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.ShiftExpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.ShiftExpressionContext,i)


        def Less(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.Less)
            else:
                return self.getToken(CPP14Parser.Less, i)

        def Greater(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.Greater)
            else:
                return self.getToken(CPP14Parser.Greater, i)

        def LessEqual(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.LessEqual)
            else:
                return self.getToken(CPP14Parser.LessEqual, i)

        def GreaterEqual(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.GreaterEqual)
            else:
                return self.getToken(CPP14Parser.GreaterEqual, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_relationalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalExpression" ):
                listener.enterRelationalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalExpression" ):
                listener.exitRelationalExpression(self)




    def relationalExpression(self):

        localctx = CPP14Parser.RelationalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_relationalExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 747
            self.shiftExpression()
            self.state = 752
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,63,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 748
                    _la = self._input.LA(1)
                    if not(((((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & ((1 << (CPP14Parser.Less - 102)) | (1 << (CPP14Parser.Greater - 102)) | (1 << (CPP14Parser.LessEqual - 102)) | (1 << (CPP14Parser.GreaterEqual - 102)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 749
                    self.shiftExpression() 
                self.state = 754
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,63,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualityExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.RelationalExpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.RelationalExpressionContext,i)


        def Equal(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.Equal)
            else:
                return self.getToken(CPP14Parser.Equal, i)

        def NotEqual(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.NotEqual)
            else:
                return self.getToken(CPP14Parser.NotEqual, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_equalityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityExpression" ):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityExpression" ):
                listener.exitEqualityExpression(self)




    def equalityExpression(self):

        localctx = CPP14Parser.EqualityExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_equalityExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 755
            self.relationalExpression()
            self.state = 760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CPP14Parser.Equal or _la==CPP14Parser.NotEqual:
                self.state = 756
                _la = self._input.LA(1)
                if not(_la==CPP14Parser.Equal or _la==CPP14Parser.NotEqual):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 757
                self.relationalExpression()
                self.state = 762
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AndExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.EqualityExpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.EqualityExpressionContext,i)


        def And(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.And)
            else:
                return self.getToken(CPP14Parser.And, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_andExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndExpression" ):
                listener.enterAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndExpression" ):
                listener.exitAndExpression(self)




    def andExpression(self):

        localctx = CPP14Parser.AndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_andExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 763
            self.equalityExpression()
            self.state = 768
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CPP14Parser.And:
                self.state = 764
                self.match(CPP14Parser.And)
                self.state = 765
                self.equalityExpression()
                self.state = 770
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExclusiveOrExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AndExpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AndExpressionContext,i)


        def Caret(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.Caret)
            else:
                return self.getToken(CPP14Parser.Caret, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_exclusiveOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusiveOrExpression" ):
                listener.enterExclusiveOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusiveOrExpression" ):
                listener.exitExclusiveOrExpression(self)




    def exclusiveOrExpression(self):

        localctx = CPP14Parser.ExclusiveOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_exclusiveOrExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 771
            self.andExpression()
            self.state = 776
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CPP14Parser.Caret:
                self.state = 772
                self.match(CPP14Parser.Caret)
                self.state = 773
                self.andExpression()
                self.state = 778
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InclusiveOrExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exclusiveOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.ExclusiveOrExpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.ExclusiveOrExpressionContext,i)


        def Or(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.Or)
            else:
                return self.getToken(CPP14Parser.Or, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_inclusiveOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclusiveOrExpression" ):
                listener.enterInclusiveOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclusiveOrExpression" ):
                listener.exitInclusiveOrExpression(self)




    def inclusiveOrExpression(self):

        localctx = CPP14Parser.InclusiveOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_inclusiveOrExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self.exclusiveOrExpression()
            self.state = 784
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CPP14Parser.Or:
                self.state = 780
                self.match(CPP14Parser.Or)
                self.state = 781
                self.exclusiveOrExpression()
                self.state = 786
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalAndExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inclusiveOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.InclusiveOrExpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.InclusiveOrExpressionContext,i)


        def AndAnd(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.AndAnd)
            else:
                return self.getToken(CPP14Parser.AndAnd, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_logicalAndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAndExpression" ):
                listener.enterLogicalAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAndExpression" ):
                listener.exitLogicalAndExpression(self)




    def logicalAndExpression(self):

        localctx = CPP14Parser.LogicalAndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_logicalAndExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 787
            self.inclusiveOrExpression()
            self.state = 792
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CPP14Parser.AndAnd:
                self.state = 788
                self.match(CPP14Parser.AndAnd)
                self.state = 789
                self.inclusiveOrExpression()
                self.state = 794
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalOrExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalAndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.LogicalAndExpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.LogicalAndExpressionContext,i)


        def OrOr(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.OrOr)
            else:
                return self.getToken(CPP14Parser.OrOr, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_logicalOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOrExpression" ):
                listener.enterLogicalOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOrExpression" ):
                listener.exitLogicalOrExpression(self)




    def logicalOrExpression(self):

        localctx = CPP14Parser.LogicalOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_logicalOrExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            self.logicalAndExpression()
            self.state = 800
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CPP14Parser.OrOr:
                self.state = 796
                self.match(CPP14Parser.OrOr)
                self.state = 797
                self.logicalAndExpression()
                self.state = 802
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionalExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalOrExpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalOrExpressionContext,0)


        def Question(self):
            return self.getToken(CPP14Parser.Question, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def Colon(self):
            return self.getToken(CPP14Parser.Colon, 0)

        def assignmentExpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentExpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_conditionalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalExpression" ):
                listener.enterConditionalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalExpression" ):
                listener.exitConditionalExpression(self)




    def conditionalExpression(self):

        localctx = CPP14Parser.ConditionalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_conditionalExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 803
            self.logicalOrExpression()
            self.state = 809
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Question:
                self.state = 804
                self.match(CPP14Parser.Question)
                self.state = 805
                self.expression()
                self.state = 806
                self.match(CPP14Parser.Colon)
                self.state = 807
                self.assignmentExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionalExpressionContext,0)


        def logicalOrExpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalOrExpressionContext,0)


        def assignmentOperator(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentOperatorContext,0)


        def initializerClause(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerClauseContext,0)


        def throwExpression(self):
            return self.getTypedRuleContext(CPP14Parser.ThrowExpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_assignmentExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentExpression" ):
                listener.enterAssignmentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentExpression" ):
                listener.exitAssignmentExpression(self)




    def assignmentExpression(self):

        localctx = CPP14Parser.AssignmentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_assignmentExpression)
        try:
            self.state = 817
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 811
                self.conditionalExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 812
                self.logicalOrExpression()
                self.state = 813
                self.assignmentOperator()
                self.state = 814
                self.initializerClause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 816
                self.throwExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def StarAssign(self):
            return self.getToken(CPP14Parser.StarAssign, 0)

        def DivAssign(self):
            return self.getToken(CPP14Parser.DivAssign, 0)

        def ModAssign(self):
            return self.getToken(CPP14Parser.ModAssign, 0)

        def PlusAssign(self):
            return self.getToken(CPP14Parser.PlusAssign, 0)

        def MinusAssign(self):
            return self.getToken(CPP14Parser.MinusAssign, 0)

        def RightShiftAssign(self):
            return self.getToken(CPP14Parser.RightShiftAssign, 0)

        def LeftShiftAssign(self):
            return self.getToken(CPP14Parser.LeftShiftAssign, 0)

        def AndAssign(self):
            return self.getToken(CPP14Parser.AndAssign, 0)

        def XorAssign(self):
            return self.getToken(CPP14Parser.XorAssign, 0)

        def OrAssign(self):
            return self.getToken(CPP14Parser.OrAssign, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_assignmentOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperator" ):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperator" ):
                listener.exitAssignmentOperator(self)




    def assignmentOperator(self):

        localctx = CPP14Parser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 819
            _la = self._input.LA(1)
            if not(((((_la - 101)) & ~0x3f) == 0 and ((1 << (_la - 101)) & ((1 << (CPP14Parser.Assign - 101)) | (1 << (CPP14Parser.PlusAssign - 101)) | (1 << (CPP14Parser.MinusAssign - 101)) | (1 << (CPP14Parser.StarAssign - 101)) | (1 << (CPP14Parser.DivAssign - 101)) | (1 << (CPP14Parser.ModAssign - 101)) | (1 << (CPP14Parser.XorAssign - 101)) | (1 << (CPP14Parser.AndAssign - 101)) | (1 << (CPP14Parser.OrAssign - 101)) | (1 << (CPP14Parser.LeftShiftAssign - 101)) | (1 << (CPP14Parser.RightShiftAssign - 101)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.Comma)
            else:
                return self.getToken(CPP14Parser.Comma, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = CPP14Parser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 821
            self.assignmentExpression()
            self.state = 826
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CPP14Parser.Comma:
                self.state = 822
                self.match(CPP14Parser.Comma)
                self.state = 823
                self.assignmentExpression()
                self.state = 828
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionalExpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_constantExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantExpression" ):
                listener.enterConstantExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantExpression" ):
                listener.exitConstantExpression(self)




    def constantExpression(self):

        localctx = CPP14Parser.ConstantExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_constantExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 829
            self.conditionalExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labeledStatement(self):
            return self.getTypedRuleContext(CPP14Parser.LabeledStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionStatementContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(CPP14Parser.CompoundStatementContext,0)


        def selectionStatement(self):
            return self.getTypedRuleContext(CPP14Parser.SelectionStatementContext,0)


        def iterationStatement(self):
            return self.getTypedRuleContext(CPP14Parser.IterationStatementContext,0)


        def jumpStatement(self):
            return self.getTypedRuleContext(CPP14Parser.JumpStatementContext,0)


        def tryBlock(self):
            return self.getTypedRuleContext(CPP14Parser.TryBlockContext,0)


        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeSpecifierSeqContext,0)


        def declarationStatement(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationStatementContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = CPP14Parser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_statement)
        try:
            self.state = 844
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 831
                self.labeledStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 833
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
                if la_ == 1:
                    self.state = 832
                    self.attributeSpecifierSeq()


                self.state = 841
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.IntegerLiteral, CPP14Parser.CharacterLiteral, CPP14Parser.FloatingLiteral, CPP14Parser.StringLiteral, CPP14Parser.BooleanLiteral, CPP14Parser.PointerLiteral, CPP14Parser.UserDefinedLiteral, CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Const_cast, CPP14Parser.Decltype, CPP14Parser.Delete, CPP14Parser.Double, CPP14Parser.Dynamic_cast, CPP14Parser.Float, CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.New, CPP14Parser.Noexcept, CPP14Parser.Operator, CPP14Parser.Reinterpret_cast, CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Sizeof, CPP14Parser.Static_cast, CPP14Parser.This, CPP14Parser.Throw, CPP14Parser.Typeid_, CPP14Parser.Typename_, CPP14Parser.Unsigned, CPP14Parser.Void, CPP14Parser.Wchar, CPP14Parser.LeftParen, CPP14Parser.LeftBracket, CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon, CPP14Parser.Semi, CPP14Parser.Identifier]:
                    self.state = 835
                    self.expressionStatement()
                    pass
                elif token in [CPP14Parser.LeftBrace]:
                    self.state = 836
                    self.compoundStatement()
                    pass
                elif token in [CPP14Parser.If, CPP14Parser.Switch]:
                    self.state = 837
                    self.selectionStatement()
                    pass
                elif token in [CPP14Parser.Do, CPP14Parser.For, CPP14Parser.While]:
                    self.state = 838
                    self.iterationStatement()
                    pass
                elif token in [CPP14Parser.Break, CPP14Parser.Continue, CPP14Parser.Goto, CPP14Parser.Return]:
                    self.state = 839
                    self.jumpStatement()
                    pass
                elif token in [CPP14Parser.Try]:
                    self.state = 840
                    self.tryBlock()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 843
                self.declarationStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(CPP14Parser.Colon, 0)

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext,0)


        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Case(self):
            return self.getToken(CPP14Parser.Case, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantExpressionContext,0)


        def Default(self):
            return self.getToken(CPP14Parser.Default, 0)

        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeSpecifierSeqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_labeledStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledStatement" ):
                listener.enterLabeledStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledStatement" ):
                listener.exitLabeledStatement(self)




    def labeledStatement(self):

        localctx = CPP14Parser.LabeledStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_labeledStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 847
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                self.state = 846
                self.attributeSpecifierSeq()


            self.state = 853
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Identifier]:
                self.state = 849
                self.match(CPP14Parser.Identifier)
                pass
            elif token in [CPP14Parser.Case]:
                self.state = 850
                self.match(CPP14Parser.Case)
                self.state = 851
                self.constantExpression()
                pass
            elif token in [CPP14Parser.Default]:
                self.state = 852
                self.match(CPP14Parser.Default)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 855
            self.match(CPP14Parser.Colon)
            self.state = 856
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)




    def expressionStatement(self):

        localctx = CPP14Parser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_expressionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.IntegerLiteral) | (1 << CPP14Parser.CharacterLiteral) | (1 << CPP14Parser.FloatingLiteral) | (1 << CPP14Parser.StringLiteral) | (1 << CPP14Parser.BooleanLiteral) | (1 << CPP14Parser.PointerLiteral) | (1 << CPP14Parser.UserDefinedLiteral) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.Static_cast - 65)) | (1 << (CPP14Parser.This - 65)) | (1 << (CPP14Parser.Throw - 65)) | (1 << (CPP14Parser.Typeid_ - 65)) | (1 << (CPP14Parser.Typename_ - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)))) != 0) or _la==CPP14Parser.Identifier:
                self.state = 858
                self.expression()


            self.state = 861
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBrace(self):
            return self.getToken(CPP14Parser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(CPP14Parser.RightBrace, 0)

        def statementSeq(self):
            return self.getTypedRuleContext(CPP14Parser.StatementSeqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_compoundStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundStatement" ):
                listener.enterCompoundStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundStatement" ):
                listener.exitCompoundStatement(self)




    def compoundStatement(self):

        localctx = CPP14Parser.CompoundStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_compoundStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 863
            self.match(CPP14Parser.LeftBrace)
            self.state = 865
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.IntegerLiteral) | (1 << CPP14Parser.CharacterLiteral) | (1 << CPP14Parser.FloatingLiteral) | (1 << CPP14Parser.StringLiteral) | (1 << CPP14Parser.BooleanLiteral) | (1 << CPP14Parser.PointerLiteral) | (1 << CPP14Parser.UserDefinedLiteral) | (1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Continue) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Default) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Do) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.For) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Goto) | (1 << CPP14Parser.If) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Register) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Return) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Static_assert - 64)) | (1 << (CPP14Parser.Static_cast - 64)) | (1 << (CPP14Parser.Struct - 64)) | (1 << (CPP14Parser.Switch - 64)) | (1 << (CPP14Parser.This - 64)) | (1 << (CPP14Parser.Thread_local - 64)) | (1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.Try - 64)) | (1 << (CPP14Parser.Typedef - 64)) | (1 << (CPP14Parser.Typeid_ - 64)) | (1 << (CPP14Parser.Typename_ - 64)) | (1 << (CPP14Parser.Union - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Using - 64)) | (1 << (CPP14Parser.Virtual - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.While - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.AndAnd - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14Parser.Semi - 128)) | (1 << (CPP14Parser.Ellipsis - 128)) | (1 << (CPP14Parser.Identifier - 128)))) != 0):
                self.state = 864
                self.statementSeq()


            self.state = 867
            self.match(CPP14Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementSeqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.StatementContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.StatementContext,i)


        def getRuleIndex(self):
            return CPP14Parser.RULE_statementSeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementSeq" ):
                listener.enterStatementSeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementSeq" ):
                listener.exitStatementSeq(self)




    def statementSeq(self):

        localctx = CPP14Parser.StatementSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_statementSeq)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 870 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 869
                self.statement()
                self.state = 872 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.IntegerLiteral) | (1 << CPP14Parser.CharacterLiteral) | (1 << CPP14Parser.FloatingLiteral) | (1 << CPP14Parser.StringLiteral) | (1 << CPP14Parser.BooleanLiteral) | (1 << CPP14Parser.PointerLiteral) | (1 << CPP14Parser.UserDefinedLiteral) | (1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Continue) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Default) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Do) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.For) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Goto) | (1 << CPP14Parser.If) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Register) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Return) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Static_assert - 64)) | (1 << (CPP14Parser.Static_cast - 64)) | (1 << (CPP14Parser.Struct - 64)) | (1 << (CPP14Parser.Switch - 64)) | (1 << (CPP14Parser.This - 64)) | (1 << (CPP14Parser.Thread_local - 64)) | (1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.Try - 64)) | (1 << (CPP14Parser.Typedef - 64)) | (1 << (CPP14Parser.Typeid_ - 64)) | (1 << (CPP14Parser.Typename_ - 64)) | (1 << (CPP14Parser.Union - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Using - 64)) | (1 << (CPP14Parser.Virtual - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.While - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.AndAnd - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14Parser.Semi - 128)) | (1 << (CPP14Parser.Ellipsis - 128)) | (1 << (CPP14Parser.Identifier - 128)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(CPP14Parser.If, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def condition(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.StatementContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.StatementContext,i)


        def Else(self):
            return self.getToken(CPP14Parser.Else, 0)

        def Switch(self):
            return self.getToken(CPP14Parser.Switch, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_selectionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectionStatement" ):
                listener.enterSelectionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectionStatement" ):
                listener.exitSelectionStatement(self)




    def selectionStatement(self):

        localctx = CPP14Parser.SelectionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_selectionStatement)
        try:
            self.state = 889
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.If]:
                self.enterOuterAlt(localctx, 1)
                self.state = 874
                self.match(CPP14Parser.If)
                self.state = 875
                self.match(CPP14Parser.LeftParen)
                self.state = 876
                self.condition()
                self.state = 877
                self.match(CPP14Parser.RightParen)
                self.state = 878
                self.statement()
                self.state = 881
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                if la_ == 1:
                    self.state = 879
                    self.match(CPP14Parser.Else)
                    self.state = 880
                    self.statement()


                pass
            elif token in [CPP14Parser.Switch]:
                self.enterOuterAlt(localctx, 2)
                self.state = 883
                self.match(CPP14Parser.Switch)
                self.state = 884
                self.match(CPP14Parser.LeftParen)
                self.state = 885
                self.condition()
                self.state = 886
                self.match(CPP14Parser.RightParen)
                self.state = 887
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def declSpecifierSeq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclSpecifierSeqContext,0)


        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext,0)


        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def initializerClause(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerClauseContext,0)


        def bracedInitList(self):
            return self.getTypedRuleContext(CPP14Parser.BracedInitListContext,0)


        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeSpecifierSeqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition" ):
                listener.enterCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition" ):
                listener.exitCondition(self)




    def condition(self):

        localctx = CPP14Parser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_condition)
        self._la = 0 # Token type
        try:
            self.state = 902
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 891
                self.expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 893
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 892
                    self.attributeSpecifierSeq()


                self.state = 895
                self.declSpecifierSeq()
                self.state = 896
                self.declarator()
                self.state = 900
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Assign]:
                    self.state = 897
                    self.match(CPP14Parser.Assign)
                    self.state = 898
                    self.initializerClause()
                    pass
                elif token in [CPP14Parser.LeftBrace]:
                    self.state = 899
                    self.bracedInitList()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IterationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def While(self):
            return self.getToken(CPP14Parser.While, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def condition(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext,0)


        def Do(self):
            return self.getToken(CPP14Parser.Do, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def For(self):
            return self.getToken(CPP14Parser.For, 0)

        def forInitStatement(self):
            return self.getTypedRuleContext(CPP14Parser.ForInitStatementContext,0)


        def forRangeDeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.ForRangeDeclarationContext,0)


        def Colon(self):
            return self.getToken(CPP14Parser.Colon, 0)

        def forRangeInitializer(self):
            return self.getTypedRuleContext(CPP14Parser.ForRangeInitializerContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_iterationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterationStatement" ):
                listener.enterIterationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterationStatement" ):
                listener.exitIterationStatement(self)




    def iterationStatement(self):

        localctx = CPP14Parser.IterationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_iterationStatement)
        self._la = 0 # Token type
        try:
            self.state = 937
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.While]:
                self.enterOuterAlt(localctx, 1)
                self.state = 904
                self.match(CPP14Parser.While)
                self.state = 905
                self.match(CPP14Parser.LeftParen)
                self.state = 906
                self.condition()
                self.state = 907
                self.match(CPP14Parser.RightParen)
                self.state = 908
                self.statement()
                pass
            elif token in [CPP14Parser.Do]:
                self.enterOuterAlt(localctx, 2)
                self.state = 910
                self.match(CPP14Parser.Do)
                self.state = 911
                self.statement()
                self.state = 912
                self.match(CPP14Parser.While)
                self.state = 913
                self.match(CPP14Parser.LeftParen)
                self.state = 914
                self.expression()
                self.state = 915
                self.match(CPP14Parser.RightParen)
                self.state = 916
                self.match(CPP14Parser.Semi)
                pass
            elif token in [CPP14Parser.For]:
                self.enterOuterAlt(localctx, 3)
                self.state = 918
                self.match(CPP14Parser.For)
                self.state = 919
                self.match(CPP14Parser.LeftParen)
                self.state = 932
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
                if la_ == 1:
                    self.state = 920
                    self.forInitStatement()
                    self.state = 922
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.IntegerLiteral) | (1 << CPP14Parser.CharacterLiteral) | (1 << CPP14Parser.FloatingLiteral) | (1 << CPP14Parser.StringLiteral) | (1 << CPP14Parser.BooleanLiteral) | (1 << CPP14Parser.PointerLiteral) | (1 << CPP14Parser.UserDefinedLiteral) | (1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Register) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.Static_cast - 65)) | (1 << (CPP14Parser.Struct - 65)) | (1 << (CPP14Parser.This - 65)) | (1 << (CPP14Parser.Thread_local - 65)) | (1 << (CPP14Parser.Throw - 65)) | (1 << (CPP14Parser.Typedef - 65)) | (1 << (CPP14Parser.Typeid_ - 65)) | (1 << (CPP14Parser.Typename_ - 65)) | (1 << (CPP14Parser.Union - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Virtual - 65)) | (1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Volatile - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)))) != 0) or _la==CPP14Parser.Identifier:
                        self.state = 921
                        self.condition()


                    self.state = 924
                    self.match(CPP14Parser.Semi)
                    self.state = 926
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.IntegerLiteral) | (1 << CPP14Parser.CharacterLiteral) | (1 << CPP14Parser.FloatingLiteral) | (1 << CPP14Parser.StringLiteral) | (1 << CPP14Parser.BooleanLiteral) | (1 << CPP14Parser.PointerLiteral) | (1 << CPP14Parser.UserDefinedLiteral) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.Static_cast - 65)) | (1 << (CPP14Parser.This - 65)) | (1 << (CPP14Parser.Throw - 65)) | (1 << (CPP14Parser.Typeid_ - 65)) | (1 << (CPP14Parser.Typename_ - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)))) != 0) or _la==CPP14Parser.Identifier:
                        self.state = 925
                        self.expression()


                    pass

                elif la_ == 2:
                    self.state = 928
                    self.forRangeDeclaration()
                    self.state = 929
                    self.match(CPP14Parser.Colon)
                    self.state = 930
                    self.forRangeInitializer()
                    pass


                self.state = 934
                self.match(CPP14Parser.RightParen)
                self.state = 935
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForInitStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionStatement(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionStatementContext,0)


        def simpleDeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.SimpleDeclarationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_forInitStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForInitStatement" ):
                listener.enterForInitStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForInitStatement" ):
                listener.exitForInitStatement(self)




    def forInitStatement(self):

        localctx = CPP14Parser.ForInitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_forInitStatement)
        try:
            self.state = 941
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 939
                self.expressionStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 940
                self.simpleDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForRangeDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declSpecifierSeq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclSpecifierSeqContext,0)


        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext,0)


        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeSpecifierSeqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_forRangeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForRangeDeclaration" ):
                listener.enterForRangeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForRangeDeclaration" ):
                listener.exitForRangeDeclaration(self)




    def forRangeDeclaration(self):

        localctx = CPP14Parser.ForRangeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_forRangeDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 944
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                self.state = 943
                self.attributeSpecifierSeq()


            self.state = 946
            self.declSpecifierSeq()
            self.state = 947
            self.declarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForRangeInitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def bracedInitList(self):
            return self.getTypedRuleContext(CPP14Parser.BracedInitListContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_forRangeInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForRangeInitializer" ):
                listener.enterForRangeInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForRangeInitializer" ):
                listener.exitForRangeInitializer(self)




    def forRangeInitializer(self):

        localctx = CPP14Parser.ForRangeInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_forRangeInitializer)
        try:
            self.state = 951
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.IntegerLiteral, CPP14Parser.CharacterLiteral, CPP14Parser.FloatingLiteral, CPP14Parser.StringLiteral, CPP14Parser.BooleanLiteral, CPP14Parser.PointerLiteral, CPP14Parser.UserDefinedLiteral, CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Const_cast, CPP14Parser.Decltype, CPP14Parser.Delete, CPP14Parser.Double, CPP14Parser.Dynamic_cast, CPP14Parser.Float, CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.New, CPP14Parser.Noexcept, CPP14Parser.Operator, CPP14Parser.Reinterpret_cast, CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Sizeof, CPP14Parser.Static_cast, CPP14Parser.This, CPP14Parser.Throw, CPP14Parser.Typeid_, CPP14Parser.Typename_, CPP14Parser.Unsigned, CPP14Parser.Void, CPP14Parser.Wchar, CPP14Parser.LeftParen, CPP14Parser.LeftBracket, CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 949
                self.expression()
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 950
                self.bracedInitList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JumpStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def Break(self):
            return self.getToken(CPP14Parser.Break, 0)

        def Continue(self):
            return self.getToken(CPP14Parser.Continue, 0)

        def Return(self):
            return self.getToken(CPP14Parser.Return, 0)

        def Goto(self):
            return self.getToken(CPP14Parser.Goto, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def bracedInitList(self):
            return self.getTypedRuleContext(CPP14Parser.BracedInitListContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_jumpStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJumpStatement" ):
                listener.enterJumpStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJumpStatement" ):
                listener.exitJumpStatement(self)




    def jumpStatement(self):

        localctx = CPP14Parser.JumpStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_jumpStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 962
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Break]:
                self.state = 953
                self.match(CPP14Parser.Break)
                pass
            elif token in [CPP14Parser.Continue]:
                self.state = 954
                self.match(CPP14Parser.Continue)
                pass
            elif token in [CPP14Parser.Return]:
                self.state = 955
                self.match(CPP14Parser.Return)
                self.state = 958
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.IntegerLiteral, CPP14Parser.CharacterLiteral, CPP14Parser.FloatingLiteral, CPP14Parser.StringLiteral, CPP14Parser.BooleanLiteral, CPP14Parser.PointerLiteral, CPP14Parser.UserDefinedLiteral, CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Const_cast, CPP14Parser.Decltype, CPP14Parser.Delete, CPP14Parser.Double, CPP14Parser.Dynamic_cast, CPP14Parser.Float, CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.New, CPP14Parser.Noexcept, CPP14Parser.Operator, CPP14Parser.Reinterpret_cast, CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Sizeof, CPP14Parser.Static_cast, CPP14Parser.This, CPP14Parser.Throw, CPP14Parser.Typeid_, CPP14Parser.Typename_, CPP14Parser.Unsigned, CPP14Parser.Void, CPP14Parser.Wchar, CPP14Parser.LeftParen, CPP14Parser.LeftBracket, CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                    self.state = 956
                    self.expression()
                    pass
                elif token in [CPP14Parser.LeftBrace]:
                    self.state = 957
                    self.bracedInitList()
                    pass
                elif token in [CPP14Parser.Semi]:
                    pass
                else:
                    pass
                pass
            elif token in [CPP14Parser.Goto]:
                self.state = 960
                self.match(CPP14Parser.Goto)
                self.state = 961
                self.match(CPP14Parser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 964
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockDeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.BlockDeclarationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_declarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationStatement" ):
                listener.enterDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationStatement" ):
                listener.exitDeclarationStatement(self)




    def declarationStatement(self):

        localctx = CPP14Parser.DeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_declarationStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 966
            self.blockDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationseqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.DeclarationContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.DeclarationContext,i)


        def getRuleIndex(self):
            return CPP14Parser.RULE_declarationseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationseq" ):
                listener.enterDeclarationseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationseq" ):
                listener.exitDeclarationseq(self)




    def declarationseq(self):

        localctx = CPP14Parser.DeclarationseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_declarationseq)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 969 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 968
                self.declaration()
                self.state = 971 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & ((1 << (CPP14Parser.Alignas - 10)) | (1 << (CPP14Parser.Asm - 10)) | (1 << (CPP14Parser.Auto - 10)) | (1 << (CPP14Parser.Bool - 10)) | (1 << (CPP14Parser.Char - 10)) | (1 << (CPP14Parser.Char16 - 10)) | (1 << (CPP14Parser.Char32 - 10)) | (1 << (CPP14Parser.Class - 10)) | (1 << (CPP14Parser.Const - 10)) | (1 << (CPP14Parser.Constexpr - 10)) | (1 << (CPP14Parser.Decltype - 10)) | (1 << (CPP14Parser.Double - 10)) | (1 << (CPP14Parser.Enum - 10)) | (1 << (CPP14Parser.Explicit - 10)) | (1 << (CPP14Parser.Extern - 10)) | (1 << (CPP14Parser.Float - 10)) | (1 << (CPP14Parser.Friend - 10)) | (1 << (CPP14Parser.Inline - 10)) | (1 << (CPP14Parser.Int - 10)) | (1 << (CPP14Parser.Long - 10)) | (1 << (CPP14Parser.Mutable - 10)) | (1 << (CPP14Parser.Namespace - 10)) | (1 << (CPP14Parser.Operator - 10)) | (1 << (CPP14Parser.Register - 10)) | (1 << (CPP14Parser.Short - 10)) | (1 << (CPP14Parser.Signed - 10)) | (1 << (CPP14Parser.Static - 10)) | (1 << (CPP14Parser.Static_assert - 10)) | (1 << (CPP14Parser.Struct - 10)) | (1 << (CPP14Parser.Template - 10)) | (1 << (CPP14Parser.Thread_local - 10)))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (CPP14Parser.Typedef - 74)) | (1 << (CPP14Parser.Typename_ - 74)) | (1 << (CPP14Parser.Union - 74)) | (1 << (CPP14Parser.Unsigned - 74)) | (1 << (CPP14Parser.Using - 74)) | (1 << (CPP14Parser.Virtual - 74)) | (1 << (CPP14Parser.Void - 74)) | (1 << (CPP14Parser.Volatile - 74)) | (1 << (CPP14Parser.Wchar - 74)) | (1 << (CPP14Parser.LeftParen - 74)) | (1 << (CPP14Parser.LeftBracket - 74)) | (1 << (CPP14Parser.Star - 74)) | (1 << (CPP14Parser.And - 74)) | (1 << (CPP14Parser.Tilde - 74)) | (1 << (CPP14Parser.AndAnd - 74)) | (1 << (CPP14Parser.Doublecolon - 74)) | (1 << (CPP14Parser.Semi - 74)) | (1 << (CPP14Parser.Ellipsis - 74)) | (1 << (CPP14Parser.Identifier - 74)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockDeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.BlockDeclarationContext,0)


        def functionDefinition(self):
            return self.getTypedRuleContext(CPP14Parser.FunctionDefinitionContext,0)


        def templateDeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateDeclarationContext,0)


        def explicitInstantiation(self):
            return self.getTypedRuleContext(CPP14Parser.ExplicitInstantiationContext,0)


        def explicitSpecialization(self):
            return self.getTypedRuleContext(CPP14Parser.ExplicitSpecializationContext,0)


        def linkageSpecification(self):
            return self.getTypedRuleContext(CPP14Parser.LinkageSpecificationContext,0)


        def namespaceDefinition(self):
            return self.getTypedRuleContext(CPP14Parser.NamespaceDefinitionContext,0)


        def emptyDeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.EmptyDeclarationContext,0)


        def attributeDeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeDeclarationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)




    def declaration(self):

        localctx = CPP14Parser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_declaration)
        try:
            self.state = 982
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 973
                self.blockDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 974
                self.functionDefinition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 975
                self.templateDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 976
                self.explicitInstantiation()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 977
                self.explicitSpecialization()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 978
                self.linkageSpecification()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 979
                self.namespaceDefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 980
                self.emptyDeclaration()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 981
                self.attributeDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleDeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.SimpleDeclarationContext,0)


        def asmDefinition(self):
            return self.getTypedRuleContext(CPP14Parser.AsmDefinitionContext,0)


        def namespaceAliasDefinition(self):
            return self.getTypedRuleContext(CPP14Parser.NamespaceAliasDefinitionContext,0)


        def usingDeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.UsingDeclarationContext,0)


        def usingDirective(self):
            return self.getTypedRuleContext(CPP14Parser.UsingDirectiveContext,0)


        def staticAssertDeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.StaticAssertDeclarationContext,0)


        def aliasDeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.AliasDeclarationContext,0)


        def opaqueEnumDeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.OpaqueEnumDeclarationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_blockDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockDeclaration" ):
                listener.enterBlockDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockDeclaration" ):
                listener.exitBlockDeclaration(self)




    def blockDeclaration(self):

        localctx = CPP14Parser.BlockDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_blockDeclaration)
        try:
            self.state = 992
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 984
                self.simpleDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 985
                self.asmDefinition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 986
                self.namespaceAliasDefinition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 987
                self.usingDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 988
                self.usingDirective()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 989
                self.staticAssertDeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 990
                self.aliasDeclaration()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 991
                self.opaqueEnumDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Using(self):
            return self.getToken(CPP14Parser.Using, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def theTypeId(self):
            return self.getTypedRuleContext(CPP14Parser.TheTypeIdContext,0)


        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeSpecifierSeqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_aliasDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasDeclaration" ):
                listener.enterAliasDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasDeclaration" ):
                listener.exitAliasDeclaration(self)




    def aliasDeclaration(self):

        localctx = CPP14Parser.AliasDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_aliasDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 994
            self.match(CPP14Parser.Using)
            self.state = 995
            self.match(CPP14Parser.Identifier)
            self.state = 997
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                self.state = 996
                self.attributeSpecifierSeq()


            self.state = 999
            self.match(CPP14Parser.Assign)
            self.state = 1000
            self.theTypeId()
            self.state = 1001
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def declSpecifierSeq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclSpecifierSeqContext,0)


        def initDeclaratorList(self):
            return self.getTypedRuleContext(CPP14Parser.InitDeclaratorListContext,0)


        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeSpecifierSeqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_simpleDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleDeclaration" ):
                listener.enterSimpleDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleDeclaration" ):
                listener.exitSimpleDeclaration(self)




    def simpleDeclaration(self):

        localctx = CPP14Parser.SimpleDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_simpleDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 1017
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Class, CPP14Parser.Const, CPP14Parser.Constexpr, CPP14Parser.Decltype, CPP14Parser.Double, CPP14Parser.Enum, CPP14Parser.Explicit, CPP14Parser.Extern, CPP14Parser.Float, CPP14Parser.Friend, CPP14Parser.Inline, CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.Mutable, CPP14Parser.Operator, CPP14Parser.Register, CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Static, CPP14Parser.Struct, CPP14Parser.Thread_local, CPP14Parser.Typedef, CPP14Parser.Typename_, CPP14Parser.Union, CPP14Parser.Unsigned, CPP14Parser.Virtual, CPP14Parser.Void, CPP14Parser.Volatile, CPP14Parser.Wchar, CPP14Parser.LeftParen, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Tilde, CPP14Parser.AndAnd, CPP14Parser.Doublecolon, CPP14Parser.Semi, CPP14Parser.Ellipsis, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1004
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
                if la_ == 1:
                    self.state = 1003
                    self.declSpecifierSeq()


                self.state = 1007
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Decltype or _la==CPP14Parser.Operator or ((((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & ((1 << (CPP14Parser.LeftParen - 85)) | (1 << (CPP14Parser.Star - 85)) | (1 << (CPP14Parser.And - 85)) | (1 << (CPP14Parser.Tilde - 85)) | (1 << (CPP14Parser.AndAnd - 85)) | (1 << (CPP14Parser.Doublecolon - 85)) | (1 << (CPP14Parser.Ellipsis - 85)) | (1 << (CPP14Parser.Identifier - 85)))) != 0):
                    self.state = 1006
                    self.initDeclaratorList()


                self.state = 1009
                self.match(CPP14Parser.Semi)
                pass
            elif token in [CPP14Parser.Alignas, CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1010
                self.attributeSpecifierSeq()
                self.state = 1012
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
                if la_ == 1:
                    self.state = 1011
                    self.declSpecifierSeq()


                self.state = 1014
                self.initDeclaratorList()
                self.state = 1015
                self.match(CPP14Parser.Semi)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticAssertDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Static_assert(self):
            return self.getToken(CPP14Parser.Static_assert, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantExpressionContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def StringLiteral(self):
            return self.getToken(CPP14Parser.StringLiteral, 0)

        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_staticAssertDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticAssertDeclaration" ):
                listener.enterStaticAssertDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticAssertDeclaration" ):
                listener.exitStaticAssertDeclaration(self)




    def staticAssertDeclaration(self):

        localctx = CPP14Parser.StaticAssertDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_staticAssertDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1019
            self.match(CPP14Parser.Static_assert)
            self.state = 1020
            self.match(CPP14Parser.LeftParen)
            self.state = 1021
            self.constantExpression()
            self.state = 1022
            self.match(CPP14Parser.Comma)
            self.state = 1023
            self.match(CPP14Parser.StringLiteral)
            self.state = 1024
            self.match(CPP14Parser.RightParen)
            self.state = 1025
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_emptyDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyDeclaration" ):
                listener.enterEmptyDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyDeclaration" ):
                listener.exitEmptyDeclaration(self)




    def emptyDeclaration(self):

        localctx = CPP14Parser.EmptyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_emptyDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1027
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeSpecifierSeqContext,0)


        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeDeclaration" ):
                listener.enterAttributeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeDeclaration" ):
                listener.exitAttributeDeclaration(self)




    def attributeDeclaration(self):

        localctx = CPP14Parser.AttributeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_attributeDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1029
            self.attributeSpecifierSeq()
            self.state = 1030
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def storageClassSpecifier(self):
            return self.getTypedRuleContext(CPP14Parser.StorageClassSpecifierContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TypeSpecifierContext,0)


        def functionSpecifier(self):
            return self.getTypedRuleContext(CPP14Parser.FunctionSpecifierContext,0)


        def Friend(self):
            return self.getToken(CPP14Parser.Friend, 0)

        def Typedef(self):
            return self.getToken(CPP14Parser.Typedef, 0)

        def Constexpr(self):
            return self.getToken(CPP14Parser.Constexpr, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_declSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclSpecifier" ):
                listener.enterDeclSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclSpecifier" ):
                listener.exitDeclSpecifier(self)




    def declSpecifier(self):

        localctx = CPP14Parser.DeclSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_declSpecifier)
        try:
            self.state = 1038
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Extern, CPP14Parser.Mutable, CPP14Parser.Register, CPP14Parser.Static, CPP14Parser.Thread_local]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1032
                self.storageClassSpecifier()
                pass
            elif token in [CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Class, CPP14Parser.Const, CPP14Parser.Decltype, CPP14Parser.Double, CPP14Parser.Enum, CPP14Parser.Float, CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Struct, CPP14Parser.Typename_, CPP14Parser.Union, CPP14Parser.Unsigned, CPP14Parser.Void, CPP14Parser.Volatile, CPP14Parser.Wchar, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1033
                self.typeSpecifier()
                pass
            elif token in [CPP14Parser.Explicit, CPP14Parser.Inline, CPP14Parser.Virtual]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1034
                self.functionSpecifier()
                pass
            elif token in [CPP14Parser.Friend]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1035
                self.match(CPP14Parser.Friend)
                pass
            elif token in [CPP14Parser.Typedef]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1036
                self.match(CPP14Parser.Typedef)
                pass
            elif token in [CPP14Parser.Constexpr]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1037
                self.match(CPP14Parser.Constexpr)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclSpecifierSeqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.DeclSpecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.DeclSpecifierContext,i)


        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeSpecifierSeqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_declSpecifierSeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclSpecifierSeq" ):
                listener.enterDeclSpecifierSeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclSpecifierSeq" ):
                listener.exitDeclSpecifierSeq(self)




    def declSpecifierSeq(self):

        localctx = CPP14Parser.DeclSpecifierSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_declSpecifierSeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1041 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1040
                    self.declSpecifier()

                else:
                    raise NoViableAltException(self)
                self.state = 1043 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

            self.state = 1046
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.state = 1045
                self.attributeSpecifierSeq()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageClassSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Register(self):
            return self.getToken(CPP14Parser.Register, 0)

        def Static(self):
            return self.getToken(CPP14Parser.Static, 0)

        def Thread_local(self):
            return self.getToken(CPP14Parser.Thread_local, 0)

        def Extern(self):
            return self.getToken(CPP14Parser.Extern, 0)

        def Mutable(self):
            return self.getToken(CPP14Parser.Mutable, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_storageClassSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageClassSpecifier" ):
                listener.enterStorageClassSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageClassSpecifier" ):
                listener.exitStorageClassSpecifier(self)




    def storageClassSpecifier(self):

        localctx = CPP14Parser.StorageClassSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_storageClassSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1048
            _la = self._input.LA(1)
            if not(((((_la - 36)) & ~0x3f) == 0 and ((1 << (_la - 36)) & ((1 << (CPP14Parser.Extern - 36)) | (1 << (CPP14Parser.Mutable - 36)) | (1 << (CPP14Parser.Register - 36)) | (1 << (CPP14Parser.Static - 36)) | (1 << (CPP14Parser.Thread_local - 36)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Inline(self):
            return self.getToken(CPP14Parser.Inline, 0)

        def Virtual(self):
            return self.getToken(CPP14Parser.Virtual, 0)

        def Explicit(self):
            return self.getToken(CPP14Parser.Explicit, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_functionSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionSpecifier" ):
                listener.enterFunctionSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionSpecifier" ):
                listener.exitFunctionSpecifier(self)




    def functionSpecifier(self):

        localctx = CPP14Parser.FunctionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_functionSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1050
            _la = self._input.LA(1)
            if not(((((_la - 34)) & ~0x3f) == 0 and ((1 << (_la - 34)) & ((1 << (CPP14Parser.Explicit - 34)) | (1 << (CPP14Parser.Inline - 34)) | (1 << (CPP14Parser.Virtual - 34)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedefNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_typedefName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedefName" ):
                listener.enterTypedefName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedefName" ):
                listener.exitTypedefName(self)




    def typedefName(self):

        localctx = CPP14Parser.TypedefNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_typedefName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1052
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def trailingTypeSpecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingTypeSpecifierContext,0)


        def classSpecifier(self):
            return self.getTypedRuleContext(CPP14Parser.ClassSpecifierContext,0)


        def enumSpecifier(self):
            return self.getTypedRuleContext(CPP14Parser.EnumSpecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_typeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSpecifier" ):
                listener.enterTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSpecifier" ):
                listener.exitTypeSpecifier(self)




    def typeSpecifier(self):

        localctx = CPP14Parser.TypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_typeSpecifier)
        try:
            self.state = 1057
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1054
                self.trailingTypeSpecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1055
                self.classSpecifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1056
                self.enumSpecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailingTypeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleTypeSpecifier(self):
            return self.getTypedRuleContext(CPP14Parser.SimpleTypeSpecifierContext,0)


        def elaboratedTypeSpecifier(self):
            return self.getTypedRuleContext(CPP14Parser.ElaboratedTypeSpecifierContext,0)


        def typeNameSpecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TypeNameSpecifierContext,0)


        def cvQualifier(self):
            return self.getTypedRuleContext(CPP14Parser.CvQualifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_trailingTypeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailingTypeSpecifier" ):
                listener.enterTrailingTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailingTypeSpecifier" ):
                listener.exitTrailingTypeSpecifier(self)




    def trailingTypeSpecifier(self):

        localctx = CPP14Parser.TrailingTypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_trailingTypeSpecifier)
        try:
            self.state = 1063
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Decltype, CPP14Parser.Double, CPP14Parser.Float, CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Unsigned, CPP14Parser.Void, CPP14Parser.Wchar, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1059
                self.simpleTypeSpecifier()
                pass
            elif token in [CPP14Parser.Class, CPP14Parser.Enum, CPP14Parser.Struct]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1060
                self.elaboratedTypeSpecifier()
                pass
            elif token in [CPP14Parser.Typename_]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1061
                self.typeNameSpecifier()
                pass
            elif token in [CPP14Parser.Const, CPP14Parser.Volatile]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1062
                self.cvQualifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSpecifierSeqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypeSpecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypeSpecifierContext,i)


        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeSpecifierSeqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_typeSpecifierSeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSpecifierSeq" ):
                listener.enterTypeSpecifierSeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSpecifierSeq" ):
                listener.exitTypeSpecifierSeq(self)




    def typeSpecifierSeq(self):

        localctx = CPP14Parser.TypeSpecifierSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_typeSpecifierSeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1066 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1065
                    self.typeSpecifier()

                else:
                    raise NoViableAltException(self)
                self.state = 1068 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,108,self._ctx)

            self.state = 1071
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.state = 1070
                self.attributeSpecifierSeq()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailingTypeSpecifierSeqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def trailingTypeSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TrailingTypeSpecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TrailingTypeSpecifierContext,i)


        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeSpecifierSeqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_trailingTypeSpecifierSeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailingTypeSpecifierSeq" ):
                listener.enterTrailingTypeSpecifierSeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailingTypeSpecifierSeq" ):
                listener.exitTrailingTypeSpecifierSeq(self)




    def trailingTypeSpecifierSeq(self):

        localctx = CPP14Parser.TrailingTypeSpecifierSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_trailingTypeSpecifierSeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1074 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1073
                    self.trailingTypeSpecifier()

                else:
                    raise NoViableAltException(self)
                self.state = 1076 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,110,self._ctx)

            self.state = 1079
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 1078
                self.attributeSpecifierSeq()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleTypeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def theTypeName(self):
            return self.getTypedRuleContext(CPP14Parser.TheTypeNameContext,0)


        def nestedNameSpecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestedNameSpecifierContext,0)


        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def simpleTemplateId(self):
            return self.getTypedRuleContext(CPP14Parser.SimpleTemplateIdContext,0)


        def Char(self):
            return self.getToken(CPP14Parser.Char, 0)

        def Char16(self):
            return self.getToken(CPP14Parser.Char16, 0)

        def Char32(self):
            return self.getToken(CPP14Parser.Char32, 0)

        def Wchar(self):
            return self.getToken(CPP14Parser.Wchar, 0)

        def Bool(self):
            return self.getToken(CPP14Parser.Bool, 0)

        def Short(self):
            return self.getToken(CPP14Parser.Short, 0)

        def Int(self):
            return self.getToken(CPP14Parser.Int, 0)

        def Long(self):
            return self.getToken(CPP14Parser.Long, 0)

        def Signed(self):
            return self.getToken(CPP14Parser.Signed, 0)

        def Unsigned(self):
            return self.getToken(CPP14Parser.Unsigned, 0)

        def Float(self):
            return self.getToken(CPP14Parser.Float, 0)

        def Double(self):
            return self.getToken(CPP14Parser.Double, 0)

        def Void(self):
            return self.getToken(CPP14Parser.Void, 0)

        def Auto(self):
            return self.getToken(CPP14Parser.Auto, 0)

        def decltypeSpecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DecltypeSpecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_simpleTypeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleTypeSpecifier" ):
                listener.enterSimpleTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleTypeSpecifier" ):
                listener.exitSimpleTypeSpecifier(self)




    def simpleTypeSpecifier(self):

        localctx = CPP14Parser.SimpleTypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_simpleTypeSpecifier)
        try:
            self.state = 1104
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1082
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
                if la_ == 1:
                    self.state = 1081
                    self.nestedNameSpecifier(0)


                self.state = 1084
                self.theTypeName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1085
                self.nestedNameSpecifier(0)
                self.state = 1086
                self.match(CPP14Parser.Template)
                self.state = 1087
                self.simpleTemplateId()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1089
                self.match(CPP14Parser.Char)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1090
                self.match(CPP14Parser.Char16)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1091
                self.match(CPP14Parser.Char32)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1092
                self.match(CPP14Parser.Wchar)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1093
                self.match(CPP14Parser.Bool)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1094
                self.match(CPP14Parser.Short)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1095
                self.match(CPP14Parser.Int)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1096
                self.match(CPP14Parser.Long)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1097
                self.match(CPP14Parser.Signed)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1098
                self.match(CPP14Parser.Unsigned)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1099
                self.match(CPP14Parser.Float)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1100
                self.match(CPP14Parser.Double)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1101
                self.match(CPP14Parser.Void)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1102
                self.match(CPP14Parser.Auto)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1103
                self.decltypeSpecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TheTypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def className(self):
            return self.getTypedRuleContext(CPP14Parser.ClassNameContext,0)


        def enumName(self):
            return self.getTypedRuleContext(CPP14Parser.EnumNameContext,0)


        def typedefName(self):
            return self.getTypedRuleContext(CPP14Parser.TypedefNameContext,0)


        def simpleTemplateId(self):
            return self.getTypedRuleContext(CPP14Parser.SimpleTemplateIdContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_theTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheTypeName" ):
                listener.enterTheTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheTypeName" ):
                listener.exitTheTypeName(self)




    def theTypeName(self):

        localctx = CPP14Parser.TheTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_theTypeName)
        try:
            self.state = 1110
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1106
                self.className()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1107
                self.enumName()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1108
                self.typedefName()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1109
                self.simpleTemplateId()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecltypeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Decltype(self):
            return self.getToken(CPP14Parser.Decltype, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def Auto(self):
            return self.getToken(CPP14Parser.Auto, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_decltypeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecltypeSpecifier" ):
                listener.enterDecltypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecltypeSpecifier" ):
                listener.exitDecltypeSpecifier(self)




    def decltypeSpecifier(self):

        localctx = CPP14Parser.DecltypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_decltypeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1112
            self.match(CPP14Parser.Decltype)
            self.state = 1113
            self.match(CPP14Parser.LeftParen)
            self.state = 1116
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.state = 1114
                self.expression()
                pass

            elif la_ == 2:
                self.state = 1115
                self.match(CPP14Parser.Auto)
                pass


            self.state = 1118
            self.match(CPP14Parser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElaboratedTypeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classKey(self):
            return self.getTypedRuleContext(CPP14Parser.ClassKeyContext,0)


        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def simpleTemplateId(self):
            return self.getTypedRuleContext(CPP14Parser.SimpleTemplateIdContext,0)


        def nestedNameSpecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestedNameSpecifierContext,0)


        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeSpecifierSeqContext,0)


        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def Enum(self):
            return self.getToken(CPP14Parser.Enum, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_elaboratedTypeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElaboratedTypeSpecifier" ):
                listener.enterElaboratedTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElaboratedTypeSpecifier" ):
                listener.exitElaboratedTypeSpecifier(self)




    def elaboratedTypeSpecifier(self):

        localctx = CPP14Parser.ElaboratedTypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_elaboratedTypeSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 1142
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Class, CPP14Parser.Struct]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1120
                self.classKey()
                self.state = 1135
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
                if la_ == 1:
                    self.state = 1122
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                        self.state = 1121
                        self.attributeSpecifierSeq()


                    self.state = 1125
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
                    if la_ == 1:
                        self.state = 1124
                        self.nestedNameSpecifier(0)


                    self.state = 1127
                    self.match(CPP14Parser.Identifier)
                    pass

                elif la_ == 2:
                    self.state = 1128
                    self.simpleTemplateId()
                    pass

                elif la_ == 3:
                    self.state = 1129
                    self.nestedNameSpecifier(0)
                    self.state = 1131
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CPP14Parser.Template:
                        self.state = 1130
                        self.match(CPP14Parser.Template)


                    self.state = 1133
                    self.simpleTemplateId()
                    pass


                pass
            elif token in [CPP14Parser.Enum]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1137
                self.match(CPP14Parser.Enum)
                self.state = 1139
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
                if la_ == 1:
                    self.state = 1138
                    self.nestedNameSpecifier(0)


                self.state = 1141
                self.match(CPP14Parser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_enumName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumName" ):
                listener.enterEnumName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumName" ):
                listener.exitEnumName(self)




    def enumName(self):

        localctx = CPP14Parser.EnumNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_enumName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1144
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumHead(self):
            return self.getTypedRuleContext(CPP14Parser.EnumHeadContext,0)


        def LeftBrace(self):
            return self.getToken(CPP14Parser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(CPP14Parser.RightBrace, 0)

        def enumeratorList(self):
            return self.getTypedRuleContext(CPP14Parser.EnumeratorListContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_enumSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumSpecifier" ):
                listener.enterEnumSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumSpecifier" ):
                listener.exitEnumSpecifier(self)




    def enumSpecifier(self):

        localctx = CPP14Parser.EnumSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_enumSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1146
            self.enumHead()
            self.state = 1147
            self.match(CPP14Parser.LeftBrace)
            self.state = 1152
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Identifier:
                self.state = 1148
                self.enumeratorList()
                self.state = 1150
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Comma:
                    self.state = 1149
                    self.match(CPP14Parser.Comma)




            self.state = 1154
            self.match(CPP14Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumHeadContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumkey(self):
            return self.getTypedRuleContext(CPP14Parser.EnumkeyContext,0)


        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeSpecifierSeqContext,0)


        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def enumbase(self):
            return self.getTypedRuleContext(CPP14Parser.EnumbaseContext,0)


        def nestedNameSpecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestedNameSpecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_enumHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumHead" ):
                listener.enterEnumHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumHead" ):
                listener.exitEnumHead(self)




    def enumHead(self):

        localctx = CPP14Parser.EnumHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_enumHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1156
            self.enumkey()
            self.state = 1158
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                self.state = 1157
                self.attributeSpecifierSeq()


            self.state = 1164
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Decltype or _la==CPP14Parser.Doublecolon or _la==CPP14Parser.Identifier:
                self.state = 1161
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
                if la_ == 1:
                    self.state = 1160
                    self.nestedNameSpecifier(0)


                self.state = 1163
                self.match(CPP14Parser.Identifier)


            self.state = 1167
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Colon:
                self.state = 1166
                self.enumbase()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpaqueEnumDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumkey(self):
            return self.getTypedRuleContext(CPP14Parser.EnumkeyContext,0)


        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeSpecifierSeqContext,0)


        def enumbase(self):
            return self.getTypedRuleContext(CPP14Parser.EnumbaseContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_opaqueEnumDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpaqueEnumDeclaration" ):
                listener.enterOpaqueEnumDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpaqueEnumDeclaration" ):
                listener.exitOpaqueEnumDeclaration(self)




    def opaqueEnumDeclaration(self):

        localctx = CPP14Parser.OpaqueEnumDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_opaqueEnumDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1169
            self.enumkey()
            self.state = 1171
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                self.state = 1170
                self.attributeSpecifierSeq()


            self.state = 1173
            self.match(CPP14Parser.Identifier)
            self.state = 1175
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Colon:
                self.state = 1174
                self.enumbase()


            self.state = 1177
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumkeyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Enum(self):
            return self.getToken(CPP14Parser.Enum, 0)

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def Struct(self):
            return self.getToken(CPP14Parser.Struct, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_enumkey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumkey" ):
                listener.enterEnumkey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumkey" ):
                listener.exitEnumkey(self)




    def enumkey(self):

        localctx = CPP14Parser.EnumkeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_enumkey)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1179
            self.match(CPP14Parser.Enum)
            self.state = 1181
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Class or _la==CPP14Parser.Struct:
                self.state = 1180
                _la = self._input.LA(1)
                if not(_la==CPP14Parser.Class or _la==CPP14Parser.Struct):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumbaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(CPP14Parser.Colon, 0)

        def typeSpecifierSeq(self):
            return self.getTypedRuleContext(CPP14Parser.TypeSpecifierSeqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_enumbase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumbase" ):
                listener.enterEnumbase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumbase" ):
                listener.exitEnumbase(self)




    def enumbase(self):

        localctx = CPP14Parser.EnumbaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_enumbase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1183
            self.match(CPP14Parser.Colon)
            self.state = 1184
            self.typeSpecifierSeq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumeratorDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.EnumeratorDefinitionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.EnumeratorDefinitionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.Comma)
            else:
                return self.getToken(CPP14Parser.Comma, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_enumeratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeratorList" ):
                listener.enterEnumeratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeratorList" ):
                listener.exitEnumeratorList(self)




    def enumeratorList(self):

        localctx = CPP14Parser.EnumeratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_enumeratorList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1186
            self.enumeratorDefinition()
            self.state = 1191
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,131,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1187
                    self.match(CPP14Parser.Comma)
                    self.state = 1188
                    self.enumeratorDefinition() 
                self.state = 1193
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,131,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerator(self):
            return self.getTypedRuleContext(CPP14Parser.EnumeratorContext,0)


        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_enumeratorDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeratorDefinition" ):
                listener.enterEnumeratorDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeratorDefinition" ):
                listener.exitEnumeratorDefinition(self)




    def enumeratorDefinition(self):

        localctx = CPP14Parser.EnumeratorDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_enumeratorDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1194
            self.enumerator()
            self.state = 1197
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Assign:
                self.state = 1195
                self.match(CPP14Parser.Assign)
                self.state = 1196
                self.constantExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_enumerator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerator" ):
                listener.enterEnumerator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerator" ):
                listener.exitEnumerator(self)




    def enumerator(self):

        localctx = CPP14Parser.EnumeratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_enumerator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1199
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespaceNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def originalNamespaceName(self):
            return self.getTypedRuleContext(CPP14Parser.OriginalNamespaceNameContext,0)


        def namespaceAlias(self):
            return self.getTypedRuleContext(CPP14Parser.NamespaceAliasContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_namespaceName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespaceName" ):
                listener.enterNamespaceName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespaceName" ):
                listener.exitNamespaceName(self)




    def namespaceName(self):

        localctx = CPP14Parser.NamespaceNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_namespaceName)
        try:
            self.state = 1203
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1201
                self.originalNamespaceName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1202
                self.namespaceAlias()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OriginalNamespaceNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_originalNamespaceName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOriginalNamespaceName" ):
                listener.enterOriginalNamespaceName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOriginalNamespaceName" ):
                listener.exitOriginalNamespaceName(self)




    def originalNamespaceName(self):

        localctx = CPP14Parser.OriginalNamespaceNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_originalNamespaceName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1205
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespaceDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.namespaceBody = None # DeclarationseqContext

        def Namespace(self):
            return self.getToken(CPP14Parser.Namespace, 0)

        def LeftBrace(self):
            return self.getToken(CPP14Parser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(CPP14Parser.RightBrace, 0)

        def Inline(self):
            return self.getToken(CPP14Parser.Inline, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def originalNamespaceName(self):
            return self.getTypedRuleContext(CPP14Parser.OriginalNamespaceNameContext,0)


        def declarationseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_namespaceDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespaceDefinition" ):
                listener.enterNamespaceDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespaceDefinition" ):
                listener.exitNamespaceDefinition(self)




    def namespaceDefinition(self):

        localctx = CPP14Parser.NamespaceDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_namespaceDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1208
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Inline:
                self.state = 1207
                self.match(CPP14Parser.Inline)


            self.state = 1210
            self.match(CPP14Parser.Namespace)
            self.state = 1213
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.state = 1211
                self.match(CPP14Parser.Identifier)

            elif la_ == 2:
                self.state = 1212
                self.originalNamespaceName()


            self.state = 1215
            self.match(CPP14Parser.LeftBrace)
            self.state = 1217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & ((1 << (CPP14Parser.Alignas - 10)) | (1 << (CPP14Parser.Asm - 10)) | (1 << (CPP14Parser.Auto - 10)) | (1 << (CPP14Parser.Bool - 10)) | (1 << (CPP14Parser.Char - 10)) | (1 << (CPP14Parser.Char16 - 10)) | (1 << (CPP14Parser.Char32 - 10)) | (1 << (CPP14Parser.Class - 10)) | (1 << (CPP14Parser.Const - 10)) | (1 << (CPP14Parser.Constexpr - 10)) | (1 << (CPP14Parser.Decltype - 10)) | (1 << (CPP14Parser.Double - 10)) | (1 << (CPP14Parser.Enum - 10)) | (1 << (CPP14Parser.Explicit - 10)) | (1 << (CPP14Parser.Extern - 10)) | (1 << (CPP14Parser.Float - 10)) | (1 << (CPP14Parser.Friend - 10)) | (1 << (CPP14Parser.Inline - 10)) | (1 << (CPP14Parser.Int - 10)) | (1 << (CPP14Parser.Long - 10)) | (1 << (CPP14Parser.Mutable - 10)) | (1 << (CPP14Parser.Namespace - 10)) | (1 << (CPP14Parser.Operator - 10)) | (1 << (CPP14Parser.Register - 10)) | (1 << (CPP14Parser.Short - 10)) | (1 << (CPP14Parser.Signed - 10)) | (1 << (CPP14Parser.Static - 10)) | (1 << (CPP14Parser.Static_assert - 10)) | (1 << (CPP14Parser.Struct - 10)) | (1 << (CPP14Parser.Template - 10)) | (1 << (CPP14Parser.Thread_local - 10)))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (CPP14Parser.Typedef - 74)) | (1 << (CPP14Parser.Typename_ - 74)) | (1 << (CPP14Parser.Union - 74)) | (1 << (CPP14Parser.Unsigned - 74)) | (1 << (CPP14Parser.Using - 74)) | (1 << (CPP14Parser.Virtual - 74)) | (1 << (CPP14Parser.Void - 74)) | (1 << (CPP14Parser.Volatile - 74)) | (1 << (CPP14Parser.Wchar - 74)) | (1 << (CPP14Parser.LeftParen - 74)) | (1 << (CPP14Parser.LeftBracket - 74)) | (1 << (CPP14Parser.Star - 74)) | (1 << (CPP14Parser.And - 74)) | (1 << (CPP14Parser.Tilde - 74)) | (1 << (CPP14Parser.AndAnd - 74)) | (1 << (CPP14Parser.Doublecolon - 74)) | (1 << (CPP14Parser.Semi - 74)) | (1 << (CPP14Parser.Ellipsis - 74)) | (1 << (CPP14Parser.Identifier - 74)))) != 0):
                self.state = 1216
                localctx.namespaceBody = self.declarationseq()


            self.state = 1219
            self.match(CPP14Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespaceAliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_namespaceAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespaceAlias" ):
                listener.enterNamespaceAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespaceAlias" ):
                listener.exitNamespaceAlias(self)




    def namespaceAlias(self):

        localctx = CPP14Parser.NamespaceAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_namespaceAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1221
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespaceAliasDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Namespace(self):
            return self.getToken(CPP14Parser.Namespace, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def qualifiednamespacespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.QualifiednamespacespecifierContext,0)


        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_namespaceAliasDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespaceAliasDefinition" ):
                listener.enterNamespaceAliasDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespaceAliasDefinition" ):
                listener.exitNamespaceAliasDefinition(self)




    def namespaceAliasDefinition(self):

        localctx = CPP14Parser.NamespaceAliasDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_namespaceAliasDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1223
            self.match(CPP14Parser.Namespace)
            self.state = 1224
            self.match(CPP14Parser.Identifier)
            self.state = 1225
            self.match(CPP14Parser.Assign)
            self.state = 1226
            self.qualifiednamespacespecifier()
            self.state = 1227
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiednamespacespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespaceName(self):
            return self.getTypedRuleContext(CPP14Parser.NamespaceNameContext,0)


        def nestedNameSpecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestedNameSpecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_qualifiednamespacespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiednamespacespecifier" ):
                listener.enterQualifiednamespacespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiednamespacespecifier" ):
                listener.exitQualifiednamespacespecifier(self)




    def qualifiednamespacespecifier(self):

        localctx = CPP14Parser.QualifiednamespacespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_qualifiednamespacespecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1230
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.state = 1229
                self.nestedNameSpecifier(0)


            self.state = 1232
            self.namespaceName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsingDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Using(self):
            return self.getToken(CPP14Parser.Using, 0)

        def unqualifiedId(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedIdContext,0)


        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def Doublecolon(self):
            return self.getToken(CPP14Parser.Doublecolon, 0)

        def nestedNameSpecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestedNameSpecifierContext,0)


        def Typename_(self):
            return self.getToken(CPP14Parser.Typename_, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_usingDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingDeclaration" ):
                listener.enterUsingDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingDeclaration" ):
                listener.exitUsingDeclaration(self)




    def usingDeclaration(self):

        localctx = CPP14Parser.UsingDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_usingDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1234
            self.match(CPP14Parser.Using)
            self.state = 1240
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                self.state = 1236
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Typename_:
                    self.state = 1235
                    self.match(CPP14Parser.Typename_)


                self.state = 1238
                self.nestedNameSpecifier(0)
                pass

            elif la_ == 2:
                self.state = 1239
                self.match(CPP14Parser.Doublecolon)
                pass


            self.state = 1242
            self.unqualifiedId()
            self.state = 1243
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsingDirectiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Using(self):
            return self.getToken(CPP14Parser.Using, 0)

        def Namespace(self):
            return self.getToken(CPP14Parser.Namespace, 0)

        def namespaceName(self):
            return self.getTypedRuleContext(CPP14Parser.NamespaceNameContext,0)


        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeSpecifierSeqContext,0)


        def nestedNameSpecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestedNameSpecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_usingDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingDirective" ):
                listener.enterUsingDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingDirective" ):
                listener.exitUsingDirective(self)




    def usingDirective(self):

        localctx = CPP14Parser.UsingDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_usingDirective)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1246
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                self.state = 1245
                self.attributeSpecifierSeq()


            self.state = 1248
            self.match(CPP14Parser.Using)
            self.state = 1249
            self.match(CPP14Parser.Namespace)
            self.state = 1251
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.state = 1250
                self.nestedNameSpecifier(0)


            self.state = 1253
            self.namespaceName()
            self.state = 1254
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsmDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Asm(self):
            return self.getToken(CPP14Parser.Asm, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def StringLiteral(self):
            return self.getToken(CPP14Parser.StringLiteral, 0)

        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_asmDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsmDefinition" ):
                listener.enterAsmDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsmDefinition" ):
                listener.exitAsmDefinition(self)




    def asmDefinition(self):

        localctx = CPP14Parser.AsmDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_asmDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1256
            self.match(CPP14Parser.Asm)
            self.state = 1257
            self.match(CPP14Parser.LeftParen)
            self.state = 1258
            self.match(CPP14Parser.StringLiteral)
            self.state = 1259
            self.match(CPP14Parser.RightParen)
            self.state = 1260
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LinkageSpecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Extern(self):
            return self.getToken(CPP14Parser.Extern, 0)

        def StringLiteral(self):
            return self.getToken(CPP14Parser.StringLiteral, 0)

        def LeftBrace(self):
            return self.getToken(CPP14Parser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(CPP14Parser.RightBrace, 0)

        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext,0)


        def declarationseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_linkageSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLinkageSpecification" ):
                listener.enterLinkageSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLinkageSpecification" ):
                listener.exitLinkageSpecification(self)




    def linkageSpecification(self):

        localctx = CPP14Parser.LinkageSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_linkageSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1262
            self.match(CPP14Parser.Extern)
            self.state = 1263
            self.match(CPP14Parser.StringLiteral)
            self.state = 1270
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftBrace]:
                self.state = 1264
                self.match(CPP14Parser.LeftBrace)
                self.state = 1266
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & ((1 << (CPP14Parser.Alignas - 10)) | (1 << (CPP14Parser.Asm - 10)) | (1 << (CPP14Parser.Auto - 10)) | (1 << (CPP14Parser.Bool - 10)) | (1 << (CPP14Parser.Char - 10)) | (1 << (CPP14Parser.Char16 - 10)) | (1 << (CPP14Parser.Char32 - 10)) | (1 << (CPP14Parser.Class - 10)) | (1 << (CPP14Parser.Const - 10)) | (1 << (CPP14Parser.Constexpr - 10)) | (1 << (CPP14Parser.Decltype - 10)) | (1 << (CPP14Parser.Double - 10)) | (1 << (CPP14Parser.Enum - 10)) | (1 << (CPP14Parser.Explicit - 10)) | (1 << (CPP14Parser.Extern - 10)) | (1 << (CPP14Parser.Float - 10)) | (1 << (CPP14Parser.Friend - 10)) | (1 << (CPP14Parser.Inline - 10)) | (1 << (CPP14Parser.Int - 10)) | (1 << (CPP14Parser.Long - 10)) | (1 << (CPP14Parser.Mutable - 10)) | (1 << (CPP14Parser.Namespace - 10)) | (1 << (CPP14Parser.Operator - 10)) | (1 << (CPP14Parser.Register - 10)) | (1 << (CPP14Parser.Short - 10)) | (1 << (CPP14Parser.Signed - 10)) | (1 << (CPP14Parser.Static - 10)) | (1 << (CPP14Parser.Static_assert - 10)) | (1 << (CPP14Parser.Struct - 10)) | (1 << (CPP14Parser.Template - 10)) | (1 << (CPP14Parser.Thread_local - 10)))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (CPP14Parser.Typedef - 74)) | (1 << (CPP14Parser.Typename_ - 74)) | (1 << (CPP14Parser.Union - 74)) | (1 << (CPP14Parser.Unsigned - 74)) | (1 << (CPP14Parser.Using - 74)) | (1 << (CPP14Parser.Virtual - 74)) | (1 << (CPP14Parser.Void - 74)) | (1 << (CPP14Parser.Volatile - 74)) | (1 << (CPP14Parser.Wchar - 74)) | (1 << (CPP14Parser.LeftParen - 74)) | (1 << (CPP14Parser.LeftBracket - 74)) | (1 << (CPP14Parser.Star - 74)) | (1 << (CPP14Parser.And - 74)) | (1 << (CPP14Parser.Tilde - 74)) | (1 << (CPP14Parser.AndAnd - 74)) | (1 << (CPP14Parser.Doublecolon - 74)) | (1 << (CPP14Parser.Semi - 74)) | (1 << (CPP14Parser.Ellipsis - 74)) | (1 << (CPP14Parser.Identifier - 74)))) != 0):
                    self.state = 1265
                    self.declarationseq()


                self.state = 1268
                self.match(CPP14Parser.RightBrace)
                pass
            elif token in [CPP14Parser.Alignas, CPP14Parser.Asm, CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Class, CPP14Parser.Const, CPP14Parser.Constexpr, CPP14Parser.Decltype, CPP14Parser.Double, CPP14Parser.Enum, CPP14Parser.Explicit, CPP14Parser.Extern, CPP14Parser.Float, CPP14Parser.Friend, CPP14Parser.Inline, CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.Mutable, CPP14Parser.Namespace, CPP14Parser.Operator, CPP14Parser.Register, CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Static, CPP14Parser.Static_assert, CPP14Parser.Struct, CPP14Parser.Template, CPP14Parser.Thread_local, CPP14Parser.Typedef, CPP14Parser.Typename_, CPP14Parser.Union, CPP14Parser.Unsigned, CPP14Parser.Using, CPP14Parser.Virtual, CPP14Parser.Void, CPP14Parser.Volatile, CPP14Parser.Wchar, CPP14Parser.LeftParen, CPP14Parser.LeftBracket, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Tilde, CPP14Parser.AndAnd, CPP14Parser.Doublecolon, CPP14Parser.Semi, CPP14Parser.Ellipsis, CPP14Parser.Identifier]:
                self.state = 1269
                self.declaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeSpecifierSeqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributeSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributeSpecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributeSpecifierContext,i)


        def getRuleIndex(self):
            return CPP14Parser.RULE_attributeSpecifierSeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeSpecifierSeq" ):
                listener.enterAttributeSpecifierSeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeSpecifierSeq" ):
                listener.exitAttributeSpecifierSeq(self)




    def attributeSpecifierSeq(self):

        localctx = CPP14Parser.AttributeSpecifierSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_attributeSpecifierSeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1273 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1272
                    self.attributeSpecifier()

                else:
                    raise NoViableAltException(self)
                self.state = 1275 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,144,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBracket(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.LeftBracket)
            else:
                return self.getToken(CPP14Parser.LeftBracket, i)

        def RightBracket(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.RightBracket)
            else:
                return self.getToken(CPP14Parser.RightBracket, i)

        def attributeList(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeListContext,0)


        def alignmentspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.AlignmentspecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_attributeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeSpecifier" ):
                listener.enterAttributeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeSpecifier" ):
                listener.exitAttributeSpecifier(self)




    def attributeSpecifier(self):

        localctx = CPP14Parser.AttributeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_attributeSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 1285
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1277
                self.match(CPP14Parser.LeftBracket)
                self.state = 1278
                self.match(CPP14Parser.LeftBracket)
                self.state = 1280
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Identifier:
                    self.state = 1279
                    self.attributeList()


                self.state = 1282
                self.match(CPP14Parser.RightBracket)
                self.state = 1283
                self.match(CPP14Parser.RightBracket)
                pass
            elif token in [CPP14Parser.Alignas]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1284
                self.alignmentspecifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlignmentspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Alignas(self):
            return self.getToken(CPP14Parser.Alignas, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def theTypeId(self):
            return self.getTypedRuleContext(CPP14Parser.TheTypeIdContext,0)


        def constantExpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantExpressionContext,0)


        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_alignmentspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlignmentspecifier" ):
                listener.enterAlignmentspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlignmentspecifier" ):
                listener.exitAlignmentspecifier(self)




    def alignmentspecifier(self):

        localctx = CPP14Parser.AlignmentspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_alignmentspecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1287
            self.match(CPP14Parser.Alignas)
            self.state = 1288
            self.match(CPP14Parser.LeftParen)
            self.state = 1291
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                self.state = 1289
                self.theTypeId()
                pass

            elif la_ == 2:
                self.state = 1290
                self.constantExpression()
                pass


            self.state = 1294
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Ellipsis:
                self.state = 1293
                self.match(CPP14Parser.Ellipsis)


            self.state = 1296
            self.match(CPP14Parser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributeContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributeContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.Comma)
            else:
                return self.getToken(CPP14Parser.Comma, i)

        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeList" ):
                listener.enterAttributeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeList" ):
                listener.exitAttributeList(self)




    def attributeList(self):

        localctx = CPP14Parser.AttributeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_attributeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1298
            self.attribute()
            self.state = 1303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CPP14Parser.Comma:
                self.state = 1299
                self.match(CPP14Parser.Comma)
                self.state = 1300
                self.attribute()
                self.state = 1305
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1307
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Ellipsis:
                self.state = 1306
                self.match(CPP14Parser.Ellipsis)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def attributeNamespace(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeNamespaceContext,0)


        def Doublecolon(self):
            return self.getToken(CPP14Parser.Doublecolon, 0)

        def attributeArgumentClause(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeArgumentClauseContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)




    def attribute(self):

        localctx = CPP14Parser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1312
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
            if la_ == 1:
                self.state = 1309
                self.attributeNamespace()
                self.state = 1310
                self.match(CPP14Parser.Doublecolon)


            self.state = 1314
            self.match(CPP14Parser.Identifier)
            self.state = 1316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.LeftParen:
                self.state = 1315
                self.attributeArgumentClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeNamespaceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributeNamespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeNamespace" ):
                listener.enterAttributeNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeNamespace" ):
                listener.exitAttributeNamespace(self)




    def attributeNamespace(self):

        localctx = CPP14Parser.AttributeNamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_attributeNamespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1318
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeArgumentClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def balancedTokenSeq(self):
            return self.getTypedRuleContext(CPP14Parser.BalancedTokenSeqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_attributeArgumentClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeArgumentClause" ):
                listener.enterAttributeArgumentClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeArgumentClause" ):
                listener.exitAttributeArgumentClause(self)




    def attributeArgumentClause(self):

        localctx = CPP14Parser.AttributeArgumentClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_attributeArgumentClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1320
            self.match(CPP14Parser.LeftParen)
            self.state = 1322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.IntegerLiteral) | (1 << CPP14Parser.CharacterLiteral) | (1 << CPP14Parser.FloatingLiteral) | (1 << CPP14Parser.StringLiteral) | (1 << CPP14Parser.BooleanLiteral) | (1 << CPP14Parser.PointerLiteral) | (1 << CPP14Parser.UserDefinedLiteral) | (1 << CPP14Parser.MultiLineMacro) | (1 << CPP14Parser.Directive) | (1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (1 << CPP14Parser.Catch) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Continue) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Default) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Do) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Else) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Export) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.False_) | (1 << CPP14Parser.Final) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.For) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Goto) | (1 << CPP14Parser.If) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Override) | (1 << CPP14Parser.Private) | (1 << CPP14Parser.Protected) | (1 << CPP14Parser.Public) | (1 << CPP14Parser.Register) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Return) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Static_assert - 64)) | (1 << (CPP14Parser.Static_cast - 64)) | (1 << (CPP14Parser.Struct - 64)) | (1 << (CPP14Parser.Switch - 64)) | (1 << (CPP14Parser.Template - 64)) | (1 << (CPP14Parser.This - 64)) | (1 << (CPP14Parser.Thread_local - 64)) | (1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.True_ - 64)) | (1 << (CPP14Parser.Try - 64)) | (1 << (CPP14Parser.Typedef - 64)) | (1 << (CPP14Parser.Typeid_ - 64)) | (1 << (CPP14Parser.Typename_ - 64)) | (1 << (CPP14Parser.Union - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Using - 64)) | (1 << (CPP14Parser.Virtual - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.While - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.Div - 64)) | (1 << (CPP14Parser.Mod - 64)) | (1 << (CPP14Parser.Caret - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.Assign - 64)) | (1 << (CPP14Parser.Less - 64)) | (1 << (CPP14Parser.Greater - 64)) | (1 << (CPP14Parser.PlusAssign - 64)) | (1 << (CPP14Parser.MinusAssign - 64)) | (1 << (CPP14Parser.StarAssign - 64)) | (1 << (CPP14Parser.DivAssign - 64)) | (1 << (CPP14Parser.ModAssign - 64)) | (1 << (CPP14Parser.XorAssign - 64)) | (1 << (CPP14Parser.AndAssign - 64)) | (1 << (CPP14Parser.OrAssign - 64)) | (1 << (CPP14Parser.LeftShiftAssign - 64)) | (1 << (CPP14Parser.RightShiftAssign - 64)) | (1 << (CPP14Parser.Equal - 64)) | (1 << (CPP14Parser.NotEqual - 64)) | (1 << (CPP14Parser.LessEqual - 64)) | (1 << (CPP14Parser.GreaterEqual - 64)) | (1 << (CPP14Parser.AndAnd - 64)) | (1 << (CPP14Parser.OrOr - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Comma - 64)) | (1 << (CPP14Parser.ArrowStar - 64)) | (1 << (CPP14Parser.Arrow - 64)) | (1 << (CPP14Parser.Question - 64)) | (1 << (CPP14Parser.Colon - 64)) | (1 << (CPP14Parser.Doublecolon - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14Parser.Semi - 128)) | (1 << (CPP14Parser.Dot - 128)) | (1 << (CPP14Parser.DotStar - 128)) | (1 << (CPP14Parser.Ellipsis - 128)) | (1 << (CPP14Parser.Identifier - 128)) | (1 << (CPP14Parser.DecimalLiteral - 128)) | (1 << (CPP14Parser.OctalLiteral - 128)) | (1 << (CPP14Parser.HexadecimalLiteral - 128)) | (1 << (CPP14Parser.BinaryLiteral - 128)) | (1 << (CPP14Parser.Integersuffix - 128)) | (1 << (CPP14Parser.UserDefinedIntegerLiteral - 128)) | (1 << (CPP14Parser.UserDefinedFloatingLiteral - 128)) | (1 << (CPP14Parser.UserDefinedStringLiteral - 128)) | (1 << (CPP14Parser.UserDefinedCharacterLiteral - 128)) | (1 << (CPP14Parser.Whitespace - 128)) | (1 << (CPP14Parser.Newline - 128)) | (1 << (CPP14Parser.BlockComment - 128)) | (1 << (CPP14Parser.LineComment - 128)))) != 0):
                self.state = 1321
                self.balancedTokenSeq()


            self.state = 1324
            self.match(CPP14Parser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BalancedTokenSeqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def balancedtoken(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.BalancedtokenContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.BalancedtokenContext,i)


        def getRuleIndex(self):
            return CPP14Parser.RULE_balancedTokenSeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBalancedTokenSeq" ):
                listener.enterBalancedTokenSeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBalancedTokenSeq" ):
                listener.exitBalancedTokenSeq(self)




    def balancedTokenSeq(self):

        localctx = CPP14Parser.BalancedTokenSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_balancedTokenSeq)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1327 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1326
                self.balancedtoken()
                self.state = 1329 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.IntegerLiteral) | (1 << CPP14Parser.CharacterLiteral) | (1 << CPP14Parser.FloatingLiteral) | (1 << CPP14Parser.StringLiteral) | (1 << CPP14Parser.BooleanLiteral) | (1 << CPP14Parser.PointerLiteral) | (1 << CPP14Parser.UserDefinedLiteral) | (1 << CPP14Parser.MultiLineMacro) | (1 << CPP14Parser.Directive) | (1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (1 << CPP14Parser.Catch) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Continue) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Default) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Do) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Else) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Export) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.False_) | (1 << CPP14Parser.Final) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.For) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Goto) | (1 << CPP14Parser.If) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Override) | (1 << CPP14Parser.Private) | (1 << CPP14Parser.Protected) | (1 << CPP14Parser.Public) | (1 << CPP14Parser.Register) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Return) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Static_assert - 64)) | (1 << (CPP14Parser.Static_cast - 64)) | (1 << (CPP14Parser.Struct - 64)) | (1 << (CPP14Parser.Switch - 64)) | (1 << (CPP14Parser.Template - 64)) | (1 << (CPP14Parser.This - 64)) | (1 << (CPP14Parser.Thread_local - 64)) | (1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.True_ - 64)) | (1 << (CPP14Parser.Try - 64)) | (1 << (CPP14Parser.Typedef - 64)) | (1 << (CPP14Parser.Typeid_ - 64)) | (1 << (CPP14Parser.Typename_ - 64)) | (1 << (CPP14Parser.Union - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Using - 64)) | (1 << (CPP14Parser.Virtual - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.While - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.Div - 64)) | (1 << (CPP14Parser.Mod - 64)) | (1 << (CPP14Parser.Caret - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.Assign - 64)) | (1 << (CPP14Parser.Less - 64)) | (1 << (CPP14Parser.Greater - 64)) | (1 << (CPP14Parser.PlusAssign - 64)) | (1 << (CPP14Parser.MinusAssign - 64)) | (1 << (CPP14Parser.StarAssign - 64)) | (1 << (CPP14Parser.DivAssign - 64)) | (1 << (CPP14Parser.ModAssign - 64)) | (1 << (CPP14Parser.XorAssign - 64)) | (1 << (CPP14Parser.AndAssign - 64)) | (1 << (CPP14Parser.OrAssign - 64)) | (1 << (CPP14Parser.LeftShiftAssign - 64)) | (1 << (CPP14Parser.RightShiftAssign - 64)) | (1 << (CPP14Parser.Equal - 64)) | (1 << (CPP14Parser.NotEqual - 64)) | (1 << (CPP14Parser.LessEqual - 64)) | (1 << (CPP14Parser.GreaterEqual - 64)) | (1 << (CPP14Parser.AndAnd - 64)) | (1 << (CPP14Parser.OrOr - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Comma - 64)) | (1 << (CPP14Parser.ArrowStar - 64)) | (1 << (CPP14Parser.Arrow - 64)) | (1 << (CPP14Parser.Question - 64)) | (1 << (CPP14Parser.Colon - 64)) | (1 << (CPP14Parser.Doublecolon - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14Parser.Semi - 128)) | (1 << (CPP14Parser.Dot - 128)) | (1 << (CPP14Parser.DotStar - 128)) | (1 << (CPP14Parser.Ellipsis - 128)) | (1 << (CPP14Parser.Identifier - 128)) | (1 << (CPP14Parser.DecimalLiteral - 128)) | (1 << (CPP14Parser.OctalLiteral - 128)) | (1 << (CPP14Parser.HexadecimalLiteral - 128)) | (1 << (CPP14Parser.BinaryLiteral - 128)) | (1 << (CPP14Parser.Integersuffix - 128)) | (1 << (CPP14Parser.UserDefinedIntegerLiteral - 128)) | (1 << (CPP14Parser.UserDefinedFloatingLiteral - 128)) | (1 << (CPP14Parser.UserDefinedStringLiteral - 128)) | (1 << (CPP14Parser.UserDefinedCharacterLiteral - 128)) | (1 << (CPP14Parser.Whitespace - 128)) | (1 << (CPP14Parser.Newline - 128)) | (1 << (CPP14Parser.BlockComment - 128)) | (1 << (CPP14Parser.LineComment - 128)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BalancedtokenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.LeftParen)
            else:
                return self.getToken(CPP14Parser.LeftParen, i)

        def balancedTokenSeq(self):
            return self.getTypedRuleContext(CPP14Parser.BalancedTokenSeqContext,0)


        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.RightParen)
            else:
                return self.getToken(CPP14Parser.RightParen, i)

        def LeftBracket(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.LeftBracket)
            else:
                return self.getToken(CPP14Parser.LeftBracket, i)

        def RightBracket(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.RightBracket)
            else:
                return self.getToken(CPP14Parser.RightBracket, i)

        def LeftBrace(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.LeftBrace)
            else:
                return self.getToken(CPP14Parser.LeftBrace, i)

        def RightBrace(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.RightBrace)
            else:
                return self.getToken(CPP14Parser.RightBrace, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_balancedtoken

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBalancedtoken" ):
                listener.enterBalancedtoken(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBalancedtoken" ):
                listener.exitBalancedtoken(self)




    def balancedtoken(self):

        localctx = CPP14Parser.BalancedtokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_balancedtoken)
        self._la = 0 # Token type
        try:
            self.state = 1348
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftParen]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1331
                self.match(CPP14Parser.LeftParen)
                self.state = 1332
                self.balancedTokenSeq()
                self.state = 1333
                self.match(CPP14Parser.RightParen)
                pass
            elif token in [CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1335
                self.match(CPP14Parser.LeftBracket)
                self.state = 1336
                self.balancedTokenSeq()
                self.state = 1337
                self.match(CPP14Parser.RightBracket)
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1339
                self.match(CPP14Parser.LeftBrace)
                self.state = 1340
                self.balancedTokenSeq()
                self.state = 1341
                self.match(CPP14Parser.RightBrace)
                pass
            elif token in [CPP14Parser.IntegerLiteral, CPP14Parser.CharacterLiteral, CPP14Parser.FloatingLiteral, CPP14Parser.StringLiteral, CPP14Parser.BooleanLiteral, CPP14Parser.PointerLiteral, CPP14Parser.UserDefinedLiteral, CPP14Parser.MultiLineMacro, CPP14Parser.Directive, CPP14Parser.Alignas, CPP14Parser.Alignof, CPP14Parser.Asm, CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Break, CPP14Parser.Case, CPP14Parser.Catch, CPP14Parser.Char, CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Class, CPP14Parser.Const, CPP14Parser.Constexpr, CPP14Parser.Const_cast, CPP14Parser.Continue, CPP14Parser.Decltype, CPP14Parser.Default, CPP14Parser.Delete, CPP14Parser.Do, CPP14Parser.Double, CPP14Parser.Dynamic_cast, CPP14Parser.Else, CPP14Parser.Enum, CPP14Parser.Explicit, CPP14Parser.Export, CPP14Parser.Extern, CPP14Parser.False_, CPP14Parser.Final, CPP14Parser.Float, CPP14Parser.For, CPP14Parser.Friend, CPP14Parser.Goto, CPP14Parser.If, CPP14Parser.Inline, CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.Mutable, CPP14Parser.Namespace, CPP14Parser.New, CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator, CPP14Parser.Override, CPP14Parser.Private, CPP14Parser.Protected, CPP14Parser.Public, CPP14Parser.Register, CPP14Parser.Reinterpret_cast, CPP14Parser.Return, CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Sizeof, CPP14Parser.Static, CPP14Parser.Static_assert, CPP14Parser.Static_cast, CPP14Parser.Struct, CPP14Parser.Switch, CPP14Parser.Template, CPP14Parser.This, CPP14Parser.Thread_local, CPP14Parser.Throw, CPP14Parser.True_, CPP14Parser.Try, CPP14Parser.Typedef, CPP14Parser.Typeid_, CPP14Parser.Typename_, CPP14Parser.Union, CPP14Parser.Unsigned, CPP14Parser.Using, CPP14Parser.Virtual, CPP14Parser.Void, CPP14Parser.Volatile, CPP14Parser.Wchar, CPP14Parser.While, CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.Div, CPP14Parser.Mod, CPP14Parser.Caret, CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not, CPP14Parser.Assign, CPP14Parser.Less, CPP14Parser.Greater, CPP14Parser.PlusAssign, CPP14Parser.MinusAssign, CPP14Parser.StarAssign, CPP14Parser.DivAssign, CPP14Parser.ModAssign, CPP14Parser.XorAssign, CPP14Parser.AndAssign, CPP14Parser.OrAssign, CPP14Parser.LeftShiftAssign, CPP14Parser.RightShiftAssign, CPP14Parser.Equal, CPP14Parser.NotEqual, CPP14Parser.LessEqual, CPP14Parser.GreaterEqual, CPP14Parser.AndAnd, CPP14Parser.OrOr, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Comma, CPP14Parser.ArrowStar, CPP14Parser.Arrow, CPP14Parser.Question, CPP14Parser.Colon, CPP14Parser.Doublecolon, CPP14Parser.Semi, CPP14Parser.Dot, CPP14Parser.DotStar, CPP14Parser.Ellipsis, CPP14Parser.Identifier, CPP14Parser.DecimalLiteral, CPP14Parser.OctalLiteral, CPP14Parser.HexadecimalLiteral, CPP14Parser.BinaryLiteral, CPP14Parser.Integersuffix, CPP14Parser.UserDefinedIntegerLiteral, CPP14Parser.UserDefinedFloatingLiteral, CPP14Parser.UserDefinedStringLiteral, CPP14Parser.UserDefinedCharacterLiteral, CPP14Parser.Whitespace, CPP14Parser.Newline, CPP14Parser.BlockComment, CPP14Parser.LineComment]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1344 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1343
                        _la = self._input.LA(1)
                        if _la <= 0 or ((((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & ((1 << (CPP14Parser.LeftParen - 85)) | (1 << (CPP14Parser.RightParen - 85)) | (1 << (CPP14Parser.LeftBracket - 85)) | (1 << (CPP14Parser.RightBracket - 85)) | (1 << (CPP14Parser.LeftBrace - 85)) | (1 << (CPP14Parser.RightBrace - 85)))) != 0):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1346 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,155,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitDeclaratorListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.InitDeclaratorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.InitDeclaratorContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.Comma)
            else:
                return self.getToken(CPP14Parser.Comma, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_initDeclaratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclaratorList" ):
                listener.enterInitDeclaratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclaratorList" ):
                listener.exitInitDeclaratorList(self)




    def initDeclaratorList(self):

        localctx = CPP14Parser.InitDeclaratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_initDeclaratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1350
            self.initDeclarator()
            self.state = 1355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CPP14Parser.Comma:
                self.state = 1351
                self.match(CPP14Parser.Comma)
                self.state = 1352
                self.initDeclarator()
                self.state = 1357
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext,0)


        def initializer(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_initDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclarator" ):
                listener.enterInitDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclarator" ):
                listener.exitInitDeclarator(self)




    def initDeclarator(self):

        localctx = CPP14Parser.InitDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_initDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1358
            self.declarator()
            self.state = 1360
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & ((1 << (CPP14Parser.LeftParen - 85)) | (1 << (CPP14Parser.LeftBrace - 85)) | (1 << (CPP14Parser.Assign - 85)))) != 0):
                self.state = 1359
                self.initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pointerDeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PointerDeclaratorContext,0)


        def noPointerDeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoPointerDeclaratorContext,0)


        def parametersAndQualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersAndQualifiersContext,0)


        def trailingReturnType(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingReturnTypeContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarator" ):
                listener.enterDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarator" ):
                listener.exitDeclarator(self)




    def declarator(self):

        localctx = CPP14Parser.DeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_declarator)
        try:
            self.state = 1367
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1362
                self.pointerDeclarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1363
                self.noPointerDeclarator(0)
                self.state = 1364
                self.parametersAndQualifiers()
                self.state = 1365
                self.trailingReturnType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noPointerDeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoPointerDeclaratorContext,0)


        def pointerOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.PointerOperatorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.PointerOperatorContext,i)


        def Const(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.Const)
            else:
                return self.getToken(CPP14Parser.Const, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_pointerDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointerDeclarator" ):
                listener.enterPointerDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointerDeclarator" ):
                listener.exitPointerDeclarator(self)




    def pointerDeclarator(self):

        localctx = CPP14Parser.PointerDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_pointerDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1375
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,161,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1369
                    self.pointerOperator()
                    self.state = 1371
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CPP14Parser.Const:
                        self.state = 1370
                        self.match(CPP14Parser.Const)

             
                self.state = 1377
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,161,self._ctx)

            self.state = 1378
            self.noPointerDeclarator(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoPointerDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaratorid(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratoridContext,0)


        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeSpecifierSeqContext,0)


        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def pointerDeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PointerDeclaratorContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def noPointerDeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoPointerDeclaratorContext,0)


        def parametersAndQualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersAndQualifiersContext,0)


        def LeftBracket(self):
            return self.getToken(CPP14Parser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(CPP14Parser.RightBracket, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_noPointerDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoPointerDeclarator" ):
                listener.enterNoPointerDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoPointerDeclarator" ):
                listener.exitNoPointerDeclarator(self)



    def noPointerDeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoPointerDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 226
        self.enterRecursionRule(localctx, 226, self.RULE_noPointerDeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1389
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Decltype, CPP14Parser.Operator, CPP14Parser.Tilde, CPP14Parser.Doublecolon, CPP14Parser.Ellipsis, CPP14Parser.Identifier]:
                self.state = 1381
                self.declaratorid()
                self.state = 1383
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
                if la_ == 1:
                    self.state = 1382
                    self.attributeSpecifierSeq()


                pass
            elif token in [CPP14Parser.LeftParen]:
                self.state = 1385
                self.match(CPP14Parser.LeftParen)
                self.state = 1386
                self.pointerDeclarator()
                self.state = 1387
                self.match(CPP14Parser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1405
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,167,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.NoPointerDeclaratorContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_noPointerDeclarator)
                    self.state = 1391
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1401
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.LeftParen]:
                        self.state = 1392
                        self.parametersAndQualifiers()
                        pass
                    elif token in [CPP14Parser.LeftBracket]:
                        self.state = 1393
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 1395
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.IntegerLiteral) | (1 << CPP14Parser.CharacterLiteral) | (1 << CPP14Parser.FloatingLiteral) | (1 << CPP14Parser.StringLiteral) | (1 << CPP14Parser.BooleanLiteral) | (1 << CPP14Parser.PointerLiteral) | (1 << CPP14Parser.UserDefinedLiteral) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.Static_cast - 65)) | (1 << (CPP14Parser.This - 65)) | (1 << (CPP14Parser.Typeid_ - 65)) | (1 << (CPP14Parser.Typename_ - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)))) != 0) or _la==CPP14Parser.Identifier:
                            self.state = 1394
                            self.constantExpression()


                        self.state = 1397
                        self.match(CPP14Parser.RightBracket)
                        self.state = 1399
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
                        if la_ == 1:
                            self.state = 1398
                            self.attributeSpecifierSeq()


                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1407
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,167,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ParametersAndQualifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def parameterDeclarationClause(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterDeclarationClauseContext,0)


        def cvqualifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.CvqualifierseqContext,0)


        def refqualifier(self):
            return self.getTypedRuleContext(CPP14Parser.RefqualifierContext,0)


        def exceptionSpecification(self):
            return self.getTypedRuleContext(CPP14Parser.ExceptionSpecificationContext,0)


        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeSpecifierSeqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_parametersAndQualifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParametersAndQualifiers" ):
                listener.enterParametersAndQualifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParametersAndQualifiers" ):
                listener.exitParametersAndQualifiers(self)




    def parametersAndQualifiers(self):

        localctx = CPP14Parser.ParametersAndQualifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_parametersAndQualifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1408
            self.match(CPP14Parser.LeftParen)
            self.state = 1410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & ((1 << (CPP14Parser.Alignas - 10)) | (1 << (CPP14Parser.Auto - 10)) | (1 << (CPP14Parser.Bool - 10)) | (1 << (CPP14Parser.Char - 10)) | (1 << (CPP14Parser.Char16 - 10)) | (1 << (CPP14Parser.Char32 - 10)) | (1 << (CPP14Parser.Class - 10)) | (1 << (CPP14Parser.Const - 10)) | (1 << (CPP14Parser.Constexpr - 10)) | (1 << (CPP14Parser.Decltype - 10)) | (1 << (CPP14Parser.Double - 10)) | (1 << (CPP14Parser.Enum - 10)) | (1 << (CPP14Parser.Explicit - 10)) | (1 << (CPP14Parser.Extern - 10)) | (1 << (CPP14Parser.Float - 10)) | (1 << (CPP14Parser.Friend - 10)) | (1 << (CPP14Parser.Inline - 10)) | (1 << (CPP14Parser.Int - 10)) | (1 << (CPP14Parser.Long - 10)) | (1 << (CPP14Parser.Mutable - 10)) | (1 << (CPP14Parser.Register - 10)) | (1 << (CPP14Parser.Short - 10)) | (1 << (CPP14Parser.Signed - 10)) | (1 << (CPP14Parser.Static - 10)) | (1 << (CPP14Parser.Struct - 10)) | (1 << (CPP14Parser.Thread_local - 10)))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (CPP14Parser.Typedef - 74)) | (1 << (CPP14Parser.Typename_ - 74)) | (1 << (CPP14Parser.Union - 74)) | (1 << (CPP14Parser.Unsigned - 74)) | (1 << (CPP14Parser.Virtual - 74)) | (1 << (CPP14Parser.Void - 74)) | (1 << (CPP14Parser.Volatile - 74)) | (1 << (CPP14Parser.Wchar - 74)) | (1 << (CPP14Parser.LeftBracket - 74)) | (1 << (CPP14Parser.Doublecolon - 74)) | (1 << (CPP14Parser.Identifier - 74)))) != 0):
                self.state = 1409
                self.parameterDeclarationClause()


            self.state = 1412
            self.match(CPP14Parser.RightParen)
            self.state = 1414
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.state = 1413
                self.cvqualifierseq()


            self.state = 1417
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                self.state = 1416
                self.refqualifier()


            self.state = 1420
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.state = 1419
                self.exceptionSpecification()


            self.state = 1423
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
            if la_ == 1:
                self.state = 1422
                self.attributeSpecifierSeq()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailingReturnTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Arrow(self):
            return self.getToken(CPP14Parser.Arrow, 0)

        def trailingTypeSpecifierSeq(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingTypeSpecifierSeqContext,0)


        def abstractDeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_trailingReturnType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailingReturnType" ):
                listener.enterTrailingReturnType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailingReturnType" ):
                listener.exitTrailingReturnType(self)




    def trailingReturnType(self):

        localctx = CPP14Parser.TrailingReturnTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_trailingReturnType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1425
            self.match(CPP14Parser.Arrow)
            self.state = 1426
            self.trailingTypeSpecifierSeq()
            self.state = 1428
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                self.state = 1427
                self.abstractDeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def And(self):
            return self.getToken(CPP14Parser.And, 0)

        def AndAnd(self):
            return self.getToken(CPP14Parser.AndAnd, 0)

        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeSpecifierSeqContext,0)


        def Star(self):
            return self.getToken(CPP14Parser.Star, 0)

        def nestedNameSpecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestedNameSpecifierContext,0)


        def cvqualifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.CvqualifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_pointerOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointerOperator" ):
                listener.enterPointerOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointerOperator" ):
                listener.exitPointerOperator(self)




    def pointerOperator(self):

        localctx = CPP14Parser.PointerOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_pointerOperator)
        self._la = 0 # Token type
        try:
            self.state = 1444
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.And, CPP14Parser.AndAnd]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1430
                _la = self._input.LA(1)
                if not(_la==CPP14Parser.And or _la==CPP14Parser.AndAnd):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1432
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
                if la_ == 1:
                    self.state = 1431
                    self.attributeSpecifierSeq()


                pass
            elif token in [CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1435
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Decltype or _la==CPP14Parser.Doublecolon or _la==CPP14Parser.Identifier:
                    self.state = 1434
                    self.nestedNameSpecifier(0)


                self.state = 1437
                self.match(CPP14Parser.Star)
                self.state = 1439
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
                if la_ == 1:
                    self.state = 1438
                    self.attributeSpecifierSeq()


                self.state = 1442
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
                if la_ == 1:
                    self.state = 1441
                    self.cvqualifierseq()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CvqualifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cvQualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.CvQualifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.CvQualifierContext,i)


        def getRuleIndex(self):
            return CPP14Parser.RULE_cvqualifierseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCvqualifierseq" ):
                listener.enterCvqualifierseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCvqualifierseq" ):
                listener.exitCvqualifierseq(self)




    def cvqualifierseq(self):

        localctx = CPP14Parser.CvqualifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_cvqualifierseq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1447 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1446
                    self.cvQualifier()

                else:
                    raise NoViableAltException(self)
                self.state = 1449 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,179,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CvQualifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Const(self):
            return self.getToken(CPP14Parser.Const, 0)

        def Volatile(self):
            return self.getToken(CPP14Parser.Volatile, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_cvQualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCvQualifier" ):
                listener.enterCvQualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCvQualifier" ):
                listener.exitCvQualifier(self)




    def cvQualifier(self):

        localctx = CPP14Parser.CvQualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_cvQualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1451
            _la = self._input.LA(1)
            if not(_la==CPP14Parser.Const or _la==CPP14Parser.Volatile):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RefqualifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def And(self):
            return self.getToken(CPP14Parser.And, 0)

        def AndAnd(self):
            return self.getToken(CPP14Parser.AndAnd, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_refqualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefqualifier" ):
                listener.enterRefqualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefqualifier" ):
                listener.exitRefqualifier(self)




    def refqualifier(self):

        localctx = CPP14Parser.RefqualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_refqualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1453
            _la = self._input.LA(1)
            if not(_la==CPP14Parser.And or _la==CPP14Parser.AndAnd):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaratoridContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def idExpression(self):
            return self.getTypedRuleContext(CPP14Parser.IdExpressionContext,0)


        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_declaratorid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaratorid" ):
                listener.enterDeclaratorid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaratorid" ):
                listener.exitDeclaratorid(self)




    def declaratorid(self):

        localctx = CPP14Parser.DeclaratoridContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_declaratorid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Ellipsis:
                self.state = 1455
                self.match(CPP14Parser.Ellipsis)


            self.state = 1458
            self.idExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TheTypeIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSpecifierSeq(self):
            return self.getTypedRuleContext(CPP14Parser.TypeSpecifierSeqContext,0)


        def abstractDeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_theTypeId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheTypeId" ):
                listener.enterTheTypeId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheTypeId" ):
                listener.exitTheTypeId(self)




    def theTypeId(self):

        localctx = CPP14Parser.TheTypeIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_theTypeId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1460
            self.typeSpecifierSeq()
            self.state = 1462
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
            if la_ == 1:
                self.state = 1461
                self.abstractDeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbstractDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pointerAbstractDeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PointerAbstractDeclaratorContext,0)


        def parametersAndQualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersAndQualifiersContext,0)


        def trailingReturnType(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingReturnTypeContext,0)


        def noPointerAbstractDeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoPointerAbstractDeclaratorContext,0)


        def abstractPackDeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractPackDeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_abstractDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractDeclarator" ):
                listener.enterAbstractDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractDeclarator" ):
                listener.exitAbstractDeclarator(self)




    def abstractDeclarator(self):

        localctx = CPP14Parser.AbstractDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_abstractDeclarator)
        try:
            self.state = 1472
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1464
                self.pointerAbstractDeclarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1466
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
                if la_ == 1:
                    self.state = 1465
                    self.noPointerAbstractDeclarator(0)


                self.state = 1468
                self.parametersAndQualifiers()
                self.state = 1469
                self.trailingReturnType()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1471
                self.abstractPackDeclarator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerAbstractDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noPointerAbstractDeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoPointerAbstractDeclaratorContext,0)


        def pointerOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.PointerOperatorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.PointerOperatorContext,i)


        def getRuleIndex(self):
            return CPP14Parser.RULE_pointerAbstractDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointerAbstractDeclarator" ):
                listener.enterPointerAbstractDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointerAbstractDeclarator" ):
                listener.exitPointerAbstractDeclarator(self)




    def pointerAbstractDeclarator(self):

        localctx = CPP14Parser.PointerAbstractDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_pointerAbstractDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 1483
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftParen, CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1474
                self.noPointerAbstractDeclarator(0)
                pass
            elif token in [CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.AndAnd, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1476 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1475
                    self.pointerOperator()
                    self.state = 1478 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==CPP14Parser.Decltype or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (CPP14Parser.Star - 93)) | (1 << (CPP14Parser.And - 93)) | (1 << (CPP14Parser.AndAnd - 93)) | (1 << (CPP14Parser.Doublecolon - 93)) | (1 << (CPP14Parser.Identifier - 93)))) != 0)):
                        break

                self.state = 1481
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
                if la_ == 1:
                    self.state = 1480
                    self.noPointerAbstractDeclarator(0)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoPointerAbstractDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parametersAndQualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersAndQualifiersContext,0)


        def LeftBracket(self):
            return self.getToken(CPP14Parser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(CPP14Parser.RightBracket, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantExpressionContext,0)


        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeSpecifierSeqContext,0)


        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def pointerAbstractDeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PointerAbstractDeclaratorContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def noPointerAbstractDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.NoPointerAbstractDeclaratorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.NoPointerAbstractDeclaratorContext,i)


        def getRuleIndex(self):
            return CPP14Parser.RULE_noPointerAbstractDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoPointerAbstractDeclarator" ):
                listener.enterNoPointerAbstractDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoPointerAbstractDeclarator" ):
                listener.exitNoPointerAbstractDeclarator(self)



    def noPointerAbstractDeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoPointerAbstractDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 248
        self.enterRecursionRule(localctx, 248, self.RULE_noPointerAbstractDeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1499
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
            if la_ == 1:
                self.state = 1486
                self.parametersAndQualifiers()
                pass

            elif la_ == 2:
                self.state = 1487
                self.match(CPP14Parser.LeftBracket)
                self.state = 1489
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.IntegerLiteral) | (1 << CPP14Parser.CharacterLiteral) | (1 << CPP14Parser.FloatingLiteral) | (1 << CPP14Parser.StringLiteral) | (1 << CPP14Parser.BooleanLiteral) | (1 << CPP14Parser.PointerLiteral) | (1 << CPP14Parser.UserDefinedLiteral) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.Static_cast - 65)) | (1 << (CPP14Parser.This - 65)) | (1 << (CPP14Parser.Typeid_ - 65)) | (1 << (CPP14Parser.Typename_ - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)))) != 0) or _la==CPP14Parser.Identifier:
                    self.state = 1488
                    self.constantExpression()


                self.state = 1491
                self.match(CPP14Parser.RightBracket)
                self.state = 1493
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
                if la_ == 1:
                    self.state = 1492
                    self.attributeSpecifierSeq()


                pass

            elif la_ == 3:
                self.state = 1495
                self.match(CPP14Parser.LeftParen)
                self.state = 1496
                self.pointerAbstractDeclarator()
                self.state = 1497
                self.match(CPP14Parser.RightParen)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1516
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,193,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.NoPointerAbstractDeclaratorContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_noPointerAbstractDeclarator)
                    self.state = 1501
                    if not self.precpred(self._ctx, 4):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                    self.state = 1512
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
                    if la_ == 1:
                        self.state = 1502
                        self.parametersAndQualifiers()
                        pass

                    elif la_ == 2:
                        self.state = 1503
                        self.noPointerAbstractDeclarator(0)
                        self.state = 1504
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 1506
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.IntegerLiteral) | (1 << CPP14Parser.CharacterLiteral) | (1 << CPP14Parser.FloatingLiteral) | (1 << CPP14Parser.StringLiteral) | (1 << CPP14Parser.BooleanLiteral) | (1 << CPP14Parser.PointerLiteral) | (1 << CPP14Parser.UserDefinedLiteral) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.Static_cast - 65)) | (1 << (CPP14Parser.This - 65)) | (1 << (CPP14Parser.Typeid_ - 65)) | (1 << (CPP14Parser.Typename_ - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)))) != 0) or _la==CPP14Parser.Identifier:
                            self.state = 1505
                            self.constantExpression()


                        self.state = 1508
                        self.match(CPP14Parser.RightBracket)
                        self.state = 1510
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
                        if la_ == 1:
                            self.state = 1509
                            self.attributeSpecifierSeq()


                        pass

             
                self.state = 1518
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,193,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AbstractPackDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noPointerAbstractPackDeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoPointerAbstractPackDeclaratorContext,0)


        def pointerOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.PointerOperatorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.PointerOperatorContext,i)


        def getRuleIndex(self):
            return CPP14Parser.RULE_abstractPackDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractPackDeclarator" ):
                listener.enterAbstractPackDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractPackDeclarator" ):
                listener.exitAbstractPackDeclarator(self)




    def abstractPackDeclarator(self):

        localctx = CPP14Parser.AbstractPackDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_abstractPackDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1522
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CPP14Parser.Decltype or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (CPP14Parser.Star - 93)) | (1 << (CPP14Parser.And - 93)) | (1 << (CPP14Parser.AndAnd - 93)) | (1 << (CPP14Parser.Doublecolon - 93)) | (1 << (CPP14Parser.Identifier - 93)))) != 0):
                self.state = 1519
                self.pointerOperator()
                self.state = 1524
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1525
            self.noPointerAbstractPackDeclarator(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoPointerAbstractPackDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def noPointerAbstractPackDeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoPointerAbstractPackDeclaratorContext,0)


        def parametersAndQualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersAndQualifiersContext,0)


        def LeftBracket(self):
            return self.getToken(CPP14Parser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(CPP14Parser.RightBracket, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantExpressionContext,0)


        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeSpecifierSeqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_noPointerAbstractPackDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoPointerAbstractPackDeclarator" ):
                listener.enterNoPointerAbstractPackDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoPointerAbstractPackDeclarator" ):
                listener.exitNoPointerAbstractPackDeclarator(self)



    def noPointerAbstractPackDeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoPointerAbstractPackDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 252
        self.enterRecursionRule(localctx, 252, self.RULE_noPointerAbstractPackDeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1528
            self.match(CPP14Parser.Ellipsis)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1544
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,198,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.NoPointerAbstractPackDeclaratorContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_noPointerAbstractPackDeclarator)
                    self.state = 1530
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1540
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.LeftParen]:
                        self.state = 1531
                        self.parametersAndQualifiers()
                        pass
                    elif token in [CPP14Parser.LeftBracket]:
                        self.state = 1532
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 1534
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.IntegerLiteral) | (1 << CPP14Parser.CharacterLiteral) | (1 << CPP14Parser.FloatingLiteral) | (1 << CPP14Parser.StringLiteral) | (1 << CPP14Parser.BooleanLiteral) | (1 << CPP14Parser.PointerLiteral) | (1 << CPP14Parser.UserDefinedLiteral) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.Static_cast - 65)) | (1 << (CPP14Parser.This - 65)) | (1 << (CPP14Parser.Typeid_ - 65)) | (1 << (CPP14Parser.Typename_ - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)))) != 0) or _la==CPP14Parser.Identifier:
                            self.state = 1533
                            self.constantExpression()


                        self.state = 1536
                        self.match(CPP14Parser.RightBracket)
                        self.state = 1538
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
                        if la_ == 1:
                            self.state = 1537
                            self.attributeSpecifierSeq()


                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1546
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,198,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ParameterDeclarationClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterDeclarationList(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterDeclarationListContext,0)


        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_parameterDeclarationClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterDeclarationClause" ):
                listener.enterParameterDeclarationClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterDeclarationClause" ):
                listener.exitParameterDeclarationClause(self)




    def parameterDeclarationClause(self):

        localctx = CPP14Parser.ParameterDeclarationClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_parameterDeclarationClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1547
            self.parameterDeclarationList()
            self.state = 1552
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Comma or _la==CPP14Parser.Ellipsis:
                self.state = 1549
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Comma:
                    self.state = 1548
                    self.match(CPP14Parser.Comma)


                self.state = 1551
                self.match(CPP14Parser.Ellipsis)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterDeclarationListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.ParameterDeclarationContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.ParameterDeclarationContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.Comma)
            else:
                return self.getToken(CPP14Parser.Comma, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_parameterDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterDeclarationList" ):
                listener.enterParameterDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterDeclarationList" ):
                listener.exitParameterDeclarationList(self)




    def parameterDeclarationList(self):

        localctx = CPP14Parser.ParameterDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_parameterDeclarationList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1554
            self.parameterDeclaration()
            self.state = 1559
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,201,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1555
                    self.match(CPP14Parser.Comma)
                    self.state = 1556
                    self.parameterDeclaration() 
                self.state = 1561
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,201,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declSpecifierSeq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclSpecifierSeqContext,0)


        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeSpecifierSeqContext,0)


        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext,0)


        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def initializerClause(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerClauseContext,0)


        def abstractDeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_parameterDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterDeclaration" ):
                listener.enterParameterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterDeclaration" ):
                listener.exitParameterDeclaration(self)




    def parameterDeclaration(self):

        localctx = CPP14Parser.ParameterDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_parameterDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1563
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                self.state = 1562
                self.attributeSpecifierSeq()


            self.state = 1565
            self.declSpecifierSeq()

            self.state = 1570
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
            if la_ == 1:
                self.state = 1566
                self.declarator()
                pass

            elif la_ == 2:
                self.state = 1568
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
                if la_ == 1:
                    self.state = 1567
                    self.abstractDeclarator()


                pass


            self.state = 1574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Assign:
                self.state = 1572
                self.match(CPP14Parser.Assign)
                self.state = 1573
                self.initializerClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext,0)


        def functionBody(self):
            return self.getTypedRuleContext(CPP14Parser.FunctionBodyContext,0)


        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeSpecifierSeqContext,0)


        def declSpecifierSeq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclSpecifierSeqContext,0)


        def virtualSpecifierSeq(self):
            return self.getTypedRuleContext(CPP14Parser.VirtualSpecifierSeqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_functionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDefinition" ):
                listener.enterFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDefinition" ):
                listener.exitFunctionDefinition(self)




    def functionDefinition(self):

        localctx = CPP14Parser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_functionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1577
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                self.state = 1576
                self.attributeSpecifierSeq()


            self.state = 1580
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
            if la_ == 1:
                self.state = 1579
                self.declSpecifierSeq()


            self.state = 1582
            self.declarator()
            self.state = 1584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Final or _la==CPP14Parser.Override:
                self.state = 1583
                self.virtualSpecifierSeq()


            self.state = 1586
            self.functionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compoundStatement(self):
            return self.getTypedRuleContext(CPP14Parser.CompoundStatementContext,0)


        def constructorInitializer(self):
            return self.getTypedRuleContext(CPP14Parser.ConstructorInitializerContext,0)


        def functionTryBlock(self):
            return self.getTypedRuleContext(CPP14Parser.FunctionTryBlockContext,0)


        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def Default(self):
            return self.getToken(CPP14Parser.Default, 0)

        def Delete(self):
            return self.getToken(CPP14Parser.Delete, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_functionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionBody" ):
                listener.enterFunctionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionBody" ):
                listener.exitFunctionBody(self)




    def functionBody(self):

        localctx = CPP14Parser.FunctionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_functionBody)
        self._la = 0 # Token type
        try:
            self.state = 1596
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftBrace, CPP14Parser.Colon]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Colon:
                    self.state = 1588
                    self.constructorInitializer()


                self.state = 1591
                self.compoundStatement()
                pass
            elif token in [CPP14Parser.Try]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1592
                self.functionTryBlock()
                pass
            elif token in [CPP14Parser.Assign]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1593
                self.match(CPP14Parser.Assign)
                self.state = 1594
                _la = self._input.LA(1)
                if not(_la==CPP14Parser.Default or _la==CPP14Parser.Delete):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1595
                self.match(CPP14Parser.Semi)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def braceOrEqualInitializer(self):
            return self.getTypedRuleContext(CPP14Parser.BraceOrEqualInitializerContext,0)


        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def expressionList(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionListContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)




    def initializer(self):

        localctx = CPP14Parser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_initializer)
        try:
            self.state = 1603
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftBrace, CPP14Parser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1598
                self.braceOrEqualInitializer()
                pass
            elif token in [CPP14Parser.LeftParen]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1599
                self.match(CPP14Parser.LeftParen)
                self.state = 1600
                self.expressionList()
                self.state = 1601
                self.match(CPP14Parser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BraceOrEqualInitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def initializerClause(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerClauseContext,0)


        def bracedInitList(self):
            return self.getTypedRuleContext(CPP14Parser.BracedInitListContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_braceOrEqualInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBraceOrEqualInitializer" ):
                listener.enterBraceOrEqualInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBraceOrEqualInitializer" ):
                listener.exitBraceOrEqualInitializer(self)




    def braceOrEqualInitializer(self):

        localctx = CPP14Parser.BraceOrEqualInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_braceOrEqualInitializer)
        try:
            self.state = 1608
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1605
                self.match(CPP14Parser.Assign)
                self.state = 1606
                self.initializerClause()
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1607
                self.bracedInitList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentExpressionContext,0)


        def bracedInitList(self):
            return self.getTypedRuleContext(CPP14Parser.BracedInitListContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_initializerClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializerClause" ):
                listener.enterInitializerClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializerClause" ):
                listener.exitInitializerClause(self)




    def initializerClause(self):

        localctx = CPP14Parser.InitializerClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_initializerClause)
        try:
            self.state = 1612
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.IntegerLiteral, CPP14Parser.CharacterLiteral, CPP14Parser.FloatingLiteral, CPP14Parser.StringLiteral, CPP14Parser.BooleanLiteral, CPP14Parser.PointerLiteral, CPP14Parser.UserDefinedLiteral, CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Const_cast, CPP14Parser.Decltype, CPP14Parser.Delete, CPP14Parser.Double, CPP14Parser.Dynamic_cast, CPP14Parser.Float, CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.New, CPP14Parser.Noexcept, CPP14Parser.Operator, CPP14Parser.Reinterpret_cast, CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Sizeof, CPP14Parser.Static_cast, CPP14Parser.This, CPP14Parser.Throw, CPP14Parser.Typeid_, CPP14Parser.Typename_, CPP14Parser.Unsigned, CPP14Parser.Void, CPP14Parser.Wchar, CPP14Parser.LeftParen, CPP14Parser.LeftBracket, CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1610
                self.assignmentExpression()
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1611
                self.bracedInitList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializerClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.InitializerClauseContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.InitializerClauseContext,i)


        def Ellipsis(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.Ellipsis)
            else:
                return self.getToken(CPP14Parser.Ellipsis, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.Comma)
            else:
                return self.getToken(CPP14Parser.Comma, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_initializerList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializerList" ):
                listener.enterInitializerList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializerList" ):
                listener.exitInitializerList(self)




    def initializerList(self):

        localctx = CPP14Parser.InitializerListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_initializerList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1614
            self.initializerClause()
            self.state = 1616
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Ellipsis:
                self.state = 1615
                self.match(CPP14Parser.Ellipsis)


            self.state = 1625
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,216,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1618
                    self.match(CPP14Parser.Comma)
                    self.state = 1619
                    self.initializerClause()
                    self.state = 1621
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CPP14Parser.Ellipsis:
                        self.state = 1620
                        self.match(CPP14Parser.Ellipsis)

             
                self.state = 1627
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,216,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BracedInitListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBrace(self):
            return self.getToken(CPP14Parser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(CPP14Parser.RightBrace, 0)

        def initializerList(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerListContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_bracedInitList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBracedInitList" ):
                listener.enterBracedInitList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBracedInitList" ):
                listener.exitBracedInitList(self)




    def bracedInitList(self):

        localctx = CPP14Parser.BracedInitListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_bracedInitList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1628
            self.match(CPP14Parser.LeftBrace)
            self.state = 1633
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.IntegerLiteral) | (1 << CPP14Parser.CharacterLiteral) | (1 << CPP14Parser.FloatingLiteral) | (1 << CPP14Parser.StringLiteral) | (1 << CPP14Parser.BooleanLiteral) | (1 << CPP14Parser.PointerLiteral) | (1 << CPP14Parser.UserDefinedLiteral) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.Static_cast - 65)) | (1 << (CPP14Parser.This - 65)) | (1 << (CPP14Parser.Throw - 65)) | (1 << (CPP14Parser.Typeid_ - 65)) | (1 << (CPP14Parser.Typename_ - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.LeftBrace - 65)) | (1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)))) != 0) or _la==CPP14Parser.Identifier:
                self.state = 1629
                self.initializerList()
                self.state = 1631
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Comma:
                    self.state = 1630
                    self.match(CPP14Parser.Comma)




            self.state = 1635
            self.match(CPP14Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def simpleTemplateId(self):
            return self.getTypedRuleContext(CPP14Parser.SimpleTemplateIdContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_className

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassName" ):
                listener.enterClassName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassName" ):
                listener.exitClassName(self)




    def className(self):

        localctx = CPP14Parser.ClassNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_className)
        try:
            self.state = 1639
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1637
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1638
                self.simpleTemplateId()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classHead(self):
            return self.getTypedRuleContext(CPP14Parser.ClassHeadContext,0)


        def LeftBrace(self):
            return self.getToken(CPP14Parser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(CPP14Parser.RightBrace, 0)

        def memberSpecification(self):
            return self.getTypedRuleContext(CPP14Parser.MemberSpecificationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_classSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassSpecifier" ):
                listener.enterClassSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassSpecifier" ):
                listener.exitClassSpecifier(self)




    def classSpecifier(self):

        localctx = CPP14Parser.ClassSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_classSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1641
            self.classHead()
            self.state = 1642
            self.match(CPP14Parser.LeftBrace)
            self.state = 1644
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & ((1 << (CPP14Parser.Alignas - 10)) | (1 << (CPP14Parser.Auto - 10)) | (1 << (CPP14Parser.Bool - 10)) | (1 << (CPP14Parser.Char - 10)) | (1 << (CPP14Parser.Char16 - 10)) | (1 << (CPP14Parser.Char32 - 10)) | (1 << (CPP14Parser.Class - 10)) | (1 << (CPP14Parser.Const - 10)) | (1 << (CPP14Parser.Constexpr - 10)) | (1 << (CPP14Parser.Decltype - 10)) | (1 << (CPP14Parser.Double - 10)) | (1 << (CPP14Parser.Enum - 10)) | (1 << (CPP14Parser.Explicit - 10)) | (1 << (CPP14Parser.Extern - 10)) | (1 << (CPP14Parser.Float - 10)) | (1 << (CPP14Parser.Friend - 10)) | (1 << (CPP14Parser.Inline - 10)) | (1 << (CPP14Parser.Int - 10)) | (1 << (CPP14Parser.Long - 10)) | (1 << (CPP14Parser.Mutable - 10)) | (1 << (CPP14Parser.Operator - 10)) | (1 << (CPP14Parser.Private - 10)) | (1 << (CPP14Parser.Protected - 10)) | (1 << (CPP14Parser.Public - 10)) | (1 << (CPP14Parser.Register - 10)) | (1 << (CPP14Parser.Short - 10)) | (1 << (CPP14Parser.Signed - 10)) | (1 << (CPP14Parser.Static - 10)) | (1 << (CPP14Parser.Static_assert - 10)) | (1 << (CPP14Parser.Struct - 10)) | (1 << (CPP14Parser.Template - 10)) | (1 << (CPP14Parser.Thread_local - 10)))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (CPP14Parser.Typedef - 74)) | (1 << (CPP14Parser.Typename_ - 74)) | (1 << (CPP14Parser.Union - 74)) | (1 << (CPP14Parser.Unsigned - 74)) | (1 << (CPP14Parser.Using - 74)) | (1 << (CPP14Parser.Virtual - 74)) | (1 << (CPP14Parser.Void - 74)) | (1 << (CPP14Parser.Volatile - 74)) | (1 << (CPP14Parser.Wchar - 74)) | (1 << (CPP14Parser.LeftParen - 74)) | (1 << (CPP14Parser.LeftBracket - 74)) | (1 << (CPP14Parser.Star - 74)) | (1 << (CPP14Parser.And - 74)) | (1 << (CPP14Parser.Tilde - 74)) | (1 << (CPP14Parser.AndAnd - 74)) | (1 << (CPP14Parser.Colon - 74)) | (1 << (CPP14Parser.Doublecolon - 74)) | (1 << (CPP14Parser.Semi - 74)) | (1 << (CPP14Parser.Ellipsis - 74)) | (1 << (CPP14Parser.Identifier - 74)))) != 0):
                self.state = 1643
                self.memberSpecification()


            self.state = 1646
            self.match(CPP14Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassHeadContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classKey(self):
            return self.getTypedRuleContext(CPP14Parser.ClassKeyContext,0)


        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeSpecifierSeqContext,0)


        def classHeadName(self):
            return self.getTypedRuleContext(CPP14Parser.ClassHeadNameContext,0)


        def baseClause(self):
            return self.getTypedRuleContext(CPP14Parser.BaseClauseContext,0)


        def classVirtSpecifier(self):
            return self.getTypedRuleContext(CPP14Parser.ClassVirtSpecifierContext,0)


        def Union(self):
            return self.getToken(CPP14Parser.Union, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_classHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassHead" ):
                listener.enterClassHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassHead" ):
                listener.exitClassHead(self)




    def classHead(self):

        localctx = CPP14Parser.ClassHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_classHead)
        self._la = 0 # Token type
        try:
            self.state = 1671
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Class, CPP14Parser.Struct]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1648
                self.classKey()
                self.state = 1650
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1649
                    self.attributeSpecifierSeq()


                self.state = 1656
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Decltype or _la==CPP14Parser.Doublecolon or _la==CPP14Parser.Identifier:
                    self.state = 1652
                    self.classHeadName()
                    self.state = 1654
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CPP14Parser.Final:
                        self.state = 1653
                        self.classVirtSpecifier()




                self.state = 1659
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Colon:
                    self.state = 1658
                    self.baseClause()


                pass
            elif token in [CPP14Parser.Union]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1661
                self.match(CPP14Parser.Union)
                self.state = 1663
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1662
                    self.attributeSpecifierSeq()


                self.state = 1669
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Decltype or _la==CPP14Parser.Doublecolon or _la==CPP14Parser.Identifier:
                    self.state = 1665
                    self.classHeadName()
                    self.state = 1667
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CPP14Parser.Final:
                        self.state = 1666
                        self.classVirtSpecifier()




                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassHeadNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def className(self):
            return self.getTypedRuleContext(CPP14Parser.ClassNameContext,0)


        def nestedNameSpecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestedNameSpecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_classHeadName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassHeadName" ):
                listener.enterClassHeadName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassHeadName" ):
                listener.exitClassHeadName(self)




    def classHeadName(self):

        localctx = CPP14Parser.ClassHeadNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_classHeadName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1674
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
            if la_ == 1:
                self.state = 1673
                self.nestedNameSpecifier(0)


            self.state = 1676
            self.className()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassVirtSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Final(self):
            return self.getToken(CPP14Parser.Final, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_classVirtSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassVirtSpecifier" ):
                listener.enterClassVirtSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassVirtSpecifier" ):
                listener.exitClassVirtSpecifier(self)




    def classVirtSpecifier(self):

        localctx = CPP14Parser.ClassVirtSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_classVirtSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1678
            self.match(CPP14Parser.Final)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassKeyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def Struct(self):
            return self.getToken(CPP14Parser.Struct, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_classKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassKey" ):
                listener.enterClassKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassKey" ):
                listener.exitClassKey(self)




    def classKey(self):

        localctx = CPP14Parser.ClassKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_classKey)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1680
            _la = self._input.LA(1)
            if not(_la==CPP14Parser.Class or _la==CPP14Parser.Struct):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberSpecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memberdeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.MemberdeclarationContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.MemberdeclarationContext,i)


        def accessSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AccessSpecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AccessSpecifierContext,i)


        def Colon(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.Colon)
            else:
                return self.getToken(CPP14Parser.Colon, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_memberSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberSpecification" ):
                listener.enterMemberSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberSpecification" ):
                listener.exitMemberSpecification(self)




    def memberSpecification(self):

        localctx = CPP14Parser.MemberSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_memberSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1686 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1686
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Alignas, CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Class, CPP14Parser.Const, CPP14Parser.Constexpr, CPP14Parser.Decltype, CPP14Parser.Double, CPP14Parser.Enum, CPP14Parser.Explicit, CPP14Parser.Extern, CPP14Parser.Float, CPP14Parser.Friend, CPP14Parser.Inline, CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.Mutable, CPP14Parser.Operator, CPP14Parser.Register, CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Static, CPP14Parser.Static_assert, CPP14Parser.Struct, CPP14Parser.Template, CPP14Parser.Thread_local, CPP14Parser.Typedef, CPP14Parser.Typename_, CPP14Parser.Union, CPP14Parser.Unsigned, CPP14Parser.Using, CPP14Parser.Virtual, CPP14Parser.Void, CPP14Parser.Volatile, CPP14Parser.Wchar, CPP14Parser.LeftParen, CPP14Parser.LeftBracket, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Tilde, CPP14Parser.AndAnd, CPP14Parser.Colon, CPP14Parser.Doublecolon, CPP14Parser.Semi, CPP14Parser.Ellipsis, CPP14Parser.Identifier]:
                    self.state = 1682
                    self.memberdeclaration()
                    pass
                elif token in [CPP14Parser.Private, CPP14Parser.Protected, CPP14Parser.Public]:
                    self.state = 1683
                    self.accessSpecifier()
                    self.state = 1684
                    self.match(CPP14Parser.Colon)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1688 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & ((1 << (CPP14Parser.Alignas - 10)) | (1 << (CPP14Parser.Auto - 10)) | (1 << (CPP14Parser.Bool - 10)) | (1 << (CPP14Parser.Char - 10)) | (1 << (CPP14Parser.Char16 - 10)) | (1 << (CPP14Parser.Char32 - 10)) | (1 << (CPP14Parser.Class - 10)) | (1 << (CPP14Parser.Const - 10)) | (1 << (CPP14Parser.Constexpr - 10)) | (1 << (CPP14Parser.Decltype - 10)) | (1 << (CPP14Parser.Double - 10)) | (1 << (CPP14Parser.Enum - 10)) | (1 << (CPP14Parser.Explicit - 10)) | (1 << (CPP14Parser.Extern - 10)) | (1 << (CPP14Parser.Float - 10)) | (1 << (CPP14Parser.Friend - 10)) | (1 << (CPP14Parser.Inline - 10)) | (1 << (CPP14Parser.Int - 10)) | (1 << (CPP14Parser.Long - 10)) | (1 << (CPP14Parser.Mutable - 10)) | (1 << (CPP14Parser.Operator - 10)) | (1 << (CPP14Parser.Private - 10)) | (1 << (CPP14Parser.Protected - 10)) | (1 << (CPP14Parser.Public - 10)) | (1 << (CPP14Parser.Register - 10)) | (1 << (CPP14Parser.Short - 10)) | (1 << (CPP14Parser.Signed - 10)) | (1 << (CPP14Parser.Static - 10)) | (1 << (CPP14Parser.Static_assert - 10)) | (1 << (CPP14Parser.Struct - 10)) | (1 << (CPP14Parser.Template - 10)) | (1 << (CPP14Parser.Thread_local - 10)))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (CPP14Parser.Typedef - 74)) | (1 << (CPP14Parser.Typename_ - 74)) | (1 << (CPP14Parser.Union - 74)) | (1 << (CPP14Parser.Unsigned - 74)) | (1 << (CPP14Parser.Using - 74)) | (1 << (CPP14Parser.Virtual - 74)) | (1 << (CPP14Parser.Void - 74)) | (1 << (CPP14Parser.Volatile - 74)) | (1 << (CPP14Parser.Wchar - 74)) | (1 << (CPP14Parser.LeftParen - 74)) | (1 << (CPP14Parser.LeftBracket - 74)) | (1 << (CPP14Parser.Star - 74)) | (1 << (CPP14Parser.And - 74)) | (1 << (CPP14Parser.Tilde - 74)) | (1 << (CPP14Parser.AndAnd - 74)) | (1 << (CPP14Parser.Colon - 74)) | (1 << (CPP14Parser.Doublecolon - 74)) | (1 << (CPP14Parser.Semi - 74)) | (1 << (CPP14Parser.Ellipsis - 74)) | (1 << (CPP14Parser.Identifier - 74)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeSpecifierSeqContext,0)


        def declSpecifierSeq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclSpecifierSeqContext,0)


        def memberDeclaratorList(self):
            return self.getTypedRuleContext(CPP14Parser.MemberDeclaratorListContext,0)


        def functionDefinition(self):
            return self.getTypedRuleContext(CPP14Parser.FunctionDefinitionContext,0)


        def usingDeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.UsingDeclarationContext,0)


        def staticAssertDeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.StaticAssertDeclarationContext,0)


        def templateDeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateDeclarationContext,0)


        def aliasDeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.AliasDeclarationContext,0)


        def emptyDeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.EmptyDeclarationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_memberdeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberdeclaration" ):
                listener.enterMemberdeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberdeclaration" ):
                listener.exitMemberdeclaration(self)




    def memberdeclaration(self):

        localctx = CPP14Parser.MemberdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_memberdeclaration)
        self._la = 0 # Token type
        try:
            self.state = 1706
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1691
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
                if la_ == 1:
                    self.state = 1690
                    self.attributeSpecifierSeq()


                self.state = 1694
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
                if la_ == 1:
                    self.state = 1693
                    self.declSpecifierSeq()


                self.state = 1697
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Operator))) != 0) or ((((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & ((1 << (CPP14Parser.LeftParen - 85)) | (1 << (CPP14Parser.LeftBracket - 85)) | (1 << (CPP14Parser.Star - 85)) | (1 << (CPP14Parser.And - 85)) | (1 << (CPP14Parser.Tilde - 85)) | (1 << (CPP14Parser.AndAnd - 85)) | (1 << (CPP14Parser.Colon - 85)) | (1 << (CPP14Parser.Doublecolon - 85)) | (1 << (CPP14Parser.Ellipsis - 85)) | (1 << (CPP14Parser.Identifier - 85)))) != 0):
                    self.state = 1696
                    self.memberDeclaratorList()


                self.state = 1699
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1700
                self.functionDefinition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1701
                self.usingDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1702
                self.staticAssertDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1703
                self.templateDeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1704
                self.aliasDeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1705
                self.emptyDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberDeclaratorListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memberDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.MemberDeclaratorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.MemberDeclaratorContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.Comma)
            else:
                return self.getToken(CPP14Parser.Comma, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_memberDeclaratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberDeclaratorList" ):
                listener.enterMemberDeclaratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberDeclaratorList" ):
                listener.exitMemberDeclaratorList(self)




    def memberDeclaratorList(self):

        localctx = CPP14Parser.MemberDeclaratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_memberDeclaratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1708
            self.memberDeclarator()
            self.state = 1713
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CPP14Parser.Comma:
                self.state = 1709
                self.match(CPP14Parser.Comma)
                self.state = 1710
                self.memberDeclarator()
                self.state = 1715
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext,0)


        def virtualSpecifierSeq(self):
            return self.getTypedRuleContext(CPP14Parser.VirtualSpecifierSeqContext,0)


        def pureSpecifier(self):
            return self.getTypedRuleContext(CPP14Parser.PureSpecifierContext,0)


        def braceOrEqualInitializer(self):
            return self.getTypedRuleContext(CPP14Parser.BraceOrEqualInitializerContext,0)


        def Colon(self):
            return self.getToken(CPP14Parser.Colon, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantExpressionContext,0)


        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeSpecifierSeqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_memberDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberDeclarator" ):
                listener.enterMemberDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberDeclarator" ):
                listener.exitMemberDeclarator(self)




    def memberDeclarator(self):

        localctx = CPP14Parser.MemberDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_memberDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 1736
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1716
                self.declarator()
                self.state = 1726
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
                if la_ == 1:
                    self.state = 1718
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CPP14Parser.Final or _la==CPP14Parser.Override:
                        self.state = 1717
                        self.virtualSpecifierSeq()


                    self.state = 1721
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CPP14Parser.Assign:
                        self.state = 1720
                        self.pureSpecifier()


                    pass

                elif la_ == 2:
                    self.state = 1724
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CPP14Parser.LeftBrace or _la==CPP14Parser.Assign:
                        self.state = 1723
                        self.braceOrEqualInitializer()


                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1729
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Identifier:
                    self.state = 1728
                    self.match(CPP14Parser.Identifier)


                self.state = 1732
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1731
                    self.attributeSpecifierSeq()


                self.state = 1734
                self.match(CPP14Parser.Colon)
                self.state = 1735
                self.constantExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VirtualSpecifierSeqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def virtualSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.VirtualSpecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.VirtualSpecifierContext,i)


        def getRuleIndex(self):
            return CPP14Parser.RULE_virtualSpecifierSeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVirtualSpecifierSeq" ):
                listener.enterVirtualSpecifierSeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVirtualSpecifierSeq" ):
                listener.exitVirtualSpecifierSeq(self)




    def virtualSpecifierSeq(self):

        localctx = CPP14Parser.VirtualSpecifierSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_virtualSpecifierSeq)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1739 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1738
                self.virtualSpecifier()
                self.state = 1741 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==CPP14Parser.Final or _la==CPP14Parser.Override):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VirtualSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Override(self):
            return self.getToken(CPP14Parser.Override, 0)

        def Final(self):
            return self.getToken(CPP14Parser.Final, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_virtualSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVirtualSpecifier" ):
                listener.enterVirtualSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVirtualSpecifier" ):
                listener.exitVirtualSpecifier(self)




    def virtualSpecifier(self):

        localctx = CPP14Parser.VirtualSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_virtualSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1743
            _la = self._input.LA(1)
            if not(_la==CPP14Parser.Final or _la==CPP14Parser.Override):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PureSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.val = None # Token

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def OctalLiteral(self):
            return self.getToken(CPP14Parser.OctalLiteral, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_pureSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPureSpecifier" ):
                listener.enterPureSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPureSpecifier" ):
                listener.exitPureSpecifier(self)




    def pureSpecifier(self):

        localctx = CPP14Parser.PureSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_pureSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1745
            self.match(CPP14Parser.Assign)
            self.state = 1746
            localctx.val = self.match(CPP14Parser.OctalLiteral)
            if((None if localctx.val is None else localctx.val.text).compareTo("0")!=0) throw new InputMismatchException(this);
            		
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BaseClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(CPP14Parser.Colon, 0)

        def baseSpecifierList(self):
            return self.getTypedRuleContext(CPP14Parser.BaseSpecifierListContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_baseClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBaseClause" ):
                listener.enterBaseClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBaseClause" ):
                listener.exitBaseClause(self)




    def baseClause(self):

        localctx = CPP14Parser.BaseClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_baseClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1749
            self.match(CPP14Parser.Colon)
            self.state = 1750
            self.baseSpecifierList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BaseSpecifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def baseSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.BaseSpecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.BaseSpecifierContext,i)


        def Ellipsis(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.Ellipsis)
            else:
                return self.getToken(CPP14Parser.Ellipsis, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.Comma)
            else:
                return self.getToken(CPP14Parser.Comma, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_baseSpecifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBaseSpecifierList" ):
                listener.enterBaseSpecifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBaseSpecifierList" ):
                listener.exitBaseSpecifierList(self)




    def baseSpecifierList(self):

        localctx = CPP14Parser.BaseSpecifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_baseSpecifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1752
            self.baseSpecifier()
            self.state = 1754
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Ellipsis:
                self.state = 1753
                self.match(CPP14Parser.Ellipsis)


            self.state = 1763
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CPP14Parser.Comma:
                self.state = 1756
                self.match(CPP14Parser.Comma)
                self.state = 1757
                self.baseSpecifier()
                self.state = 1759
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Ellipsis:
                    self.state = 1758
                    self.match(CPP14Parser.Ellipsis)


                self.state = 1765
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BaseSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def baseTypeSpecifier(self):
            return self.getTypedRuleContext(CPP14Parser.BaseTypeSpecifierContext,0)


        def Virtual(self):
            return self.getToken(CPP14Parser.Virtual, 0)

        def accessSpecifier(self):
            return self.getTypedRuleContext(CPP14Parser.AccessSpecifierContext,0)


        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeSpecifierSeqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_baseSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBaseSpecifier" ):
                listener.enterBaseSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBaseSpecifier" ):
                listener.exitBaseSpecifier(self)




    def baseSpecifier(self):

        localctx = CPP14Parser.BaseSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_baseSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                self.state = 1766
                self.attributeSpecifierSeq()


            self.state = 1781
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Decltype, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.state = 1769
                self.baseTypeSpecifier()
                pass
            elif token in [CPP14Parser.Virtual]:
                self.state = 1770
                self.match(CPP14Parser.Virtual)
                self.state = 1772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Private) | (1 << CPP14Parser.Protected) | (1 << CPP14Parser.Public))) != 0):
                    self.state = 1771
                    self.accessSpecifier()


                self.state = 1774
                self.baseTypeSpecifier()
                pass
            elif token in [CPP14Parser.Private, CPP14Parser.Protected, CPP14Parser.Public]:
                self.state = 1775
                self.accessSpecifier()
                self.state = 1777
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Virtual:
                    self.state = 1776
                    self.match(CPP14Parser.Virtual)


                self.state = 1779
                self.baseTypeSpecifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassOrDeclTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def className(self):
            return self.getTypedRuleContext(CPP14Parser.ClassNameContext,0)


        def nestedNameSpecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestedNameSpecifierContext,0)


        def decltypeSpecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DecltypeSpecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_classOrDeclType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassOrDeclType" ):
                listener.enterClassOrDeclType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassOrDeclType" ):
                listener.exitClassOrDeclType(self)




    def classOrDeclType(self):

        localctx = CPP14Parser.ClassOrDeclTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_classOrDeclType)
        try:
            self.state = 1788
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,253,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1784
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
                if la_ == 1:
                    self.state = 1783
                    self.nestedNameSpecifier(0)


                self.state = 1786
                self.className()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1787
                self.decltypeSpecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BaseTypeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classOrDeclType(self):
            return self.getTypedRuleContext(CPP14Parser.ClassOrDeclTypeContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_baseTypeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBaseTypeSpecifier" ):
                listener.enterBaseTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBaseTypeSpecifier" ):
                listener.exitBaseTypeSpecifier(self)




    def baseTypeSpecifier(self):

        localctx = CPP14Parser.BaseTypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_baseTypeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1790
            self.classOrDeclType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AccessSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Private(self):
            return self.getToken(CPP14Parser.Private, 0)

        def Protected(self):
            return self.getToken(CPP14Parser.Protected, 0)

        def Public(self):
            return self.getToken(CPP14Parser.Public, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_accessSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessSpecifier" ):
                listener.enterAccessSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessSpecifier" ):
                listener.exitAccessSpecifier(self)




    def accessSpecifier(self):

        localctx = CPP14Parser.AccessSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_accessSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1792
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Private) | (1 << CPP14Parser.Protected) | (1 << CPP14Parser.Public))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConversionFunctionIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Operator(self):
            return self.getToken(CPP14Parser.Operator, 0)

        def conversionTypeId(self):
            return self.getTypedRuleContext(CPP14Parser.ConversionTypeIdContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_conversionFunctionId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversionFunctionId" ):
                listener.enterConversionFunctionId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversionFunctionId" ):
                listener.exitConversionFunctionId(self)




    def conversionFunctionId(self):

        localctx = CPP14Parser.ConversionFunctionIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_conversionFunctionId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1794
            self.match(CPP14Parser.Operator)
            self.state = 1795
            self.conversionTypeId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConversionTypeIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSpecifierSeq(self):
            return self.getTypedRuleContext(CPP14Parser.TypeSpecifierSeqContext,0)


        def conversionDeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.ConversionDeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_conversionTypeId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversionTypeId" ):
                listener.enterConversionTypeId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversionTypeId" ):
                listener.exitConversionTypeId(self)




    def conversionTypeId(self):

        localctx = CPP14Parser.ConversionTypeIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_conversionTypeId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1797
            self.typeSpecifierSeq()
            self.state = 1799
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,254,self._ctx)
            if la_ == 1:
                self.state = 1798
                self.conversionDeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConversionDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pointerOperator(self):
            return self.getTypedRuleContext(CPP14Parser.PointerOperatorContext,0)


        def conversionDeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.ConversionDeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_conversionDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversionDeclarator" ):
                listener.enterConversionDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversionDeclarator" ):
                listener.exitConversionDeclarator(self)




    def conversionDeclarator(self):

        localctx = CPP14Parser.ConversionDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_conversionDeclarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1801
            self.pointerOperator()
            self.state = 1803
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
            if la_ == 1:
                self.state = 1802
                self.conversionDeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorInitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(CPP14Parser.Colon, 0)

        def memInitializerList(self):
            return self.getTypedRuleContext(CPP14Parser.MemInitializerListContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_constructorInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorInitializer" ):
                listener.enterConstructorInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorInitializer" ):
                listener.exitConstructorInitializer(self)




    def constructorInitializer(self):

        localctx = CPP14Parser.ConstructorInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_constructorInitializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1805
            self.match(CPP14Parser.Colon)
            self.state = 1806
            self.memInitializerList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemInitializerListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memInitializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.MemInitializerContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.MemInitializerContext,i)


        def Ellipsis(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.Ellipsis)
            else:
                return self.getToken(CPP14Parser.Ellipsis, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.Comma)
            else:
                return self.getToken(CPP14Parser.Comma, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_memInitializerList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemInitializerList" ):
                listener.enterMemInitializerList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemInitializerList" ):
                listener.exitMemInitializerList(self)




    def memInitializerList(self):

        localctx = CPP14Parser.MemInitializerListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_memInitializerList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1808
            self.memInitializer()
            self.state = 1810
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Ellipsis:
                self.state = 1809
                self.match(CPP14Parser.Ellipsis)


            self.state = 1819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CPP14Parser.Comma:
                self.state = 1812
                self.match(CPP14Parser.Comma)
                self.state = 1813
                self.memInitializer()
                self.state = 1815
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Ellipsis:
                    self.state = 1814
                    self.match(CPP14Parser.Ellipsis)


                self.state = 1821
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemInitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def meminitializerid(self):
            return self.getTypedRuleContext(CPP14Parser.MeminitializeridContext,0)


        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def bracedInitList(self):
            return self.getTypedRuleContext(CPP14Parser.BracedInitListContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionListContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_memInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemInitializer" ):
                listener.enterMemInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemInitializer" ):
                listener.exitMemInitializer(self)




    def memInitializer(self):

        localctx = CPP14Parser.MemInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_memInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1822
            self.meminitializerid()
            self.state = 1829
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftParen]:
                self.state = 1823
                self.match(CPP14Parser.LeftParen)
                self.state = 1825
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.IntegerLiteral) | (1 << CPP14Parser.CharacterLiteral) | (1 << CPP14Parser.FloatingLiteral) | (1 << CPP14Parser.StringLiteral) | (1 << CPP14Parser.BooleanLiteral) | (1 << CPP14Parser.PointerLiteral) | (1 << CPP14Parser.UserDefinedLiteral) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.Static_cast - 65)) | (1 << (CPP14Parser.This - 65)) | (1 << (CPP14Parser.Throw - 65)) | (1 << (CPP14Parser.Typeid_ - 65)) | (1 << (CPP14Parser.Typename_ - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.LeftBrace - 65)) | (1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)))) != 0) or _la==CPP14Parser.Identifier:
                    self.state = 1824
                    self.expressionList()


                self.state = 1827
                self.match(CPP14Parser.RightParen)
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.state = 1828
                self.bracedInitList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MeminitializeridContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classOrDeclType(self):
            return self.getTypedRuleContext(CPP14Parser.ClassOrDeclTypeContext,0)


        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_meminitializerid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeminitializerid" ):
                listener.enterMeminitializerid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeminitializerid" ):
                listener.exitMeminitializerid(self)




    def meminitializerid(self):

        localctx = CPP14Parser.MeminitializeridContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_meminitializerid)
        try:
            self.state = 1833
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,261,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1831
                self.classOrDeclType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1832
                self.match(CPP14Parser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperatorFunctionIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Operator(self):
            return self.getToken(CPP14Parser.Operator, 0)

        def theOperator(self):
            return self.getTypedRuleContext(CPP14Parser.TheOperatorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_operatorFunctionId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperatorFunctionId" ):
                listener.enterOperatorFunctionId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperatorFunctionId" ):
                listener.exitOperatorFunctionId(self)




    def operatorFunctionId(self):

        localctx = CPP14Parser.OperatorFunctionIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_operatorFunctionId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1835
            self.match(CPP14Parser.Operator)
            self.state = 1836
            self.theOperator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralOperatorIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Operator(self):
            return self.getToken(CPP14Parser.Operator, 0)

        def StringLiteral(self):
            return self.getToken(CPP14Parser.StringLiteral, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def UserDefinedStringLiteral(self):
            return self.getToken(CPP14Parser.UserDefinedStringLiteral, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_literalOperatorId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralOperatorId" ):
                listener.enterLiteralOperatorId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralOperatorId" ):
                listener.exitLiteralOperatorId(self)




    def literalOperatorId(self):

        localctx = CPP14Parser.LiteralOperatorIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_literalOperatorId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1838
            self.match(CPP14Parser.Operator)
            self.state = 1842
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.StringLiteral]:
                self.state = 1839
                self.match(CPP14Parser.StringLiteral)
                self.state = 1840
                self.match(CPP14Parser.Identifier)
                pass
            elif token in [CPP14Parser.UserDefinedStringLiteral]:
                self.state = 1841
                self.match(CPP14Parser.UserDefinedStringLiteral)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def Less(self):
            return self.getToken(CPP14Parser.Less, 0)

        def templateparameterList(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateparameterListContext,0)


        def Greater(self):
            return self.getToken(CPP14Parser.Greater, 0)

        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_templateDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateDeclaration" ):
                listener.enterTemplateDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateDeclaration" ):
                listener.exitTemplateDeclaration(self)




    def templateDeclaration(self):

        localctx = CPP14Parser.TemplateDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_templateDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1844
            self.match(CPP14Parser.Template)
            self.state = 1845
            self.match(CPP14Parser.Less)
            self.state = 1846
            self.templateparameterList()
            self.state = 1847
            self.match(CPP14Parser.Greater)
            self.state = 1848
            self.declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateparameterListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def templateParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TemplateParameterContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TemplateParameterContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.Comma)
            else:
                return self.getToken(CPP14Parser.Comma, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templateparameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateparameterList" ):
                listener.enterTemplateparameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateparameterList" ):
                listener.exitTemplateparameterList(self)




    def templateparameterList(self):

        localctx = CPP14Parser.TemplateparameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_templateparameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1850
            self.templateParameter()
            self.state = 1855
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CPP14Parser.Comma:
                self.state = 1851
                self.match(CPP14Parser.Comma)
                self.state = 1852
                self.templateParameter()
                self.state = 1857
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameter(self):
            return self.getTypedRuleContext(CPP14Parser.TypeParameterContext,0)


        def parameterDeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterDeclarationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_templateParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateParameter" ):
                listener.enterTemplateParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateParameter" ):
                listener.exitTemplateParameter(self)




    def templateParameter(self):

        localctx = CPP14Parser.TemplateParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_templateParameter)
        try:
            self.state = 1860
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,264,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1858
                self.typeParameter()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1859
                self.parameterDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def Typename_(self):
            return self.getToken(CPP14Parser.Typename_, 0)

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def theTypeId(self):
            return self.getTypedRuleContext(CPP14Parser.TheTypeIdContext,0)


        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def Less(self):
            return self.getToken(CPP14Parser.Less, 0)

        def templateparameterList(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateparameterListContext,0)


        def Greater(self):
            return self.getToken(CPP14Parser.Greater, 0)

        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_typeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameter" ):
                listener.enterTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameter" ):
                listener.exitTypeParameter(self)




    def typeParameter(self):

        localctx = CPP14Parser.TypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_typeParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1871
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Class, CPP14Parser.Template]:
                self.state = 1867
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Template:
                    self.state = 1862
                    self.match(CPP14Parser.Template)
                    self.state = 1863
                    self.match(CPP14Parser.Less)
                    self.state = 1864
                    self.templateparameterList()
                    self.state = 1865
                    self.match(CPP14Parser.Greater)


                self.state = 1869
                self.match(CPP14Parser.Class)
                pass
            elif token in [CPP14Parser.Typename_]:
                self.state = 1870
                self.match(CPP14Parser.Typename_)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1884
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,270,self._ctx)
            if la_ == 1:
                self.state = 1874
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Ellipsis:
                    self.state = 1873
                    self.match(CPP14Parser.Ellipsis)


                self.state = 1877
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Identifier:
                    self.state = 1876
                    self.match(CPP14Parser.Identifier)


                pass

            elif la_ == 2:
                self.state = 1880
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Identifier:
                    self.state = 1879
                    self.match(CPP14Parser.Identifier)


                self.state = 1882
                self.match(CPP14Parser.Assign)
                self.state = 1883
                self.theTypeId()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleTemplateIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def templateName(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateNameContext,0)


        def Less(self):
            return self.getToken(CPP14Parser.Less, 0)

        def Greater(self):
            return self.getToken(CPP14Parser.Greater, 0)

        def templateArgumentList(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateArgumentListContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_simpleTemplateId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleTemplateId" ):
                listener.enterSimpleTemplateId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleTemplateId" ):
                listener.exitSimpleTemplateId(self)




    def simpleTemplateId(self):

        localctx = CPP14Parser.SimpleTemplateIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_simpleTemplateId)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1886
            self.templateName()
            self.state = 1887
            self.match(CPP14Parser.Less)
            self.state = 1889
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.IntegerLiteral) | (1 << CPP14Parser.CharacterLiteral) | (1 << CPP14Parser.FloatingLiteral) | (1 << CPP14Parser.StringLiteral) | (1 << CPP14Parser.BooleanLiteral) | (1 << CPP14Parser.PointerLiteral) | (1 << CPP14Parser.UserDefinedLiteral) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.Static_cast - 65)) | (1 << (CPP14Parser.Struct - 65)) | (1 << (CPP14Parser.This - 65)) | (1 << (CPP14Parser.Typeid_ - 65)) | (1 << (CPP14Parser.Typename_ - 65)) | (1 << (CPP14Parser.Union - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Volatile - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)))) != 0) or _la==CPP14Parser.Identifier:
                self.state = 1888
                self.templateArgumentList()


            self.state = 1891
            self.match(CPP14Parser.Greater)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleTemplateId(self):
            return self.getTypedRuleContext(CPP14Parser.SimpleTemplateIdContext,0)


        def Less(self):
            return self.getToken(CPP14Parser.Less, 0)

        def Greater(self):
            return self.getToken(CPP14Parser.Greater, 0)

        def operatorFunctionId(self):
            return self.getTypedRuleContext(CPP14Parser.OperatorFunctionIdContext,0)


        def literalOperatorId(self):
            return self.getTypedRuleContext(CPP14Parser.LiteralOperatorIdContext,0)


        def templateArgumentList(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateArgumentListContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_templateId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateId" ):
                listener.enterTemplateId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateId" ):
                listener.exitTemplateId(self)




    def templateId(self):

        localctx = CPP14Parser.TemplateIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_templateId)
        self._la = 0 # Token type
        try:
            self.state = 1904
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1893
                self.simpleTemplateId()
                pass
            elif token in [CPP14Parser.Operator]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1896
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
                if la_ == 1:
                    self.state = 1894
                    self.operatorFunctionId()
                    pass

                elif la_ == 2:
                    self.state = 1895
                    self.literalOperatorId()
                    pass


                self.state = 1898
                self.match(CPP14Parser.Less)
                self.state = 1900
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.IntegerLiteral) | (1 << CPP14Parser.CharacterLiteral) | (1 << CPP14Parser.FloatingLiteral) | (1 << CPP14Parser.StringLiteral) | (1 << CPP14Parser.BooleanLiteral) | (1 << CPP14Parser.PointerLiteral) | (1 << CPP14Parser.UserDefinedLiteral) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.Static_cast - 65)) | (1 << (CPP14Parser.Struct - 65)) | (1 << (CPP14Parser.This - 65)) | (1 << (CPP14Parser.Typeid_ - 65)) | (1 << (CPP14Parser.Typename_ - 65)) | (1 << (CPP14Parser.Union - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Volatile - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)))) != 0) or _la==CPP14Parser.Identifier:
                    self.state = 1899
                    self.templateArgumentList()


                self.state = 1902
                self.match(CPP14Parser.Greater)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templateName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateName" ):
                listener.enterTemplateName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateName" ):
                listener.exitTemplateName(self)




    def templateName(self):

        localctx = CPP14Parser.TemplateNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_templateName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1906
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateArgumentListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def templateArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TemplateArgumentContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TemplateArgumentContext,i)


        def Ellipsis(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.Ellipsis)
            else:
                return self.getToken(CPP14Parser.Ellipsis, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.Comma)
            else:
                return self.getToken(CPP14Parser.Comma, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templateArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateArgumentList" ):
                listener.enterTemplateArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateArgumentList" ):
                listener.exitTemplateArgumentList(self)




    def templateArgumentList(self):

        localctx = CPP14Parser.TemplateArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_templateArgumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1908
            self.templateArgument()
            self.state = 1910
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Ellipsis:
                self.state = 1909
                self.match(CPP14Parser.Ellipsis)


            self.state = 1919
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CPP14Parser.Comma:
                self.state = 1912
                self.match(CPP14Parser.Comma)
                self.state = 1913
                self.templateArgument()
                self.state = 1915
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Ellipsis:
                    self.state = 1914
                    self.match(CPP14Parser.Ellipsis)


                self.state = 1921
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def theTypeId(self):
            return self.getTypedRuleContext(CPP14Parser.TheTypeIdContext,0)


        def constantExpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantExpressionContext,0)


        def idExpression(self):
            return self.getTypedRuleContext(CPP14Parser.IdExpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_templateArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateArgument" ):
                listener.enterTemplateArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateArgument" ):
                listener.exitTemplateArgument(self)




    def templateArgument(self):

        localctx = CPP14Parser.TemplateArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_templateArgument)
        try:
            self.state = 1925
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1922
                self.theTypeId()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1923
                self.constantExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1924
                self.idExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Typename_(self):
            return self.getToken(CPP14Parser.Typename_, 0)

        def nestedNameSpecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestedNameSpecifierContext,0)


        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def simpleTemplateId(self):
            return self.getTypedRuleContext(CPP14Parser.SimpleTemplateIdContext,0)


        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_typeNameSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeNameSpecifier" ):
                listener.enterTypeNameSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeNameSpecifier" ):
                listener.exitTypeNameSpecifier(self)




    def typeNameSpecifier(self):

        localctx = CPP14Parser.TypeNameSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_typeNameSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1927
            self.match(CPP14Parser.Typename_)
            self.state = 1928
            self.nestedNameSpecifier(0)
            self.state = 1934
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,280,self._ctx)
            if la_ == 1:
                self.state = 1929
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.state = 1931
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Template:
                    self.state = 1930
                    self.match(CPP14Parser.Template)


                self.state = 1933
                self.simpleTemplateId()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitInstantiationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext,0)


        def Extern(self):
            return self.getToken(CPP14Parser.Extern, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_explicitInstantiation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitInstantiation" ):
                listener.enterExplicitInstantiation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitInstantiation" ):
                listener.exitExplicitInstantiation(self)




    def explicitInstantiation(self):

        localctx = CPP14Parser.ExplicitInstantiationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_explicitInstantiation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1937
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Extern:
                self.state = 1936
                self.match(CPP14Parser.Extern)


            self.state = 1939
            self.match(CPP14Parser.Template)
            self.state = 1940
            self.declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitSpecializationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def Less(self):
            return self.getToken(CPP14Parser.Less, 0)

        def Greater(self):
            return self.getToken(CPP14Parser.Greater, 0)

        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_explicitSpecialization

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitSpecialization" ):
                listener.enterExplicitSpecialization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitSpecialization" ):
                listener.exitExplicitSpecialization(self)




    def explicitSpecialization(self):

        localctx = CPP14Parser.ExplicitSpecializationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_explicitSpecialization)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1942
            self.match(CPP14Parser.Template)
            self.state = 1943
            self.match(CPP14Parser.Less)
            self.state = 1944
            self.match(CPP14Parser.Greater)
            self.state = 1945
            self.declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Try(self):
            return self.getToken(CPP14Parser.Try, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(CPP14Parser.CompoundStatementContext,0)


        def handlerSeq(self):
            return self.getTypedRuleContext(CPP14Parser.HandlerSeqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_tryBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryBlock" ):
                listener.enterTryBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryBlock" ):
                listener.exitTryBlock(self)




    def tryBlock(self):

        localctx = CPP14Parser.TryBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_tryBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1947
            self.match(CPP14Parser.Try)
            self.state = 1948
            self.compoundStatement()
            self.state = 1949
            self.handlerSeq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTryBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Try(self):
            return self.getToken(CPP14Parser.Try, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(CPP14Parser.CompoundStatementContext,0)


        def handlerSeq(self):
            return self.getTypedRuleContext(CPP14Parser.HandlerSeqContext,0)


        def constructorInitializer(self):
            return self.getTypedRuleContext(CPP14Parser.ConstructorInitializerContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_functionTryBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTryBlock" ):
                listener.enterFunctionTryBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTryBlock" ):
                listener.exitFunctionTryBlock(self)




    def functionTryBlock(self):

        localctx = CPP14Parser.FunctionTryBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_functionTryBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1951
            self.match(CPP14Parser.Try)
            self.state = 1953
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Colon:
                self.state = 1952
                self.constructorInitializer()


            self.state = 1955
            self.compoundStatement()
            self.state = 1956
            self.handlerSeq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerSeqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def handler(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.HandlerContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.HandlerContext,i)


        def getRuleIndex(self):
            return CPP14Parser.RULE_handlerSeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerSeq" ):
                listener.enterHandlerSeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerSeq" ):
                listener.exitHandlerSeq(self)




    def handlerSeq(self):

        localctx = CPP14Parser.HandlerSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_handlerSeq)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1959 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1958
                self.handler()
                self.state = 1961 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==CPP14Parser.Catch):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Catch(self):
            return self.getToken(CPP14Parser.Catch, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def exceptionDeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.ExceptionDeclarationContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(CPP14Parser.CompoundStatementContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_handler

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandler" ):
                listener.enterHandler(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandler" ):
                listener.exitHandler(self)




    def handler(self):

        localctx = CPP14Parser.HandlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_handler)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1963
            self.match(CPP14Parser.Catch)
            self.state = 1964
            self.match(CPP14Parser.LeftParen)
            self.state = 1965
            self.exceptionDeclaration()
            self.state = 1966
            self.match(CPP14Parser.RightParen)
            self.state = 1967
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExceptionDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSpecifierSeq(self):
            return self.getTypedRuleContext(CPP14Parser.TypeSpecifierSeqContext,0)


        def attributeSpecifierSeq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeSpecifierSeqContext,0)


        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext,0)


        def abstractDeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractDeclaratorContext,0)


        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_exceptionDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptionDeclaration" ):
                listener.enterExceptionDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptionDeclaration" ):
                listener.exitExceptionDeclaration(self)




    def exceptionDeclaration(self):

        localctx = CPP14Parser.ExceptionDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_exceptionDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 1978
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Alignas, CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Class, CPP14Parser.Const, CPP14Parser.Decltype, CPP14Parser.Double, CPP14Parser.Enum, CPP14Parser.Float, CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Struct, CPP14Parser.Typename_, CPP14Parser.Union, CPP14Parser.Unsigned, CPP14Parser.Void, CPP14Parser.Volatile, CPP14Parser.Wchar, CPP14Parser.LeftBracket, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1970
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1969
                    self.attributeSpecifierSeq()


                self.state = 1972
                self.typeSpecifierSeq()
                self.state = 1975
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,285,self._ctx)
                if la_ == 1:
                    self.state = 1973
                    self.declarator()

                elif la_ == 2:
                    self.state = 1974
                    self.abstractDeclarator()


                pass
            elif token in [CPP14Parser.Ellipsis]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1977
                self.match(CPP14Parser.Ellipsis)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThrowExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Throw(self):
            return self.getToken(CPP14Parser.Throw, 0)

        def assignmentExpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentExpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_throwExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowExpression" ):
                listener.enterThrowExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowExpression" ):
                listener.exitThrowExpression(self)




    def throwExpression(self):

        localctx = CPP14Parser.ThrowExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_throwExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1980
            self.match(CPP14Parser.Throw)
            self.state = 1982
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.IntegerLiteral) | (1 << CPP14Parser.CharacterLiteral) | (1 << CPP14Parser.FloatingLiteral) | (1 << CPP14Parser.StringLiteral) | (1 << CPP14Parser.BooleanLiteral) | (1 << CPP14Parser.PointerLiteral) | (1 << CPP14Parser.UserDefinedLiteral) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.Static_cast - 65)) | (1 << (CPP14Parser.This - 65)) | (1 << (CPP14Parser.Throw - 65)) | (1 << (CPP14Parser.Typeid_ - 65)) | (1 << (CPP14Parser.Typename_ - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)))) != 0) or _la==CPP14Parser.Identifier:
                self.state = 1981
                self.assignmentExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExceptionSpecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dynamicExceptionSpecification(self):
            return self.getTypedRuleContext(CPP14Parser.DynamicExceptionSpecificationContext,0)


        def noeExceptSpecification(self):
            return self.getTypedRuleContext(CPP14Parser.NoeExceptSpecificationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_exceptionSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptionSpecification" ):
                listener.enterExceptionSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptionSpecification" ):
                listener.exitExceptionSpecification(self)




    def exceptionSpecification(self):

        localctx = CPP14Parser.ExceptionSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_exceptionSpecification)
        try:
            self.state = 1986
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Throw]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1984
                self.dynamicExceptionSpecification()
                pass
            elif token in [CPP14Parser.Noexcept]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1985
                self.noeExceptSpecification()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DynamicExceptionSpecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Throw(self):
            return self.getToken(CPP14Parser.Throw, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def typeIdList(self):
            return self.getTypedRuleContext(CPP14Parser.TypeIdListContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_dynamicExceptionSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamicExceptionSpecification" ):
                listener.enterDynamicExceptionSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamicExceptionSpecification" ):
                listener.exitDynamicExceptionSpecification(self)




    def dynamicExceptionSpecification(self):

        localctx = CPP14Parser.DynamicExceptionSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_dynamicExceptionSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1988
            self.match(CPP14Parser.Throw)
            self.state = 1989
            self.match(CPP14Parser.LeftParen)
            self.state = 1991
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 13)) & ~0x3f) == 0 and ((1 << (_la - 13)) & ((1 << (CPP14Parser.Auto - 13)) | (1 << (CPP14Parser.Bool - 13)) | (1 << (CPP14Parser.Char - 13)) | (1 << (CPP14Parser.Char16 - 13)) | (1 << (CPP14Parser.Char32 - 13)) | (1 << (CPP14Parser.Class - 13)) | (1 << (CPP14Parser.Const - 13)) | (1 << (CPP14Parser.Decltype - 13)) | (1 << (CPP14Parser.Double - 13)) | (1 << (CPP14Parser.Enum - 13)) | (1 << (CPP14Parser.Float - 13)) | (1 << (CPP14Parser.Int - 13)) | (1 << (CPP14Parser.Long - 13)) | (1 << (CPP14Parser.Short - 13)) | (1 << (CPP14Parser.Signed - 13)) | (1 << (CPP14Parser.Struct - 13)) | (1 << (CPP14Parser.Typename_ - 13)))) != 0) or ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (CPP14Parser.Union - 77)) | (1 << (CPP14Parser.Unsigned - 77)) | (1 << (CPP14Parser.Void - 77)) | (1 << (CPP14Parser.Volatile - 77)) | (1 << (CPP14Parser.Wchar - 77)) | (1 << (CPP14Parser.Doublecolon - 77)) | (1 << (CPP14Parser.Identifier - 77)))) != 0):
                self.state = 1990
                self.typeIdList()


            self.state = 1993
            self.match(CPP14Parser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeIdListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def theTypeId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TheTypeIdContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TheTypeIdContext,i)


        def Ellipsis(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.Ellipsis)
            else:
                return self.getToken(CPP14Parser.Ellipsis, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.Comma)
            else:
                return self.getToken(CPP14Parser.Comma, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_typeIdList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeIdList" ):
                listener.enterTypeIdList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeIdList" ):
                listener.exitTypeIdList(self)




    def typeIdList(self):

        localctx = CPP14Parser.TypeIdListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_typeIdList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1995
            self.theTypeId()
            self.state = 1997
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Ellipsis:
                self.state = 1996
                self.match(CPP14Parser.Ellipsis)


            self.state = 2006
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CPP14Parser.Comma:
                self.state = 1999
                self.match(CPP14Parser.Comma)
                self.state = 2000
                self.theTypeId()
                self.state = 2002
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Ellipsis:
                    self.state = 2001
                    self.match(CPP14Parser.Ellipsis)


                self.state = 2008
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoeExceptSpecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noexcept(self):
            return self.getToken(CPP14Parser.Noexcept, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantExpressionContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_noeExceptSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoeExceptSpecification" ):
                listener.enterNoeExceptSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoeExceptSpecification" ):
                listener.exitNoeExceptSpecification(self)




    def noeExceptSpecification(self):

        localctx = CPP14Parser.NoeExceptSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_noeExceptSpecification)
        try:
            self.state = 2015
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,293,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2009
                self.match(CPP14Parser.Noexcept)
                self.state = 2010
                self.match(CPP14Parser.LeftParen)
                self.state = 2011
                self.constantExpression()
                self.state = 2012
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2014
                self.match(CPP14Parser.Noexcept)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TheOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def New(self):
            return self.getToken(CPP14Parser.New, 0)

        def LeftBracket(self):
            return self.getToken(CPP14Parser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(CPP14Parser.RightBracket, 0)

        def Delete(self):
            return self.getToken(CPP14Parser.Delete, 0)

        def Plus(self):
            return self.getToken(CPP14Parser.Plus, 0)

        def Minus(self):
            return self.getToken(CPP14Parser.Minus, 0)

        def Star(self):
            return self.getToken(CPP14Parser.Star, 0)

        def Div(self):
            return self.getToken(CPP14Parser.Div, 0)

        def Mod(self):
            return self.getToken(CPP14Parser.Mod, 0)

        def Caret(self):
            return self.getToken(CPP14Parser.Caret, 0)

        def And(self):
            return self.getToken(CPP14Parser.And, 0)

        def Or(self):
            return self.getToken(CPP14Parser.Or, 0)

        def Tilde(self):
            return self.getToken(CPP14Parser.Tilde, 0)

        def Not(self):
            return self.getToken(CPP14Parser.Not, 0)

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def Greater(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.Greater)
            else:
                return self.getToken(CPP14Parser.Greater, i)

        def Less(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.Less)
            else:
                return self.getToken(CPP14Parser.Less, i)

        def GreaterEqual(self):
            return self.getToken(CPP14Parser.GreaterEqual, 0)

        def PlusAssign(self):
            return self.getToken(CPP14Parser.PlusAssign, 0)

        def MinusAssign(self):
            return self.getToken(CPP14Parser.MinusAssign, 0)

        def StarAssign(self):
            return self.getToken(CPP14Parser.StarAssign, 0)

        def ModAssign(self):
            return self.getToken(CPP14Parser.ModAssign, 0)

        def XorAssign(self):
            return self.getToken(CPP14Parser.XorAssign, 0)

        def AndAssign(self):
            return self.getToken(CPP14Parser.AndAssign, 0)

        def OrAssign(self):
            return self.getToken(CPP14Parser.OrAssign, 0)

        def RightShiftAssign(self):
            return self.getToken(CPP14Parser.RightShiftAssign, 0)

        def LeftShiftAssign(self):
            return self.getToken(CPP14Parser.LeftShiftAssign, 0)

        def Equal(self):
            return self.getToken(CPP14Parser.Equal, 0)

        def NotEqual(self):
            return self.getToken(CPP14Parser.NotEqual, 0)

        def LessEqual(self):
            return self.getToken(CPP14Parser.LessEqual, 0)

        def AndAnd(self):
            return self.getToken(CPP14Parser.AndAnd, 0)

        def OrOr(self):
            return self.getToken(CPP14Parser.OrOr, 0)

        def PlusPlus(self):
            return self.getToken(CPP14Parser.PlusPlus, 0)

        def MinusMinus(self):
            return self.getToken(CPP14Parser.MinusMinus, 0)

        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def ArrowStar(self):
            return self.getToken(CPP14Parser.ArrowStar, 0)

        def Arrow(self):
            return self.getToken(CPP14Parser.Arrow, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_theOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheOperator" ):
                listener.enterTheOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheOperator" ):
                listener.exitTheOperator(self)




    def theOperator(self):

        localctx = CPP14Parser.TheOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_theOperator)
        try:
            self.state = 2070
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,296,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2017
                self.match(CPP14Parser.New)
                self.state = 2020
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,294,self._ctx)
                if la_ == 1:
                    self.state = 2018
                    self.match(CPP14Parser.LeftBracket)
                    self.state = 2019
                    self.match(CPP14Parser.RightBracket)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2022
                self.match(CPP14Parser.Delete)
                self.state = 2025
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,295,self._ctx)
                if la_ == 1:
                    self.state = 2023
                    self.match(CPP14Parser.LeftBracket)
                    self.state = 2024
                    self.match(CPP14Parser.RightBracket)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2027
                self.match(CPP14Parser.Plus)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2028
                self.match(CPP14Parser.Minus)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2029
                self.match(CPP14Parser.Star)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2030
                self.match(CPP14Parser.Div)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2031
                self.match(CPP14Parser.Mod)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2032
                self.match(CPP14Parser.Caret)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2033
                self.match(CPP14Parser.And)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2034
                self.match(CPP14Parser.Or)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2035
                self.match(CPP14Parser.Tilde)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2036
                self.match(CPP14Parser.Not)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2037
                self.match(CPP14Parser.Assign)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2038
                self.match(CPP14Parser.Greater)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2039
                self.match(CPP14Parser.Less)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2040
                self.match(CPP14Parser.GreaterEqual)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2041
                self.match(CPP14Parser.PlusAssign)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2042
                self.match(CPP14Parser.MinusAssign)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 2043
                self.match(CPP14Parser.StarAssign)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 2044
                self.match(CPP14Parser.Assign)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 2045
                self.match(CPP14Parser.ModAssign)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 2046
                self.match(CPP14Parser.XorAssign)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 2047
                self.match(CPP14Parser.AndAssign)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 2048
                self.match(CPP14Parser.OrAssign)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 2049
                self.match(CPP14Parser.Less)
                self.state = 2050
                self.match(CPP14Parser.Less)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 2051
                self.match(CPP14Parser.Greater)
                self.state = 2052
                self.match(CPP14Parser.Greater)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 2053
                self.match(CPP14Parser.RightShiftAssign)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 2054
                self.match(CPP14Parser.LeftShiftAssign)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 2055
                self.match(CPP14Parser.Equal)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 2056
                self.match(CPP14Parser.NotEqual)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 2057
                self.match(CPP14Parser.LessEqual)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 2058
                self.match(CPP14Parser.GreaterEqual)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 2059
                self.match(CPP14Parser.AndAnd)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 2060
                self.match(CPP14Parser.OrOr)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 2061
                self.match(CPP14Parser.PlusPlus)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 2062
                self.match(CPP14Parser.MinusMinus)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 2063
                self.match(CPP14Parser.Comma)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 2064
                self.match(CPP14Parser.ArrowStar)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 2065
                self.match(CPP14Parser.Arrow)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 2066
                self.match(CPP14Parser.LeftParen)
                self.state = 2067
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 2068
                self.match(CPP14Parser.LeftBracket)
                self.state = 2069
                self.match(CPP14Parser.RightBracket)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntegerLiteral(self):
            return self.getToken(CPP14Parser.IntegerLiteral, 0)

        def CharacterLiteral(self):
            return self.getToken(CPP14Parser.CharacterLiteral, 0)

        def FloatingLiteral(self):
            return self.getToken(CPP14Parser.FloatingLiteral, 0)

        def StringLiteral(self):
            return self.getToken(CPP14Parser.StringLiteral, 0)

        def BooleanLiteral(self):
            return self.getToken(CPP14Parser.BooleanLiteral, 0)

        def PointerLiteral(self):
            return self.getToken(CPP14Parser.PointerLiteral, 0)

        def UserDefinedLiteral(self):
            return self.getToken(CPP14Parser.UserDefinedLiteral, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = CPP14Parser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2072
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.IntegerLiteral) | (1 << CPP14Parser.CharacterLiteral) | (1 << CPP14Parser.FloatingLiteral) | (1 << CPP14Parser.StringLiteral) | (1 << CPP14Parser.BooleanLiteral) | (1 << CPP14Parser.PointerLiteral) | (1 << CPP14Parser.UserDefinedLiteral))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[5] = self.nestedNameSpecifier_sempred
        self._predicates[15] = self.postfixExpression_sempred
        self._predicates[25] = self.noPointerNewDeclarator_sempred
        self._predicates[113] = self.noPointerDeclarator_sempred
        self._predicates[124] = self.noPointerAbstractDeclarator_sempred
        self._predicates[126] = self.noPointerAbstractPackDeclarator_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def nestedNameSpecifier_sempred(self, localctx:NestedNameSpecifierContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def postfixExpression_sempred(self, localctx:PostfixExpressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 3)
         

    def noPointerNewDeclarator_sempred(self, localctx:NoPointerNewDeclaratorContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 1)
         

    def noPointerDeclarator_sempred(self, localctx:NoPointerDeclaratorContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         

    def noPointerAbstractDeclarator_sempred(self, localctx:NoPointerAbstractDeclaratorContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 4)
         

    def noPointerAbstractPackDeclarator_sempred(self, localctx:NoPointerAbstractPackDeclaratorContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 2)
         




